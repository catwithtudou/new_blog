{"config":{"lang":["en","zh"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"algorithms/","title":"README","text":"<p>\u7a0b\u5e8f\u5458\u7684\u57fa\u672c\u529f</p>"},{"location":"algorithms/books/","title":"Books","text":"<p>Books About Algorithm</p> <p>Recently Reading:</p> <ul> <li> <p> \u300a\u4ee3\u7801\u968f\u60f3\u5f55\u300b\uff08202402\uff5e\uff09</p> </li> <li> <p> \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u4e4b\u7f8e\u300b</p> </li> </ul>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/","title":"\u300a\u4ee3\u7801\u968f\u60f3\u5f55\u300b","text":"<p>href: https://programmercarl.com/</p> <ul> <li> \u7b97\u6cd5\u6027\u80fd\u5206\u6790</li> <li> \u6570\u7ec4</li> <li> \u94fe\u8868</li> <li> \u54c8\u5e0c\u8868</li> <li> \u5b57\u7b26\u4e32</li> <li> \u53cc\u6307\u9488\u6cd5</li> <li> \u6808\u4e0e\u961f\u5217</li> <li> \u4e8c\u53c9\u6811</li> <li> \u56de\u6eaf\u7b97\u6cd5</li> <li> \u8d2a\u5fc3\u7b97\u6cd5</li> <li> \u52a8\u6001\u89c4\u5212</li> <li> \u5355\u8c03\u6808</li> <li> \u56fe\u8bba</li> </ul>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/01basic/","title":"\u6570\u7ec4\u7406\u8bba\u57fa\u7840","text":"<p>1. \u6570\u7ec4\u7684\u5b9a\u4e49&amp;\u7279\u70b9</p> <ul> <li>\u6570\u7ec4\u662f\u5b58\u653e\u5728\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u4e0a\u7684\u76f8\u540c\u7c7b\u578b\u6570\u636e\u7684\u96c6\u5408</li> <li>\u6570\u7ec4\u53ef\u4ee5\u65b9\u4fbf\u7684\u901a\u8fc7\u4e0b\u6807\u7d22\u5f15\u7684\u65b9\u5f0f\u83b7\u53d6\u5230\u4e0b\u6807\u4e0b\u5bf9\u5e94\u7684\u6570\u636e</li> </ul> <p>2. \u6570\u7ec4\u7684\u7279\u70b9</p> <p></p> <ul> <li>\u6570\u7ec4\u4e0b\u6807\u90fd\u662f\u4ece0\u5f00\u59cb\u7684</li> <li>\u6570\u7ec4\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u662f\u8fde\u7eed\u7684 <ul> <li>\u6240\u4ee5\u5728\u5bf9\u6570\u7ec4\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u80af\u5b9a\u4f1a\u8003\u8651\u5230\u79fb\u52a8\u5176\u4ed6\u5143\u7d20\u7684\u5730\u5740</li> <li>\u4e8c\u7ef4\u6570\u7ec4\u7684\u5185\u5b58\u7a7a\u95f4\u662f\u5426\u8fde\u7eed\uff0c\u53d6\u51b3\u4e8e\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u5b9e\u73b0</li> </ul> </li> <li>\u6570\u7ec4\u7684\u5143\u7d20\u4e0d\u80fd\u5220\u7684\u800c\u53ea\u80fd\u8986\u76d6</li> </ul>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/","title":"\u6570\u7ec4\u7b97\u6cd5","text":""},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#1-\u4e8c\u5206\u67e5\u627e","title":"1. \u4e8c\u5206\u67e5\u627e","text":"<p>\u6838\u5fc3\u70b9</p> <ul> <li>\u6709\u5e8f\u6570\u7ec4</li> <li>\u5c06\u76ee\u6807\u503c\u4e0e\u6570\u7ec4\u4e2d\u95f4\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u6392\u9664\u6389\u4e00\u534a\u7684\u5143\u7d20\uff0c\u5982\u6b64\u5faa\u73af\uff0c\u76f4\u5230\u627e\u5230\u76ee\u6807\u503c\u6216\u786e\u5b9a\u76ee\u6807\u503c\u4e0d\u5b58\u5728</li> <li>\u901a\u5e38\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(logn)\\)</li> </ul> <p>\u5176\u4e2d\u9700\u8981\u6ce8\u610f:</p> <ul> <li>\u533a\u95f4\u8303\u56f4\u51b3\u5b9a\u4e86\u8fb9\u754c\uff08\u5305\u542b\u8d77\u59cb\u4f4d\u7f6e\uff09\u7684\u503c\uff0c\u53ef\u901a\u8fc7\u6784\u9020\u7b80\u5355\u7684\u6709\u5e8f\u6570\u7ec4\u6765\u6f14\u7b97\u8fdb\u884c\u7406\u89e3</li> </ul>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#11-\u7b97\u6cd5\u4e8c\u5206\u6cd5","title":"1.1 \u7b97\u6cd5:\u4e8c\u5206\u6cd5","text":"\u4ee3\u7801\u6a21\u7248(\u70b9\u51fb\u5c55\u5f00) \u5de6\u95ed\u53f3\u95ed [left, right]\u5de6\u95ed\u53f3\u5f00 [left, right) Go<pre><code>func search(nums []int, target int) int {\n    high := len(nums)-1\n    low := 0\n    for low &lt;= high {\n        mid := low + (high-low)/2\n        if nums[mid] == target {\n            return mid\n        } else if nums[mid] &gt; target {\n            high = mid-1\n        } else {\n            low = mid+1\n        }\n    }\n    return -1\n}\n</code></pre> Go<pre><code>func search(nums []int, target int) int {\n    left, right := 0, len(nums)\n    for left &lt; right {\n        mid := left + (right-left)/2\n        if nums[mid] &gt; target {\n            right = mid\n        } else if nums[mid] &lt; target {\n            left = mid + 1\n        } else {\n            return mid\n        }\n    }\n\n    return -1\n}\n</code></pre>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#12-\u76f8\u5173\u9898\u76ee","title":"1.2 \u76f8\u5173\u9898\u76ee","text":"<ul> <li> 704\u4e8c\u5206\u67e5\u627e</li> <li> 35.\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e </li> <li> 34.\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e </li> <li> 69.x \u7684\u5e73\u65b9\u6839 </li> <li> 367.\u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570</li> </ul>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#2-\u79fb\u9664\u5143\u7d20","title":"2. \u79fb\u9664\u5143\u7d20","text":"<p>\u5bf9\u5e94 LeetCode \u9898\u76ee\uff1a </p> <p>Note</p> <p>\u6570\u7ec4\u7684\u5143\u7d20\u5728\u5185\u5b58\u5730\u5740\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u4e0d\u80fd\u5355\u72ec\u5220\u9664\u6570\u7ec4\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff0c\u53ea\u80fd\u8986\u76d6\u3002</p> <p>\u82e5\u91c7\u53d6\u66b4\u529b\u89e3\u6cd5\uff0c\u5219\u7c7b\u4f3c\u4e8e\u5192\u6ce1\u6392\u5e8f\u8fdb\u884c\u4e24\u5c42\u904d\u5386\uff0c\u4e0b\u9762\u91cd\u70b9\u8bf4\u660e\u53cc\u6307\u9488\u6cd5\u3002</p>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#21-\u7b97\u6cd5\u53cc\u6307\u9488\u6cd5","title":"2.1 \u7b97\u6cd5:\u53cc\u6307\u9488\u6cd5","text":"<p>\u53cc\u6307\u9488\u6cd5\uff08\u5feb\u6162\u6307\u9488\u6cd5\uff09\uff1a </p> <ul> <li>\u901a\u8fc7\u4e00\u4e2a\u5feb\u6307\u9488\u548c\u6162\u6307\u9488\u5728\u4e00\u4e2afor\u5faa\u73af\u4e0b\u5b8c\u6210\u4e24\u4e2afor\u5faa\u73af\u7684\u5de5\u4f5c</li> </ul> <p>\u5b9a\u4e49\u5feb\u6162\u6307\u9488\uff1a</p> <ul> <li>\u5feb\u6307\u9488\uff1a\u5bfb\u627e\u65b0\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u65b0\u6570\u7ec4\u5c31\u662f\u4e0d\u542b\u6709\u76ee\u6807\u5143\u7d20\u7684\u6570\u7ec4 </li> <li>\u6162\u6307\u9488\uff1a\u6307\u5411\u66f4\u65b0\u65b0\u6570\u7ec4\u4e0b\u6807\u7684\u4f4d\u7f6e</li> </ul> <p>\u6b64\u601d\u8def\u4e0d\u4ec5\u5e94\u7528\u5728\u6570\u7ec4\u4e2d\uff0c\u5728\u5176\u4ed6\u5982\u94fe\u8868\u3001\u5b57\u7b26\u4e32\u7b49\u90fd\u6709\u76f8\u5e94\u5e94\u7528\u3002</p> <p>\u4e0b\u9762\u4e24\u4e2a\u89e3\u6cd5\u5747\u53ef\u6ee1\u8db3\u9898\u610f\uff0c\u540e\u8005\u7684\u4f18\u70b9\u5728\u4e8e\u786e\u4fdd\u79fb\u52a8\u7684\u6700\u5c0f\u6b21\u6570</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\)</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(1)\\)</li> </ul> \u89e3\u6cd5\u4e00\u89e3\u6cd5\u4e8c Go<pre><code>func removeElement(nums []int, val int) int {\n    slow := 0\n    for fast := 0; fast &lt; len(nums); fast++ {\n        if val != nums[fast] {\n            nums[slow] = nums[fast]\n            slow++\n        }\n    }\n    return slow\n}\n</code></pre> Go<pre><code>func removeElement(nums []int, val int) int {\n    leftIdx, rightIdx := 0, len(nums)-1\n    for leftIdx &lt;= rightIdx {\n\n        for leftIdx &lt;= rightIdx &amp;&amp; nums[leftIdx] != val {\n            leftIdx++\n        }\n\n        for leftIdx &lt;= rightIdx &amp;&amp; nums[rightIdx] == val {\n            rightIdx--\n        }\n\n        if leftIdx &lt; rightIdx {\n            nums[leftIdx] = nums[rightIdx]\n            leftIdx++\n            rightIdx--\n        }\n    }\n\n    return leftIdx\n}\n</code></pre>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#22-\u76f8\u5173\u9898\u76ee","title":"2.2 \u76f8\u5173\u9898\u76ee","text":"<ul> <li> 27.\u79fb\u9664\u5143\u7d20</li> <li> 26.\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879</li> <li> 283.\u79fb\u52a8\u96f6</li> <li> 844.\u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32</li> <li> 977.\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9</li> </ul>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#3\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","title":"3.\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>\u5bf9\u5e94 LeetCode \u9898\u76ee\uff1a</p> <p></p> <p>Note</p> <p>\u6d89\u53ca\u5230\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u5904\u7406\uff0c\u53ef\u8003\u8651\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u7b97\u6cd5\u601d\u60f3\u6765\u89e3\u51b3</p> <p>\u82e5\u91c7\u53d6\u66b4\u529b\u89e3\u6cd5\uff0c\u5219\u662f\u901a\u8fc7\u4e24\u5c42\u5faa\u73af\u4e0d\u65ad\u5bfb\u627e\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\uff0c\u4e0b\u9762\u91cd\u70b9\u8bf4\u660e\u6ed1\u52a8\u7a97\u53e3\u89e3\u6cd5\u3002</p>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#31-\u7b97\u6cd5\u6ed1\u52a8\u7a97\u53e3","title":"3.1 \u7b97\u6cd5:\u6ed1\u52a8\u7a97\u53e3","text":"<p>\u6ed1\u52a8\u7a97\u53e3\u7684\u4e3b\u8981\u601d\u60f3\uff1a</p> <ul> <li>\u4e0d\u65ad\u7684\u8c03\u8282\u5b50\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u4ece\u800c\u5f97\u51fa\u9884\u671f\u7ed3\u679c</li> </ul> <p>\u6ed1\u52a8\u7a97\u53e3\u7684\u5b9e\u73b0\u901a\u5e38\u9700\u8981\u786e\u8ba4\u5982\u4e0b\u4e09\u70b9\uff1a</p> <ul> <li>\u7a97\u53e3\u5185\u662f\u4ec0\u4e48\uff1f <ul> <li>\u6ee1\u8db3\u5176\u548c\u2265s\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4     </li> </ul> </li> <li>\u5982\u4f55\u79fb\u52a8\u7a97\u53e3\u7684\u8d77\u59cb\u4f4d\u7f6e\uff1f <ul> <li>\u82e5\u5f53\u524d\u7a97\u53e3\u7684\u503c\u5927\u4e8es\u5219\u7a97\u53e3\u9700\u8981\u5411\u524d\u79fb\u52a8\u4e86</li> </ul> </li> <li>\u5982\u4f55\u79fb\u52a8\u7a97\u53e3\u7684\u7ed3\u675f\u4f4d\u7f6e\uff1f<ul> <li>\u7a97\u53e3\u7684\u7ed3\u675f\u4f4d\u7f6e\u5c31\u662f\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488</li> </ul> </li> </ul> <p>\u5177\u4f53\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(1)\\)</p> Go<pre><code>func minSubArrayLen(target int, nums []int) int {\n    start, end := 0, 0\n    result := len(nums) + 1\n    cur := 0\n    for ; end &lt; len(nums); end++ {\n        cur += nums[end]\n        for ; cur &gt;= target; start++ {\n            result = min(result, end-start+1)\n            cur -= nums[start]\n        }\n    }\n\n    if result == len(nums)+1 {\n        return 0\n    }\n    return result\n}\n</code></pre>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#32-\u76f8\u5173\u9898\u76ee","title":"3.2 \u76f8\u5173\u9898\u76ee","text":"<ul> <li> 209.\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4</li> <li> 904.\u6c34\u679c\u6210\u7bee</li> <li> 76.\u6700\u5c0f\u8986\u76d6\u5b50\u4e32</li> </ul>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#4-\u87ba\u65cb\u77e9\u9635ii","title":"4. \u87ba\u65cb\u77e9\u9635II","text":"<p>\u5bf9\u5e94 LeetCode \u9898\u76ee\uff1a</p> <p></p> <p>Note</p> <p>\u6b64\u9898\u91cd\u8981\u7684\u4e0d\u662f\u7b97\u6cd5\uff0c\u800c\u662f\u8003\u5bdf\u6a21\u62df\u7684\u8fc7\u7a0b</p>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#41-\u7b97\u6cd5\u6a21\u62df\u8fc7\u7a0b","title":"4.1 \u7b97\u6cd5:\u6a21\u62df\u8fc7\u7a0b","text":"<p>\u5728\u4e0a\u9762\u63d0\u5230\u4e8c\u5206\u6cd5\u7684\u65f6\u5019\u5c31\u63d0\u5230\uff0c\u5982\u679c\u8981\u5199\u51fa\u6b63\u786e\u7684\u4e8c\u5206\u6cd5\u4e00\u5b9a\u8981\u575a\u6301\u5faa\u73af\u4e0d\u53d8\u91cf\u539f\u5219\u3002</p> <p>\u800c\u6c42\u89e3\u6b64\u9898\u4f9d\u7136\u662f\u8981\u575a\u6301\u5faa\u73af\u4e0d\u53d8\u91cf\u539f\u5219\uff0c\u6a21\u62df\u987a\u65f6\u9488\u753b\u77e9\u9635\u7684\u8fc7\u7a0b:</p> <ul> <li>\u586b\u5145\u4e0a\u884c\u4ece\u5de6\u5230\u53f3 </li> <li>\u586b\u5145\u53f3\u5217\u4ece\u4e0a\u5230\u4e0b </li> <li>\u586b\u5145\u4e0b\u884c\u4ece\u53f3\u5230\u5de6 </li> <li>\u586b\u5145\u5de6\u5217\u4ece\u4e0b\u5230\u4e0a</li> </ul> <p>\u8fd9\u91cc\u6211\u4eec\u5c31\u9700\u8981\u4fdd\u6301\u5faa\u73af\u4e0d\u53d8\u91cf\uff0c\u4fdd\u6301\u6bcf\u6761\u8fb9\u5de6\u95ed\u53f3\u5f00\u7684\u539f\u5219\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n^2)\\)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(1)\\)</p> gorust Go<pre><code>func generateMatrix(n int) [][]int {\n        result := make([][]int, n)\n        for i, _ := range result {\n                result[i] = make([]int, n)\n        }\n        startX, startY := 0, 0\n        mid := n / 2\n        count, offset := 1, 1\n        for loop := n / 2; loop &gt; 0; loop-- {\n                i, j := startX, startY\n\n                for j = startY; j &lt; n-offset; j++ {\n                        result[startX][j] = count\n                        count++\n                }\n                for i = startX; i &lt; n-offset; i++ {\n                        result[i][j] = count\n                        count++\n                }\n                for ; j &gt; startY; j-- {\n                        result[i][j] = count\n                        count++\n                }\n                for ; i &gt; startX; i-- {\n                        result[i][j] = count\n                        count++\n                }\n\n                startX++\n                startY++\n                offset++\n        }\n\n        if n%2 &gt; 0 {\n                result[mid][mid] = count\n        }\n        return result\n}\n</code></pre> Rust<pre><code>impl Solution {\n    pub fn generate_matrix(n: i32) -&gt; Vec&lt;Vec&lt;i32&gt;&gt; {\n        let mut result = vec![vec![0; n as usize]; n as usize];\n        let (mut start_x, mut start_y) = (0, 0);\n        let mid = (n / 2) as usize;\n        let (mut offset, mut count) = (1, 1);\n        for _ in (0..(n / 2)).rev() {\n            let (mut i, mut j) = (start_x, start_y);\n\n            for _ in start_y..(n as usize - offset) {\n                result[start_x][j] = count;\n                count += 1;\n                j += 1;\n            }\n\n            for _ in start_x..(n as usize - offset) {\n                result[i][j] = count;\n                count += 1;\n                i += 1;\n            }\n\n            for _ in 0..(j - start_y) {\n                result[i][j] = count;\n                count += 1;\n                j -= 1;\n            }\n\n            for _ in 0..(i - start_x) {\n                result[i][j] = count;\n                count += 1;\n                i -= 1;\n            }\n\n            start_x += 1;\n            start_y += 1;\n            offset += 1;\n        }\n\n        if n % 2 &gt; 0 {\n            result[mid][mid] = count;\n        }\n        result\n    }\n}\n</code></pre>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/01%E6%95%B0%E7%BB%84/02array_algorithms/#42-\u76f8\u5173\u9898\u76ee","title":"4.2 \u76f8\u5173\u9898\u76ee","text":"<ul> <li> 54.\u87ba\u65cb\u77e9\u9635</li> <li> 59.\u87ba\u65cb\u77e9\u9635II</li> <li> \u5251\u6307Offer29.\u987a\u65f6\u9488\u6253\u5370\u77e9\u9635</li> </ul>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/01basic/","title":"\u94fe\u8868\u7406\u8bba\u57fa\u7840","text":"<p>1. \u94fe\u8868\u7684\u5b9a\u4e49</p> <ul> <li>\u4e00\u79cd\u901a\u8fc7\u6307\u9488\u4e32\u8054\u5728\u4e00\u8d77\u7684\u7ebf\u6027\u7ed3\u6784</li> <li>\u6bcf\u4e00\u4e2a\u8282\u70b9\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u662f\u6570\u636e\u57df\u548c\u6307\u9488\u57df\uff08\u5b58\u653e\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff09</li> <li>\u7b2c\u4e00\u4e2a\u8282\u70b9\u79f0\u4e3a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u5373 head\uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u57df\u6307\u5411\u7a7a\u6307\u9488</li> </ul> <p></p> <p>2. \u94fe\u8868\u7684\u7c7b\u578b</p> <ul> <li>\u5355\u94fe\u8868</li> </ul> <p>\u5982\u5b9a\u4e49\u6240\u793a\u3002</p> <ul> <li>\u53cc\u94fe\u8868</li> </ul> <p>\u6bcf\u4e00\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6307\u9488\u57df\uff0c\u53ef\u5206\u522b\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u548c\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>\u5373\u8bf4\u660e\u80fd\u505a\u5230\u5411\u524d\u67e5\u8be2\u548c\u5411\u540e\u67e5\u8be2\u3002</p> <p></p> <ul> <li>\u5faa\u73af\u94fe\u8868</li> </ul> <p>\u5373\u94fe\u8868\u9996\u5c3e\u662f\u76f8\u8fde\u7684\u3002\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u7ea6\u745f\u592b\u73af\u95ee\u9898\u3002</p> <p></p> <p>3. \u94fe\u8868\u7684\u5b58\u50a8\u65b9\u5f0f</p> <ul> <li>\u6570\u7ec4\u662f\u5728\u5185\u5b58\u4e2d\u662f\u8fde\u7eed\u5206\u5e03\u7684\uff0c\u4f46\u662f\u94fe\u8868\u5728\u5185\u5b58\u4e2d\u53ef\u4e0d\u662f\u8fde\u7eed\u5206\u5e03\u7684</li> <li>\u94fe\u8868\u662f\u901a\u8fc7\u6307\u9488\u57df\u7684\u6307\u9488\u94fe\u63a5\u5728\u5185\u5b58\u4e2d\u5404\u4e2a\u8282\u70b9\uff0c\u5373\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u5728\u5185\u5b58\u4e2d\u4e0d\u662f\u8fde\u7eed\u5206\u5e03\u7684\uff0c\u800c\u662f\u6563\u4e71\u5206\u5e03\u5728\u5185\u5b58\u4e2d\u7684\u67d0\u5730\u5740\u4e0a</li> <li>\u5176\u5185\u5b58\u7684\u5206\u914d\u673a\u5236\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u5b58\u7ba1\u7406</li> </ul> <p></p> <p>4. \u94fe\u8868\u7684\u5b9a\u4e49</p> Go<pre><code>type ListNode struct {\n    Val  int\n    Next *ListNode\n}\n</code></pre> <p>5. \u94fe\u8868\u7684\u64cd\u4f5c</p> \u94fe\u8868\u64cd\u4f5c \u64cd\u4f5c\u7684\u89e3\u91ca \u5220\u9664\u8282\u70b9  \u6ce8\u610f\uff1a\u8282\u70b9\u7684\u5220\u9664\u5e76\u6ca1\u6709\u91ca\u653e\u88ab\u5220\u9664\u8282\u70b9\u7684\u5185\u5b58\u3002 \u6dfb\u52a0\u8282\u70b9 <p>6. \u6027\u80fd\u5206\u6790</p> \u63d2\u5165/\u5220\u9664 \u67e5\u8be2 \u9002\u7528\u573a\u666f \u6570\u7ec4 \\(O(n)\\) \\(O(1)\\) \u6570\u636e\u91cf\u56fa\u5b9a\uff0c\u9891\u7e41\u67e5\u8be2\uff0c\u8f83\u5c11\u589e\u5220 \u94fe\u8868 \\(O(1)\\) \\(O(n)\\) \u6570\u636e\u91cf\u4e0d\u56fa\u5b9a\uff0c\u9891\u7e41\u589e\u5220\uff0c\u8f83\u5c11\u67e5\u8be2"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/02list_algorithms/","title":"\u94fe\u8868\u7b97\u6cd5\u9898\u76ee","text":""},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/02list_algorithms/#1-\u79fb\u9664\u94fe\u8868\u5143\u7d20","title":"1. \u79fb\u9664\u94fe\u8868\u5143\u7d20","text":"<p>\u5bf9\u5e94 LeetCode \u9898\u76ee\uff1a</p> <p></p> <p>\u8fd9\u91cc\u5c31\u6d89\u53ca\u5230\u524d\u9762\u7406\u8bba\u90e8\u5206\u6240\u8bb2\u7684\u94fe\u8868\u7684\u5220\u9664\u64cd\u4f5c\u3002</p> <p>\u4f46\u662f\u5728\u5b9e\u9645\u7f16\u5199\u4ee3\u7801\u8fc7\u7a0b\u4e2d\u53ef\u53d1\u73b0\uff1a</p> <ul> <li>\u82e5\u76f4\u63a5\u91c7\u7528\u8282\u70b9 next \u6307\u9488\u76f4\u63a5\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u65b9\u5f0f</li> <li>\u5219\u5220\u9664\u5934\u90e8\u7ed3\u70b9\u548c\u5176\u4ed6\u7ed3\u70b9\u7684\u5904\u7406\u662f\u4e0d\u540c\u7684</li> </ul> <p>\u6240\u4ee5\u4e0b\u9762\u6211\u4eec\u671f\u671b\u901a\u8fc7\u4e00\u79cd\u65b9\u5f0f\u6765\u8ba9\u4e24\u79cd\u65b9\u5f0f\u7684\u5904\u7406\u4fdd\u6301\u4e00\u81f4\u3002</p>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/02list_algorithms/#11-\u601d\u8def\u501f\u52a9\u865a\u62df\u5934\u7ed3\u70b9","title":"1.1 \u601d\u8def:\u501f\u52a9\u865a\u62df\u5934\u7ed3\u70b9","text":"<p>\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u539f\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u5c31\u90fd\u53ef\u4ee5\u6309\u7167\u7edf\u4e00\u7684\u65b9\u5f0f\u8fdb\u884c\u79fb\u9664\u3002</p> <p></p> <p>\u6700\u540e\u5728\u8fd4\u56de\u5934\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u9700\u8981\u8fd4\u56de\u865a\u62df\u5934\u7ed3\u70b9\u7684 next\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6:\\(O(1)\\)</li> </ul> gorust Go<pre><code>/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeElements(head *ListNode, val int) *ListNode {\n    dummyHead := &amp;ListNode{}\n    dummyHead.Next = head\n    cur := dummyHead\n    for cur != nil &amp;&amp; cur.Next != nil {\n        if cur.Next.Val == val {\n            cur.Next = cur.Next.Next\n        } else {\n            cur = cur.Next\n        }\n    }\n\n    return dummyHead.Next\n}\n</code></pre> Rust<pre><code>pub struct Solution;\n\n// Definition for singly-linked list.\n#[derive(PartialEq, Eq, Clone, Debug)]\npub struct ListNode {\n    pub val: i32,\n    pub next: Option&lt;Box&lt;ListNode&gt;&gt;,\n}\n\nimpl ListNode {\n    #[inline]\n    fn new(val: i32) -&gt; Self {\n        ListNode {\n            next: None,\n            val,\n        }\n    }\n}\n\nimpl Solution {\n    pub fn remove_elements(head: Option&lt;Box&lt;ListNode&gt;&gt;, val: i32) -&gt; Option&lt;Box&lt;ListNode&gt;&gt; {\n        let mut dummy_head = Box::new(ListNode::new(0));\n        dummy_head.next = head;\n        let mut cur = dummy_head.as_mut();\n        while let Some(nxt) = cur.next.take() {\n            if nxt.val == val {\n                cur.next = nxt.next;\n            } else {\n                cur.next = Some(nxt);\n                cur = cur.next.as_mut().unwrap();\n            }\n        }\n        dummy_head.next\n    }\n}\n</code></pre>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/02list_algorithms/#2-\u8bbe\u8ba1\u94fe\u8868","title":"2. \u8bbe\u8ba1\u94fe\u8868","text":"<p>\u5bf9\u5e94 LeetCode \u9898\u76ee\uff1a</p> <p></p> <p>\u8be5\u9898\u8986\u76d6\u4e86\u94fe\u8868\u6240\u6709\u7684\u57fa\u7840\u64cd\u4f5c\uff0c\u9700\u8981\u524d\u7f6e\u638c\u63e1\u94fe\u8868\u7684\u7406\u8bba\u90e8\u5206\u3002</p>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/02list_algorithms/#21-\u601d\u8def\u94fe\u8868\u57fa\u7840\u548c\u54e8\u5175\u8282\u70b9","title":"2.1 \u601d\u8def:\u94fe\u8868\u57fa\u7840\u548c\u54e8\u5175\u8282\u70b9","text":"<p>\u7ed3\u5408\u524d\u9762\u63d0\u5230\u7684\u865a\u62df\u5934\u7ed3\u70b9\u6765\u5b8c\u6210\u8be5\u9898\u76ee\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6d89\u53ca index \u7684\u76f8\u5173\u64cd\u4f5c\u4e3a \\(O(index)\\)\uff0c\u5176\u4f59\u4e3a \\(O(1)\\) </li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\)</li> </ul> gorust Go<pre><code>type MyLinkedList struct {\n    dummyHead *SingleNode // \u865a\u62df\u5934\u8282\u70b9\n    Size      int         // \u94fe\u8868\u5927\u5c0f\n}\n\ntype SingleNode struct {\n    Val  int         // \u8282\u70b9\u7684\u503c\n    Next *SingleNode // \u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\n}\n\nfunc NewMyLinkedList() MyLinkedList {\n    newNode := &amp;SingleNode{ // \u521b\u5efa\u65b0\u8282\u70b9\n        0,\n        nil,\n    }\n    return MyLinkedList{ // \u8fd4\u56de\u94fe\u8868\n        dummyHead: newNode,\n        Size:      0,\n    }\n}\n\nfunc (this *MyLinkedList) Get(index int) int {\n    if this == nil || index &lt; 0 || index &gt;= this.Size {\n        return -1\n    }\n\n    cur := this.dummyHead.Next\n    for i := 0; i &lt; index; i++ {\n        cur = cur.Next\n    }\n    return cur.Val\n}\n\nfunc (this *MyLinkedList) AddAtHead(val int) {\n    newNode := &amp;SingleNode{\n        Val:  val,\n        Next: this.dummyHead.Next,\n    }\n    this.dummyHead.Next = newNode\n    this.Size++\n}\n\nfunc (this *MyLinkedList) AddAtTail(val int) {\n    newNode := &amp;SingleNode{Val: val}\n    cur := this.dummyHead\n    for cur.Next != nil {\n        cur = cur.Next\n    }\n    cur.Next = newNode\n    this.Size++\n}\n\nfunc (this *MyLinkedList) AddAtIndex(index int, val int) {\n    if index &lt; 0 {\n        index = 0\n    } else if index &gt; this.Size {\n        return\n    }\n\n    newNode := &amp;SingleNode{Val: val}\n    cur := this.dummyHead\n    for i := 0; i &lt; index; i++ {\n        cur = cur.Next\n    }\n    newNode.Next = cur.Next\n    cur.Next = newNode\n    this.Size++\n}\n\nfunc (this *MyLinkedList) DeleteAtIndex(index int) {\n    if index &lt; 0 || index &gt;= this.Size {\n        return\n    }\n    cur := this.dummyHead\n    for i := 0; i &lt; index; i++ {\n        cur = cur.Next\n    }\n    if cur.Next != nil {\n        cur.Next = cur.Next.Next\n        this.Size--\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Get(index);\n * obj.AddAtHead(val);\n * obj.AddAtTail(val);\n * obj.AddAtIndex(index,val);\n * obj.DeleteAtIndex(index);\n */\n</code></pre> Rust<pre><code>pub struct Solution;\n\n#[derive(Debug)]\npub struct MyLinkedList {\n    pub val: i32,\n    pub next: Option&lt;Box&lt;MyLinkedList&gt;&gt;,\n}\n\n\n/**\n * `&amp;self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&amp;mut self` instead.\n */\nimpl MyLinkedList {\n    fn new() -&gt; Self {\n        MyLinkedList { val: 0, next: None }\n    }\n\n    fn get(&amp;self, index: i32) -&gt; i32 {\n        if index &lt; 0 {\n            return -1;\n        }\n        let mut i = 0;\n        let mut cur = &amp;self.next;\n        while let Some(node) = cur {\n            if i == index {\n                return node.val;\n            }\n            i += 1;\n            cur = &amp;node.next;\n        }\n        -1\n    }\n\n    fn add_at_head(&amp;mut self, val: i32) {\n        let new_node = Box::new(MyLinkedList {\n            val,\n            next: self.next.take(),\n        });\n        self.next = Some(new_node);\n    }\n\n    fn add_at_tail(&amp;mut self, val: i32) {\n        let new_node = Box::new(MyLinkedList { val, next: None });\n        let mut last_node = &amp;mut self.next;\n        while let Some(node) = last_node {\n            last_node = &amp;mut node.next;\n        }\n        *last_node = Some(new_node);\n    }\n\n    fn add_at_index(&amp;mut self, index: i32, val: i32) {\n        if index &lt;= 0 {\n            self.add_at_head(val);\n        } else {\n            let mut i = 0;\n            let mut cur = &amp;mut self.next;\n            while let Some(node) = cur {\n                if i + 1 == index {\n                    let new_node = Box::new(MyLinkedList {\n                        val,\n                        next: node.next.take(),\n                    });\n                    node.next = Some(new_node);\n                    break;\n                }\n                i += 1;\n                cur = &amp;mut node.next;\n            }\n        }\n    }\n\n    fn delete_at_index(&amp;mut self, index: i32) {\n        if index &lt; 0 {\n            return;\n        }\n\n        let mut i = 0;\n        let mut cur = self;\n        while let Some(node) = cur.next.take() {\n            if i == index {\n                cur.next = node.next;\n                break;\n            }\n            i += 1;\n            cur.next = Some(node);\n            cur = cur.next.as_mut().unwrap();\n        }\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList::new();\n * let ret_1: i32 = obj.get(index);\n * obj.add_at_head(val);\n * obj.add_at_tail(val);\n * obj.add_at_index(index, val);\n * obj.delete_at_index(index);\n */\n</code></pre>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/02list_algorithms/#3-\u7ffb\u8f6c\u94fe\u8868","title":"3. \u7ffb\u8f6c\u94fe\u8868","text":"<p>\u5bf9\u5e94 LeetCode \u9898\u76ee\uff1a</p> <p></p> <p>\u9996\u5148\u6211\u4eec\u60f3\u5230\u7684\u6700\u7b80\u5355\u7684\u89e3\u6cd5\u5c31\u662f\uff0c\u518d\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u5b9e\u73b0\u53cd\u8f6c\uff0c\u6b64\u89e3\u6cd5\u5b58\u5728\u5bf9\u5185\u5b58\u7a7a\u95f4\u6d6a\u8d39\uff0c\u6700\u597d\u53ef\u4ee5\u539f\u5730\u3002</p>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/02list_algorithms/#31-\u601d\u8def\u53cc\u6307\u9488\u6216\u9012\u5f52","title":"3.1 \u601d\u8def:\u53cc\u6307\u9488\u6216\u9012\u5f52","text":"<ol> <li>\u53cc\u6307\u9488</li> </ol> <p>\u5206\u522b\u5b9a\u4e49 pre \u548c cur \u4e24\u4e2a\u6307\u9488\uff0c\u6bcf\u6b21\u79fb\u52a8 cur \u65f6\u5c06 cur-&gt;next \u6307\u5411 pre\uff0c\u6700\u540e\u8fd4\u56de pre \u6307\u9488\u5373\u53cd\u8f6c\u540e\u7684\u5934\u8282\u70b9\u3002</p> <p>\u6ce8\u610f\u5728\u79fb\u52a8 cur \u65f6\uff0c\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u4e2d\u95f4\u6307\u9488\u6765\u6682\u5b58 cur \u7684\u5f53\u524d\u4f4d\u7f6e\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(1)\\)</li> </ul> gorust Go<pre><code>/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseList(head *ListNode) *ListNode {\n    var cur, pre, tmp *ListNode\n    cur = head\n    for cur != nil {\n        tmp = cur.Next\n        cur.Next = pre\n        pre = cur\n        cur = tmp\n    }\n    return pre\n}\n</code></pre> Rust<pre><code>// Definition for singly-linked list.\n#[derive(PartialEq, Eq, Clone, Debug)]\npub struct ListNode {\n    pub val: i32,\n    pub next: Option&lt;Box&lt;ListNode&gt;&gt;,\n}\n\nimpl ListNode {\n    #[inline]\n    fn new(val: i32) -&gt; Self {\n        ListNode {\n            next: None,\n            val,\n        }\n    }\n}\n\npub struct Solution;\n\n\nimpl Solution {\n    pub fn reverse_list(head: Option&lt;Box&lt;ListNode&gt;&gt;) -&gt; Option&lt;Box&lt;ListNode&gt;&gt; {\n        let mut pre = None;\n        let mut cur = head;\n        while let Some(mut node) = cur.take() {\n            cur = node.next;\n            node.next = pre;\n            pre = Some(node);\n        }\n        pre\n    }\n}\n</code></pre> <ol> <li>\u9012\u5f52\u6cd5</li> </ol> <p>\u9012\u5f52\u867d\u7136\u4f1a\u62bd\u8c61\u4e00\u4e9b\uff0c\u4f46\u5b9e\u9645\u4e0a\u903b\u8f91\u4e0e\u53cc\u6307\u9488\u4e00\u81f4\uff0c\u6838\u5fc3\u90fd\u662f\u4e0d\u65ad\u79fb\u52a8 cur \u540e\u6307\u5411 pre\uff0c\u6700\u540e\u5728 cur \u4e3a\u7a7a\u7684\u65f6\u5019\u7ed3\u675f\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\u9012\u5f52\u6cd5\u6240\u9700\u8981\u7684\u7a7a\u95f4\u4e3a n\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\)</li> </ul> <p>\u4e5f\u5b58\u5728\u76f8\u53cd\u7684\u9012\u5f52\u601d\u8def\uff0c\u5373\u4ece\u540e\u5f80\u524d\u7ffb\u8f6c\u6307\u9488\u6307\u5411\u3002</p> gorust Go<pre><code>func reverseListOther(head *ListNode) *ListNode {\n    var reverse func(*ListNode, *ListNode) *ListNode\n    reverse = func(pre *ListNode, cur *ListNode) *ListNode {\n        if cur == nil {\n            return pre\n        }\n        temp := cur.Next\n        cur.Next = pre\n        return reverse(cur, temp)\n    }\n\n    return reverse(nil, head)\n}\n</code></pre> Rust<pre><code>impl Solution {\n    pub fn reverse_list_other(head: Option&lt;Box&lt;ListNode&gt;&gt;) -&gt; Option&lt;Box&lt;ListNode&gt;&gt; {\n        fn reverse(mut cur: Option&lt;Box&lt;ListNode&gt;&gt;, mut pre: Option&lt;Box&lt;ListNode&gt;&gt;) -&gt; Option&lt;Box&lt;ListNode&gt;&gt; {\n            if let Some(mut node) = cur.take() {\n                cur = node.next;\n                node.next = pre;\n                pre = Some(node);\n                return reverse(cur, pre);\n            }\n            pre\n        }\n        reverse(head, None)\n    }\n}\n</code></pre>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/02list_algorithms/#4-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","title":"4. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u5bf9\u5e94 LeetCode \u9898\u76ee\uff1a</p> <p></p> <p>\u6b64\u9898\u6b63\u5e38\u6a21\u62df\uff0c\u4e3b\u8981\u8003\u67e5\u94fe\u8868\u7684\u64cd\u4f5c\uff0c\u53ef\u4f7f\u7528\u753b\u56fe\u6765\u6e05\u6670\u8868\u793a\u3002</p>"},{"location":"algorithms/books/2401%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/02%E9%93%BE%E8%A1%A8/02list_algorithms/#41-\u601d\u8def\u865a\u62df\u5934\u8282\u70b9\u6216\u9012\u5f52","title":"4.1 \u601d\u8def:\u865a\u62df\u5934\u8282\u70b9\u6216\u9012\u5f52","text":"<p>\u4ea4\u6362\u7684\u6b65\u9aa4\u5982\u4e0b\u56fe\u793a\uff1a</p> <p></p> <p>\u865a\u62df\u5934\u8282\u70b9\u548c\u9012\u5f52\u7684\u89e3\u6cd5\u6309\u7167\u4e0a\u9762\u6b65\u9aa4\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(1)\\)</li> </ul> gorust Go<pre><code>/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc swapPairs(head *ListNode) *ListNode {\n    if head == nil || head.Next == nil {\n        return head\n    }\n    dummyHead := &amp;ListNode{0, nil}\n    dummyHead.Next = head\n    cur := dummyHead\n    for cur.Next != nil &amp;&amp; cur.Next.Next != nil {\n        tmp := cur.Next\n        tmp1 := cur.Next.Next.Next\n\n        cur.Next = cur.Next.Next\n        cur.Next.Next = tmp\n        cur.Next.Next.Next = tmp1\n\n        cur = cur.Next.Next\n    }\n    return dummyHead.Next\n}\n\nfunc swapPairsOther(head *ListNode) *ListNode {\n    if head == nil || head.Next == nil {\n        return head\n    }\n    next := head.Next\n    head.Next = swapPairsOther(next.Next)\n    next.Next = head\n    return next\n}\n</code></pre> Rust<pre><code>// Definition for singly-linked list.\n#[derive(PartialEq, Eq, Clone, Debug)]\npub struct ListNode {\n    pub val: i32,\n    pub next: Option&lt;Box&lt;ListNode&gt;&gt;,\n}\n\nimpl ListNode {\n    #[inline]\n    fn new(val: i32) -&gt; Self {\n        ListNode {\n            next: None,\n            val,\n        }\n    }\n}\n\npub struct Solution;\n\nimpl Solution {\n    pub fn swap_pairs(head: Option&lt;Box&lt;ListNode&gt;&gt;) -&gt; Option&lt;Box&lt;ListNode&gt;&gt; {\n        let mut dummy_head = Box::new(ListNode::new(0));\n        dummy_head.next = head;\n        let mut cur = dummy_head.as_mut();\n        while let Some(mut node) = cur.next.take() {\n            if let Some(mut next) = node.next.take() {\n                node.next = next.next.take();\n                next.next = Some(node);\n                cur.next = Some(next);\n                cur = cur.next.as_mut().unwrap().next.as_mut().unwrap();\n            } else {\n                cur.next = Some(node);\n                cur = cur.next.as_mut().unwrap();\n            }\n        }\n        dummy_head.next\n    }\n}\n</code></pre>"},{"location":"architecture/","title":"Architecture Design","text":""},{"location":"blog/","title":"All Blog","text":""},{"location":"blog/me/","title":"\ud83c\udf26\ufe0fMe","text":"<p>Hope to realize what I really want</p> <p>updated in 20231101</p> <ul> <li>\ud83d\udc68\u200d\ud83d\udcbb As a server engineer in Bytedance (202207-~)</li> <li>\ud83e\udee3 The most important thing at present is to maintain a stable mentality and return to the original intention</li> <li>\ud83e\udd15 Recently, the thing I have been learning is Rust And LangChain</li> <li>\u26a1 Always the self-reflection</li> <li>List of recently read books See the doc</li> </ul>"},{"location":"blog/tags/","title":"\ud83d\udd17Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"blog/tags/#docker","title":"docker","text":"<ul> <li>Mac\u642d\u5efaDocker+Ubuntu\u73af\u5883\u652f\u6301GDB</li> </ul>"},{"location":"blog/tags/#os","title":"os","text":"<ul> <li>Mac\u642d\u5efaDocker+Ubuntu\u73af\u5883\u652f\u6301GDB</li> </ul>"},{"location":"blog/2024/03/03/2024-02-review/","title":"2024-02 Review","text":"<p>\u5c1d\u8bd5\u4e0b\u6708\u5ea6\u590d\u76d8 Review \u8f93\u51fa\u5427\uff0c\u4e3b\u8981\u5185\u5bb9\u662f\u8be5\u6708\u7684\u91cd\u70b9\u4e8b\u9879\u53ca\u5176\u611f\u53d7\u548c\u4e00\u4e9b\u91cd\u8981\u7684\u601d\u8003\u70b9\u7b49\u3002</p> <p>\u4e0d\u8ffd\u6c42\u683c\u5f0f\u4e86\uff0c\u5148\u5199\u4e86\u518d\u8bf4\u3002</p> <p>\u8fd9\u91cc\u5148\u4e3b\u8981\u5206\u4e3a\u5de5\u4f5c\u4e0a\u548c\u751f\u6d3b\u4e0a\u6765\u5206\u522b\u8fdb\u884c\u68b3\u7406\u3002</p>"},{"location":"blog/2024/03/03/2024-02-review/#1-\u5de5\u4f5c\u4e0a","title":"1. \u5de5\u4f5c\u4e0a","text":"<p>\u5728\u8fd9\u4e2a\u6708\u5b9e\u9645\u8fce\u6765\u6211\u804c\u4e1a\u751f\u6daf\u7684\u4e00\u4e2a\u5173\u952e\u8282\u70b9\uff0c\u5373\u5f00\u59cb\u63a5\u624b\u4e00\u4e2a\u4e1a\u52a1\u65b9\u5411\u7684\u4e8b\u60c5\u3002</p> <p>\u76ee\u524d\u8be5\u4e1a\u52a1\u5b58\u5728\u7740\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\uff0c\u662f\u5173\u952e\u4e14\u4f53\u91cf\u5f88\u5927\u7684\u4e1a\u52a1\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5b58\u5728\u975e\u5e38\u591a\u7684\u673a\u4f1a\u3002</p> <p>\u4f46\u662f\u6700\u91cd\u8981\u7684\u662f\uff0c\u4f60\u80fd\u5426\u6709\u80fd\u529b\u6293\u4f4f\u673a\u4f1a\uff0c\u662f\u5426\u80fd\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u662f\u5426\u6700\u5feb\u5730\u62ff\u5230\u6700\u9ad8\u7684\u6536\u76ca\u3002</p> <p>\u867d\u7136\u662f\u628a\u5f88\u950b\u5229\u7684\u201c\u53cc\u5203\u5251\u201d\uff0c\u4f46\u662f\u6211\u660e\u767d\u76f8\u8f83\u4e8e\u90e8\u95e8\u73b0\u6709\u7684\u4e8b\u60c5\u6765\u8bf4\uff0c\u7b97\u662f\u201c\u6700\u597d\u7684\u201d\u4e00\u628a\u4e86\u3002</p> <p>\u76ee\u524d\u8fdb\u5ea6\u7684\u8bdd\uff0c\u53ea\u80fd\u8bf4\u662f\u201c\u89c4\u89c4\u77e9\u77e9\u201d\uff0c\u5b58\u5728\u5f88\u591a\u80fd\u505a\u5f97\u66f4\u597d\u7684\u5730\u65b9\uff08\u53ef\u80fd\u7b49\u5f85\u7740\u6211\u53bb\u5b9e\u8df5\u843d\u5730\uff09\u3002</p> <p>\u5e0c\u671b\u4e00\u5207\u987a\u5229\u5427</p> <p>\u4ee5\u4e0b\u662f\u6211\u53cd\u7701\u8fd9\u4e2a\u6708\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4e00\u4e9b\u91cd\u8981\u95ee\u9898\u548c\u601d\u8003\u70b9\uff1a</p>"},{"location":"blog/2024/03/03/2024-02-review/#11-\u4fdd\u6301\u7a33\u5b9a\u7684\u5de5\u4f5c\u72b6\u6001\u907f\u514d\u62d6\u5ef6\u548c\u56de\u907f","title":"1.1 \u4fdd\u6301\u7a33\u5b9a\u7684\u5de5\u4f5c\u72b6\u6001&amp;\u907f\u514d\u62d6\u5ef6\u548c\u56de\u907f","text":"<p>\u76ee\u524d\u6211\u7684\u5de5\u4f5c\u72b6\u6001\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u6ca1\u6709\u66f4\u597d\uff0c\u53ea\u6709\u66f4\u5dee\uff0c\u4fdd\u6301\u5728\u4e2d\u95f4\u7a33\u5b9a\u7684\u6c34\u5e73\u5df2\u7ecf\u662f\u6211\u73b0\u72b6\u7684\u76ee\u6807\u3002</p> <p>\u6bd4\u5982\u4e00\u4e9b\u51fa\u73b0\u7684\u73b0\u8c61\uff1a</p> <ul> <li>\u6625\u8282\u8282\u5047\u65e5\u524d\u540e\u72b6\u6001\u7684\u677e\u61c8\u548c\u96be\u4ee5\u4e13\u6ce8</li> <li>\u5bf9\u4e8e\u56f0\u96be\u548c\u6311\u6218\u7684\u4e8b\u60c5\u53d8\u5f97\u62d6\u5ef6\u548c\u9003\u907f</li> <li>\u6ca1\u6709\u53bb\u8ba4\u771f\u94bb\u7814\u548c\u601d\u8003\u90e8\u5206\u95ee\u9898\u548c\u5de5\u4f5c</li> <li>.....</li> </ul> <p>\u5728\u8fd9\u4e2a\u6708\u6211\u4e5f\u53d1\u8868\u4e86\u8fd9\u6837\u7684\u63a8\u7279\uff1a</p> <p></p> <p>\u5f53\u7136\u8fd9\u90fd\u662f\u4e0e\u4e4b\u524d\u5de5\u4f5c\u7684\u6211\u76f8\u6bd4\u8f83\u7684\uff0c\u4ece\u5f53\u524d\u7684\u7ee9\u6548\u4e0a\u6765\u6211\u4e5f\u662f\u5c5e\u4e8e\u8f83\u597d\u7684\u90a3\u79cd\uff0c\u4e5f\u6709\u4e00\u4e9b\u53ef\u5708\u53ef\u70b9\u7684\u5730\u65b9\uff0c\u4e0a\u9762\u51fa\u73b0\u7684\u73b0\u8c61\uff0c\u4e5f\u4e0d\u662f\u5984\u81ea\u83f2\u8584\uff0c\u800c\u662f\u6211\u77e5\u9053\u5982\u679c\u662f\u4ee5\u524d\u7684\u6211\uff0c\u80fd\u505a\u5230\u66f4\u597d\uff0c\u751a\u81f3\u80fd\u505a\u5f97\u66f4\u52a0\u5f00\u5fc3\u3002</p> <p>\u8bf4\u5b9e\u8bdd\u6574\u4e2a\u53d8\u5316\u7684\u8fc7\u7a0b\u662f\u6084\u65e0\u58f0\u606f\u7684\uff0c\u5e94\u8be5\u662f\u4ece\u53bb\u5e74\u505a\u5b8c\u6625\u8282\u9879\u76ee\u4e4b\u540e\u76844\u6708\u4efd\u5f00\u59cb\uff0c\u968f\u7740\u7ecf\u5386\u7684\u4e00\u4ef6\u4e00\u4ef6\u7684\u4e8b\u60c5\uff0c\u5728\u90a3\u6761\u8def\u4e0a\u53ef\u80fd\u8d70\u4e86\u4e00\u70b9\uff0c\u4e22\u4e86\u4e00\u70b9\uff0c\u8d70\u4e86\u4e00\u70b9\uff0c\u53c8\u4e22\u4e86\u4e00\u70b9\u3002\u518d\u5177\u4f53\u4e00\u70b9\uff0c\u5c31\u6bd4\u5982\u9047\u5230\u4e86\u4e00\u4e9b\u96be\u4ee5\u6c9f\u901a\u7684\u540c\u4e8b\u3001\u65e0\u4eba\u5206\u644a\u53ea\u6709\u6211\u4e00\u4eba\u53bb\u9762\u5bf9\u95ee\u9898\u3001\u6d89\u53ca\u5229\u76ca\u7ea0\u7eb7\u65f6\u7684\u626f\u76ae\u3001\u9879\u76ee\u88ab\u90a3\u4e9b\u201c\u9879\u76ee\u5916\u7684\u4e8b\u60c5\u201d\u4e0d\u65adPending\u751a\u81f3delay\u3001\u610f\u8bc6\u5230\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u62b1\u7740\u201c\u8ba4\u771f\u505a\u597d\u4e8b\u60c5\u201d\u7684\u6001\u5ea6\u548c\u4f60\u5408\u4f5c\u7b49\u7b49\u3002</p> <p>\u5f53\u7136\u4e0a\u9762\u7684\u8fd9\u4e9b\u6211\u77e5\u9053\u4e5f\u4e0d\u5168\u662f\u574f\u4e8b\uff0c\u81f3\u5c11\u4e5f\u7b97\u63d0\u524d\u63a5\u89e6\u5230\u4e86\u793e\u4f1a\u7684\u9b51\u9b45\u9b4d\u9b49\uff0c\u76f8\u8f83\u4e8e\u4e4b\u524d\u7684\u4e00\u5e06\u98ce\u987a\uff0c\u90a3\u786e\u5b9e\u6ca1\u610f\u8bc6\u5230\u53ea\u662f\u52a0\u4e0a\u4e86\u5f88\u591a\u7684\u8fd0\u6c14\u4f7f\u7136\uff0c\u771f\u5b9e\u6216\u8005\u5927\u90e8\u5206\u7684\u60c5\u51b5\u5e94\u8be5\u90fd\u662f\u6211\u540e\u9762\u9047\u5230\u7684\u8fd9\u4e9b\u3002</p> <p>\u5982\u4f55\u627e\u56de\u4e4b\u524d\u7684\u5de5\u4f5c\u72b6\u6001\uff0c\u5bf9\u4e8e\u56f0\u96be\u7684\u4e8b\u60c5\u4e5f\u4e0d\u62d6\u5ef6\u548c\u56de\u907f\uff0c\u6211\u76ee\u524d\u91c7\u53d6\u7684\u63aa\u65bd\u4e3b\u8981\u6709\u4e09\u4e2a\uff1a</p> <p>1. \u9605\u8bfb\u7279\u522b\u662f\u5fc3\u7406\u590d\u539f\u7684\u4e66\u7c4d</p> <p>\u66f4\u591a\u662f\u5f00\u5bfc\u81ea\u5df1\u548c\u8ba4\u6e05\u81ea\u6211\uff0c\u5206\u6e05\u695a\u90a3\u4e9b\u662f\u6211\u53ef\u63a7\u7684\uff0c\u90a3\u4e9b\u662f\u6211\u4e0d\u53ef\u63a7\u7684\uff0c\u5206\u522b\u505a\u597d\u51c6\u5907\u3002</p> <p>2. \u53c2\u4e0e\u62d6\u5ef6\u5e94\u5bf9\u7684\u57fa\u7840\u8bad\u7ec3\u8425</p> <p>\u91cd\u65b0\u8ba4\u8bc6\u4e86\u756a\u8304\u949f\uff0c\u4e5f\u5b66\u5230\u4e86\u65b0\u7684\u6267\u884c\u6280\u5de7\uff0c\u4e5f\u770b\u5230\u4e86\u86ee\u591a\u4e0e\u6211\u6709\u7c7b\u4f3c\u56f0\u60d1\u7684\u4eba\u3002</p> <p>3. \u505a\u597d\u7cbe\u529b\u7ba1\u7406</p> <p>\u610f\u8bc6\u5230\u5de5\u4f5c\u7684\u4e8b\u60c5\u662f\u5341\u5206\u6d88\u8017\u7cbe\u529b\u7684\uff0c\u5982\u679c\u60f3\u8981\u66f4\u597d\u5730\u8f93\u51fa\uff0c\u90a3\u4e5f\u8981\u505a\u5230\u4e00\u5b9a\u7684\u8f93\u5165\u3002</p>"},{"location":"blog/2024/03/03/2024-02-review/#12-\u53ca\u65f6\u66b4\u9732\u95ee\u9898\u548c\u601d\u8003\u95ee\u9898\u7ebf\u4e0a\u73af\u5883\u7684\u656c\u754f\u5fc3","title":"1.2 \u53ca\u65f6\u66b4\u9732\u95ee\u9898\u548c\u601d\u8003\u95ee\u9898&amp;\u7ebf\u4e0a\u73af\u5883\u7684\u656c\u754f\u5fc3","text":"<p>\u6700\u8fd1\u9047\u5230\u4e00\u4e2a\u7ebf\u4e0a\u95ee\u9898\uff0c\u8ba9\u6211\u91cd\u65b0\u6765\u53cd\u7701\u8fd9\u4e2a\u70b9\u3002</p> <p>\u867d\u7136\u6211\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u4e0d\u7b97\u662f\u4e3b\u8981\u8d23\u4efb\u4eba\uff0c\u4f46\u662f\u6211\u5c5e\u4e8e\u5176\u4e2d\u6ca1\u6709\u505a\u597d\u7684\u4e00\u73af\u3002</p> <p>\u5f53\u65f6\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u4e25\u91cd\u6027\uff0c\u56e0\u4e3a\u6211\u4e4b\u524d\u7684\u770b\u6cd5\u662f\uff1a</p> <ul> <li>\u8fd9\u4e2a\u670d\u52a1\u7ebf\u4e0a\u4e0d\u7a33\u5b9a\u4e5f\u662f\u5e38\u6001\uff0c\u6240\u4ee5\u51fa\u73b0\u8fd9\u6837\u7684\u95ee\u9898\u4e5f\u6b63\u5e38\uff0c\u4e0d\u7528\u7279\u522b\u5173\u6ce8</li> </ul> <p>\u4fdd\u6301\u7740\u8fd9\u6837\u9519\u8bef\u7684\u770b\u6cd5\uff0c\u6211\u4e5f\u6ca1\u6709\u53bb\u60f3\uff1a</p> <ul> <li>\u8fd9\u6837\u771f\u7684\u6b63\u5e38\u5417\uff1f\u4f60\u6709\u8ba4\u771f\u7684\u5206\u6790\u8fc7\u5177\u4f53\u7684\u539f\u56e0\u5417\uff1f\u771f\u7684\u6ca1\u6709\u89e3\u6cd5\u5417\uff1f</li> <li>\u5982\u679c\u660e\u77e5\u662f\u7ebf\u4e0a\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u7279\u522b\u5173\u6ce8\uff1f\u7ebf\u4e0a\u8fd8\u4e0d\u91cd\u8981\u5417\uff1f</li> </ul> <p>\u5f53\u6211\u201c\u610f\u5916\u201d\u66b4\u9732\u95ee\u9898\u540e\uff0c\u660e\u663e\u5730\uff0cleader \u628a\u6211\u8ba4\u771f\u6559\u80b2\u4e86\u4e00\u987f\uff0c\u8fd9\u4e0d\u662f\u6211\u5e94\u8be5\u4f5c\u51fa\u7684\u8868\u73b0\u3002</p> <p>\u540e\u9762\u8ba4\u771f\u5206\u6790\u540e\uff0c\u68b3\u7406\u4e86\u6392\u67e5\u6587\u6863\u548c\u63d0\u51fa\u4e86\u4f18\u5316\u65b9\u6848\uff0c\u53d1\u73b0\u95ee\u9898\u6bd4\u6211\u60f3\u8c61\u4e25\u91cd\uff0c\u6240\u4ee5\u9700\u8c28\u8bb0\u3002</p>"},{"location":"blog/2024/03/03/2024-02-review/#13-\u4e1a\u52a1\u548c\u6570\u636e\u7684\u7406\u89e3\u6362\u4f4d\u601d\u8003","title":"1.3 \u4e1a\u52a1\u548c\u6570\u636e\u7684\u7406\u89e3&amp;\u6362\u4f4d\u601d\u8003","text":"<p>\u65e2\u7136\u4f60\u76ee\u524d\u8981\u8d1f\u8d23\u8fd9\u4e2a\u4e1a\u52a1\u65b9\u5411\uff0c\u90a3\u4f60\u81ea\u7136\u800c\u7136\u5c31\u9700\u8981\u7406\u89e3\u8fd9\u4e2a\u4e1a\u52a1\uff1a</p> <ul> <li>\u4e1a\u52a1\u80cc\u666f</li> <li>\u4e1a\u52a1\u76ee\u6807</li> <li>\u4ea7\u54c1\u529f\u80fd</li> <li>\u6838\u5fc3\u6307\u6807</li> </ul> <p>\u5bf9\u4e8e\u4e1a\u52a1\u548c\u6570\u636e\u7684\u7406\u89e3\uff0c\u4f60\u5149\u770b\u662f\u4e0d\u884c\u7684\uff0c\u4f60\u9700\u8981\u8ba4\u771f\u5b9e\u9645\u5730\u53bb\u4f53\u9a8c\uff0c\u624d\u80fd\u660e\u767d\uff1a</p> <ul> <li>\u4e3a\u4ec0\u4e48\u9700\u8981\u51fa\u73b0\u8fd9\u4e2a\u4ea7\u54c1\u529f\u80fd\uff0c\u89e3\u51b3\u4e86\u7528\u6237\u4ec0\u4e48\u95ee\u9898\u548c\u9700\u6c42</li> <li>\u57fa\u4e8e\u8fd9\u6837\u7684\u95ee\u9898\u548c\u9700\u6c42\uff0c\u6240\u4ee5\u80fd\u5e26\u6765\u4ec0\u4e48\u6837\u7684\u6536\u76ca\u548c\u4ef7\u503c</li> <li>\u57fa\u4e8e\u8fd9\u6837\u7684\u4ef7\u503c\u548c\u6574\u4e2a\u4ea7\u54c1\u7684\u80cc\u666f\uff0c\u624d\u80fd\u5236\u5b9a\u4e1a\u52a1\u7684\u76ee\u6807</li> <li>\u7279\u522b\u662f\u6570\u636e\u6307\u6807\u90e8\u5206\uff0c\u6307\u6807\u7684\u53e3\u5f84\u662f\u57fa\u4e8e\u7528\u6237\u7684\u4ec0\u4e48\u884c\u4e3a</li> <li>\u57fa\u4e8e\u8fd9\u6837\u7684\u884c\u4e3a\uff0c\u624d\u80fd\u7406\u89e3\u6307\u6807\u9ad8\u6216\u8005\u4f4e\u7684\u610f\u4e49\u662f\u4ec0\u4e48</li> <li>.....</li> </ul> <p>\u8fd8\u6709\u4e00\u4e2a\u91cd\u70b9\u5c31\u662f\u7ad9\u5728\u7528\u6237\u7684\u89d2\u5ea6\u53bb\u6362\u4f4d\u601d\u8003\uff0c\u628a\u81ea\u5df1\u5f53\u6210\u7528\u6237\u53bb\u8bbe\u8ba1\u81ea\u5df1\u7684\u4ea7\u54c1\u3002</p> <p>\u8fd9\u6837\u7684\u573a\u666f\u4e0b\uff0c\u7528\u6237\u662f\u56e0\uff0c\u4ea7\u54c1\u662f\u679c\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u56e0\uff0c\u90a3\u4f60\u5c31\u65e0\u6cd5\u7406\u89e3\u4e3a\u4ec0\u4e48\u5f97\u51fa\u8fd9\u6837\u7684\u679c\u3002</p>"},{"location":"blog/2024/03/03/2024-02-review/#14-\u7406\u6e05\u695a\u56e0\u679c\u63a8\u65ad\u60f3\u6e05\u695a\u4e8b\u60c5","title":"1.4 \u7406\u6e05\u695a\u56e0\u679c\u63a8\u65ad&amp;\u60f3\u6e05\u695a\u4e8b\u60c5","text":"<p>\u6700\u8fd1\u5de5\u4f5c\u4e0a\u9047\u5230\u7684\u8d8a\u6765\u8d8a\u591a\u7684\u4e8b\u60c5\uff0c\u9010\u6e10\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u3002\u5373\uff1a</p> <ul> <li>\u56e0\u679c\u63a8\u65ad</li> </ul> <p>\u4e3a\u4ec0\u4e48\u8fd9\u6837\u7684\u539f\u56e0\u80fd\u63a8\u65ad\u51fa\u8fd9\u6837\u7684\u7ed3\u8bba\uff1f \u662f\u5426\u7f6e\u4fe1\uff0c\u662f\u5426\u662f\u5408\u7406\u7684\u5f52\u56e0\u65b9\u5f0f\u7b49\u3002</p> <p>\u5de5\u4f5c\u4e0a\u5404\u79cd\u5404\u6837\u7684\u4e8b\u60c5\u4e0a\uff0c\u4f60\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\u5426 solid\uff0c\u662f\u5426\u80fd\u5e94\u5bf9\u522b\u4eba\u7684 argue\uff0c\u662f\u5426\u80fd\u8bf4\u670d\uff1f</p> <p>\u4ee5\u4e0a\u90fd\u9700\u8981\u5408\u7406\u6b63\u786e\u7684\u56e0\u679c\u63a8\u65ad\uff0c\u4e5f\u53ea\u6709\u8fd9\u6837\u624d\u80fd\u8bc1\u660e\u4f60\u60f3\u6e05\u695a\u4e86\u8fd9\u4ef6\u4e8b\u60c5\u3002</p>"},{"location":"blog/2024/03/03/2024-02-review/#15-\u5408\u7406\u89c4\u5212\u4e8b\u60c5\u7684\u4f18\u5148\u7ea7\u548c\u5148\u540e\u987a\u5e8f\u4e8b\u60c5\u7684\u6536\u76ca","title":"1.5 \u5408\u7406\u89c4\u5212\u4e8b\u60c5\u7684\u4f18\u5148\u7ea7\u548c\u5148\u540e\u987a\u5e8f&amp;\u4e8b\u60c5\u7684\u6536\u76ca","text":"<p>\u6700\u8fd1\u505a\u9700\u6c42\u9047\u5230\u7684\u4e00\u4e9b\u95ee\u9898\uff1a</p> <ul> <li>\u67d0\u4e2a\u9700\u6c42\u70b9\u6ca1\u6709\u63d0\u524d\u60f3\u6e05\u695a\uff0c\u540e\u9762\u770b\u7684\u65f6\u5019\u610f\u8bc6\u5230\u9700\u8981\u5ba2\u6237\u7aef\u4ecb\u5165\uff0c\u5bfc\u81f4\u6392\u671f\u5ef6\u957f</li> <li>\u6ca1\u6709\u770b\u5230\u7ebf\u4e0a\u5df2\u7ecf\u51fa\u73b0\u5bf9\u4e1a\u52a1\u6709\u635f\u7684\u95ee\u9898\uff0c\u5bfc\u81f4\u6709\u635f\u5f71\u54cd\u65f6\u95f4\u4e00\u76f4\u589e\u52a0\uff0c\u6301\u7eed\u4e1a\u52a1\u53d7\u635f</li> <li>\u6ca1\u6709\u8003\u8651\u6e05\u695a\u67d0\u4ef6\u4e8b\u60c5\u7684\u4ea7\u51fa\u4ef7\u503c\uff0c\u53cd\u800c\u5148\u53bb\u505a\u4e86\u6536\u76ca\u66f4\u5c0f\u800c\u4e0d\u662f\u53bb\u505a\u66f4\u91cd\u8981\u7684\u4e8b\u60c5</li> <li>\u9879\u76ee\u524d\u671f\u54ea\u4e9b\u4e8b\u60c5\u9700\u8981\u63d0\u524d\u62c9\u9f50\uff0c\u68b3\u7406\u597d\u6d89\u53ca\u5230\u7684\u4e1a\u52a1\u65b9\uff0c\u5bf9\u9f50\u597d\u8d44\u6e90\u4e0d\u5f71\u54cd\u540e\u7eed\u5f00\u5c55</li> <li>.....</li> </ul> <p>\u4ee5\u4e0a\u9047\u5230\u7684\u95ee\u9898\u6574\u4f53\u6765\u8bf4\u5c31\u662f\u6ca1\u6709\u5408\u7406\u89c4\u5212\u597d\u4e8b\u60c5\u7684\u4f18\u5148\u7ea7\u548c\u5148\u540e\u987a\u5e8f\uff0c\u6bd4\u5982\u60f3\u6e05\u695a\uff1a</p> <ul> <li>\u54ea\u4e9b\u4e8b\u60c5\u5e94\u8be5\u5148\u505a\uff0c\u54ea\u4e9b\u5e94\u8be5\u540e\u505a</li> <li>\u54ea\u4e9b\u4e8b\u60c5\u66f4\u52a0\u91cd\u8981\uff0c\u54ea\u4e9b\u53ef\u4ee5\u653e\u7f13</li> <li>\u54ea\u4e9b\u4e8b\u60c5 ROI \u66f4\u9ad8\uff0c\u54ea\u4e9b\u66f4\u8f83\u4f4e</li> <li>...</li> </ul> <p>\u6ca1\u6709\u89c4\u5212\u597d\u7684\u540e\u679c\uff0c\u5c31\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd4\u5de5\u3001ROI \u4f4e\u3001\u6392\u671f\u5ef6\u957f\u3001\u9879\u76ee\u505c\u6ede\u7b49\u95ee\u9898\u548c\u98ce\u9669\u3002</p> <p>\u5f53\u7136\u8fd9\u91cc\u7684\u89c4\u5212\u554a\u4e5f\u662f\u8981\u6839\u636e\u5b9e\u9645\u4e1a\u52a1\u573a\u666f\u53bb\u79ef\u7d2f\uff0c\u53ef\u63d0\u524d\u8be2\u95ee\u62e5\u6709\u9879\u76ee\u7ecf\u9a8c\u7684\u540c\u4e8b\u4e86\u89e3\u3002</p> <p>\u540c\u65f6\u4e5f\u8981\u57f9\u517b\u81ea\u5df1\u5224\u65ad\u4e8b\u60c5\u6536\u76ca\u7684\u80fd\u529b\uff0c\u4e0d\u80fd\u81ea\u55e8\uff0c\u800c\u662f\u8981\u53d1\u6325\u65f6\u95f4\u7684\u6700\u5927\u4ef7\u503c\u3002</p>"},{"location":"blog/2024/03/03/2024-02-review/#16-\u6c9f\u901a\u8981\u5206\u6e05\u695a\u53cc\u65b9\u7684\u91cd\u70b9\u53cc\u8d62","title":"1.6 \u6c9f\u901a\u8981\u5206\u6e05\u695a\u53cc\u65b9\u7684\u91cd\u70b9&amp;\u53cc\u8d62","text":"<p>\u6700\u8fd1\u5728\u6709\u6b21\u548c leader \u7684\u5bf9\u8bdd\u4e2d\uff0c\u53d1\u73b0\uff1a</p> <ul> <li>\u4ed6\u7684\u91cd\u70b9\u662f\u5982\u4f55\u89e3\u51b3\u548c\u770b\u5f85\u5171\u6027\u7684\u95ee\u9898</li> <li>\u800c\u6211\u7684\u91cd\u70b9\u662f\u5982\u4f55\u89e3\u51b3\u5f53\u524d\u7684\u5177\u4f53\u95ee\u9898</li> </ul> <p>\u8c08\u5230\u540e\u9762\u53d1\u73b0\u8c08\u4e0d\u4e0b\u53bb\u4e86\uff0c\u4e24\u8fb9\u8c08\u8bba\u7684\u70b9\u90fd\u6ca1\u6709 get \u5230\uff0c\u4e0b\u6765\u624d\u610f\u8bc6\u5230\uff1a</p> <ul> <li>\u5b9e\u9645\u4e0a\u4e24\u8fb9\u90fd\u6ca1\u6709\u95ee\u9898\uff0c\u53ea\u662f\u6c9f\u901a\u91cd\u70b9\u4ea7\u751f\u4e86\u51b2\u7a81</li> <li>\u540c\u65f6\u53cc\u65b9\u90fd\u89c9\u5f97\u5bf9\u65b9\u5e26\u7740\u4e00\u5b9a\u7684\u5bf9\u6297\u6027\u6765\u8fdb\u884c\u6c9f\u901a</li> <li>\u5c1d\u8bd5\u5148\u7406\u89e3\u5bf9\u65b9\u7684\u89c2\u70b9\uff0c\u660e\u786e\u6e05\u695a\u6c9f\u901a\u7684\u95ee\u9898</li> </ul> <p>\u60f3\u8d77\u4e4b\u524d\u770b\u7684\u4e00\u4e9b\u6c9f\u901a\u4e66\u7c4d\uff08\u63a8\u8350\u300a\u6c9f\u901a\u7684\u65b9\u6cd5\u300b\uff09\u548c\u6587\u7ae0\uff0c\u5176\u5b9e\u4e5f\u8c08\u5230\u8fc7\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u5373\u5728\u6c9f\u901a\u8981\u660e\u786e\u76ee\u6807\u548c\u91cd\u70b9\uff0c\u540c\u65f6\u4e5f\u8981\u51cf\u5c11\u5e26\u6709\u8ba9\u4eba\u4ea7\u751f\u5bf9\u6297\u7684\u8a00\u8bed\u6765\u8fdb\u884c\u6c9f\u901a\u3002\u7ec8\u7a76\u8fd8\u662f\u8981\u5e94\u7528\u5230\u5b9e\u9645\u573a\u666f\u4e2d\u624d\u80fd\u7406\u89e3\u5f53\u65f6\u770b\u5230\u7684\u5185\u5bb9\u3002</p> <p>\u6c9f\u901a\u8981\u8ffd\u6c42\u5230\u53cc\u8d62\uff08\u8fbe\u5230\u5404\u81ea\u76ee\u6807\uff09\uff0c\u82e5\u8c08\u8bba\u5df2\u7ecf\u8d70\u504f\u4e86\uff0c\u9700\u8981\u53ca\u65f6\u8131\u79bb\uff0c\u907f\u514d\u6d6a\u8d39\u65f6\u95f4\u3002</p>"},{"location":"blog/2024/03/03/2024-02-review/#2-\u751f\u6d3b\u4e0a","title":"2. \u751f\u6d3b\u4e0a","text":"<p>\u8fd9\u4e2a\u6708\u6b63\u9022\u6625\u8282\u5047\u671f\uff0c\u4e5f\u5ea6\u8fc7\u4e86\u76f8\u5bf9\u8f7b\u677e\u7684\u4e00\u6bb5\u65f6\u95f4\uff0c\u7b80\u5355\u8bf4\u8bf4\u505a\u7684\u4e8b\u60c5\u3002</p>"},{"location":"blog/2024/03/03/2024-02-review/#21-\u770b\u4e86\u51e0\u672c\u4e66\u548c\u7535\u5f71","title":"2.1. \u770b\u4e86\u51e0\u672c\u4e66\u548c\u7535\u5f71","text":"<ul> <li>\u300a\u5fae\u5c18\u300b</li> </ul> <p>\u4e16\u754c\u5fae\u5c18\u91cc\uff0c\u6211\u4eec\u90fd\u662f\u6e3a\u5c0f\u7684\u5c18\u57c3\u3002</p> <p>\u6bcf\u4e2a\u4eba\u7684\u6d3b\u6cd5\u5343\u59ff\u767e\u6001\uff0c\u5bf9\u547d\u8fd0\u7684\u6001\u5ea6\u4e5f\u4e0d\u76f8\u540c\uff0c\u4ece\u672a\u6709\u6807\u51c6\u7b54\u6848\uff0c\u6211\u4eec\u4e5f\u6ca1\u8d44\u683c\u53bb\u8bc4\u5224\u3002</p> <p>\u89c1\u8bc6\u7684\u4e0d\u5e78\u548c\u82e6\u96be\u591a\u4e86\uff0c\u624d\u5bf9\u5f53\u4e0b\u7684\u751f\u6d3b\u6709\u4e86\u66f4\u6df1\u523b\u7684\u4f53\u9a8c\uff0c\u65e5\u5b50\u603b\u662f\u8981\u8fc7\u7684\uff0c\u5c18\u57c3\u4e5f\u662f\u3002</p> <ul> <li>\u300a\u601d\u8003\u5982\u4f55\u8d85\u8d8a\u601d\u8003\u300b</li> </ul> <p>\u5e94\u91cd\u89c6\u73af\u5883\u548c\u60c5\u666f\u5bf9\u601d\u8003\u5e26\u6765\u7684\u4f5c\u7528\u548c\u610f\u4e49\uff0c\u4ee5\u6b64\u6765\u5ef6\u5c55\u601d\u7ef4\u7684\u89c6\u89d2\uff0c\u80fd\u53d1\u73b0\u4e0d\u540c\u7684\u4e16\u754c\u3002</p> <ul> <li>\u300a\u7a77\u67e5\u7406\u5b9d\u5178\u300b</li> </ul> <p>a. \u591a\u5143\u601d\u7ef4\u6a21\u578b\uff0c\u5efa\u7acb\u8de8\u5b66\u79d1\u77e5\u8bc6\u4f53\u7cfb</p> <p>b. \u4eba\u7c7b\u8bef\u5224\u5fc3\u7406\u5b66</p> <p>c. \u5efa\u7acb\u68c0\u67e5\u6e05\u5355</p> <p>\u8fd9\u51e0\u4e4e\u662f\u6211\u8bfb\u8fc7\u6700\u4e45\u7684\u4e00\u672c\u4e66\uff0c\u540c\u65f6\u4e5f\u610f\u8bc6\u5230\u4ed6\u7684\u4f1f\u5927\u3002</p> <ul> <li>\u300a\u6e05\u9192\u5730\u6d3b\u300b </li> </ul> <p>\u8ba9\u4e8b\u7269\u4ece\u4f60\u8eab\u4e0a\u6d41\u8fc7\uff0c\u4e0d\u7559\u4e0b\u4efb\u4f55\u8d1f\u62c5\u3002 </p> <p>\u8ba9\u610f\u8bc6\u5c45\u4e2d\uff0c\u63a5\u7eb3\u771f\u6b63\u7684\u81ea\u7531\u548c\u81ea\u5df1\u3002</p> <p>\u5e0c\u671b\u5f80\u540e\u90fd\u80fd\u66f4\u6e05\u9192\u5730\u6d3b\u4e0b\u53bb\u3002</p> <ul> <li>\u300a\u5b9d\u8d35\u7684\u4eba\u751f\u5efa\u8bae\u300b</li> </ul> <p>\u8981\u7ed3\u5408\u5b9e\u9645\u7ecf\u5386\uff0c\u624d\u80fd\u7406\u89e3\u5230\u4ed6\u8bf4\u7684\u9053\u7406\u3002</p> <ul> <li>\u300a\u751f\u547d\u7684\u793c\u7269\u300b</li> </ul> <p>\u63a5\u53d7\u5185\u5fc3\u7684\u81ea\u5df1\u3002 </p> <p>\u63a5\u53d7\u6b7b\u4ea1\u3002 </p> <p>\u63a5\u53d7\u5b58\u5728\u3002</p> <p>\u63a5\u53d7\u4e00\u5207\u751f\u547d\u7684\u9988\u8d60\u3002</p> <ul> <li>\u300a\u5e26\u5e26\u58f3\u7684\u7261\u86ce\u662f\u5927\u4eba\u7684\u5fc3\u810f\u300b</li> </ul> <p>\u6bcf\u4e2a\u5927\u4eba\u90fd\u6709\u8106\u5f31\u7684\u4e00\u9762\u3002</p> <ul> <li>\u300a\u98de\u9a70\u4eba\u751f2\u300b</li> </ul> <p>\u4eba\u751f\u6240\u9047\u5230\u7684\u673a\u4f1a\u8f6c\u77ac\u5373\u901d\uff0c\u5e38\u8bf4\u7684\u201c\u4e0b\u4e00\u6b21\u201d\u5b9e\u9645\u4e0a\u5f88\u96be\u9047\u5230\u4e86\uff0c\u6240\u4ee5\u8981\u52c7\u6562\u6293\u4f4f\uff0c\u4eba\u751f\u53ea\u6d3b\u4e00\u6b21\uff0c\u5c3d\u91cf\u4e0d\u8981\u7ed9\u81ea\u5df1\u7559\u4e0b\u9057\u61be\uff0c\u6218\u80dc\u6050\u60e7\u7684\u65b9\u6cd5\u5c31\u662f\u4e0d\u65ad\u9762\u5bf9\u6050\u60e7\u3002</p> <p>\u65f6\u523b\u5e0c\u671b\u5f80\u540e\u7684\u751f\u6d3b\u80fd\u66f4\u6e05\u9192\uff0c\u95ee\u5fc3\u65e0\u6127\uff0c\u66f4\u5728\u4e4e\u81ea\u5df1\u7684\u611f\u53d7\u548c\u4f53\u9a8c\uff0c\u4e0d\u8ffd\u6c42\u662f\u5426\u80fd\u8d62\u4e0b\u8fd9\u4e00\u6b21\u7684\u7ed3\u679c\uff0c\u559c\u6b22\u81ea\u5df1\u548c\u8ba9\u81ea\u5df1\u5f00\u5fc3\u591a\u4e00\u4e9b\u3002</p> <ul> <li>\u300a\u70ed\u8fa3\u6eda\u70eb\u300b</li> </ul> <p>\u7535\u5f71\u91cd\u70b9\u662f\u5e26\u6765\u7684\u201c\u699c\u6837\u201d\u4f5c\u7528\uff0c\u5f97\u5230\u7684\u5171\u9e23\u3001\u79ef\u6781\u5411\u4e0a\u7684\u611f\u67d3\u3001\u60c5\u7eea\u7684\u4ef7\u503c\u7b49\uff0c\u8fd9\u4e9b\u5c31\u662f\u6211\u89c2\u770b\u540e\u5f97\u5230\u7684\u6536\u83b7\uff0c\u5bf9\u6211\u6765\u8bf4\u662f\u4e00\u4e2a\u6b63\u5e38\u7684\u7535\u5f71\uff0c\u4f18\u79c0\u8c08\u4e0d\u4e0a\u3002\u5f53\u7136\u82e5\u662f\u8ba1\u8f83\u662f\u5426\u80fd\u503c\u56de\u7968\u4ef7\uff0c\u5c31\u770b\u8fd9\u4e9b\u4e1c\u897f\u5728\u4f60\u7684\u8ba4\u77e5\u91cc\u7684\u4ef7\u503c\u662f\u5982\u4f55\u5224\u65ad\u548c\u8ba1\u7b97\u7684\uff0c\u56e0\u4eba\u800c\u5f02\u3002</p>"},{"location":"blog/2024/03/03/2024-02-review/#22-\u5176\u4ed6\u65b9\u9762","title":"2.2 \u5176\u4ed6\u65b9\u9762","text":"<p>\u5177\u4f53\u7684\u8bf4\u8d77\u6765\u53ef\u80fd\u5c31\u592a\u591a\u4e86\uff0c\u8fd9\u91cc\u7b80\u5355\u5199\u5199\u4e86\uff1a</p> <ul> <li>\u7ee7\u7eed\u5b66\u4e60\u6280\u672f\u529f\uff1a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u7b97\u6cd5\u8bad\u7ec3</li> <li>\u63a5\u89e6\u5230\u4e00\u4e9b\u65b0\u89c6\u89d2\uff1aios \u548c\u524d\u7aef\u9886\u57df\uff0c\u72ec\u7acb\u5f00\u53d1\uff0c\u526f\u4e1a\u76f8\u5173</li> <li>\u63a5\u89e6\u5230\u4e00\u4e9b\u65b0\u9879\u76ee\uff1aRust \u548c Golang \u76f8\u5173\u7684</li> <li>\u5176\u4ed6\u6280\u80fd\uff1a\u5f00\u59cb\u7ec3\u8f66\uff08\u79d1\u76ee\u4e09\u8bad\u7ec3\uff09</li> </ul> <p>\u60f3\u4e0d\u5230\u8fd9\u5199\u4e2a\u82b1\u4e86\u86ee\u4e45\u7684\u65f6\u95f4\uff0c\u5e0c\u671b3\u6708\u7ee7\u7eed\u52aa\u529b\u751f\u6d3b\u5427\u3002</p>"},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/","title":"Mac\u642d\u5efaDocker+Ubuntu\u73af\u5883\u652f\u6301GDB","text":"","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#1-\u80cc\u666f","title":"1. \u80cc\u666f","text":"<p>\u6700\u8fd1\u5728\u51c6\u5907\u901a\u8fc7 gdb \u6765\u8c03\u8bd5 c \u8bed\u8a00\u7a0b\u5e8f\u65f6\uff0c\u53d1\u73b0\u76ee\u524d gdb \u662f\u6ca1\u6709\u652f\u6301 mac m1 \u7684\uff0c\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u5982\u679c\u60f3\u8981\u5728 mac \u672c\u673a\u6765\u4f7f\u7528 gdb \u7684\u8bdd\uff0c\u90a3\u53ea\u6709\u91c7\u53d6\u7c7b\u4f3c\u865a\u62df\u673a\u6216\u5bb9\u5668\u7b49\u7684\u601d\u8def\uff0c\u53bb\u8fd0\u884c\u5176\u4ed6\u7cfb\u7edf\u7c7b\u578b\u53bb\u5b89\u88c5\u89e3\u51b3\u3002 </p> <p>\u4e4b\u524d\u4e5f\u5c1d\u8bd5\u8fc7\u672c\u673a\u5b89\u88c5 docker desktop \u53bb\u901a\u8fc7 docker \u89e3\u51b3\uff0c\u4f46\u53d1\u73b0\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u8001\u662f\u51fa\u73b0\u5f02\u5e38\u548c\u8d85\u65f6\uff0c\u57fa\u672c\u4e0d\u53ef\u7528\u3002</p> <p>\u6700\u540e\u627e\u5230\u4e86 lima \u6765\u89e3\u51b3\u8be5\u95ee\u9898\uff0c\u4f7f\u7528\u6210\u672c\u6781\u4f4e\u548c\u517c\u5bb9\u6027\u597d\uff0c\u80fd\u8ba9 mac \u5f88\u65b9\u4fbf\u5730\u672c\u5730\u8fd0\u884c\u5176\u4ed6\u7cfb\u7edf\u3002</p> <p>\u8fd9\u91cc\u8bb0\u5f55\u4e86\u76f8\u5173\u4f7f\u7528\u548c\u901a\u8fc7 lima \u642d\u5efa docker+ubuntu \u73af\u5883\u7684\u8fc7\u7a0b\uff0c\u5e0c\u671b\u80fd\u5e2e\u52a9\u6709\u7c7b\u4f3c\u56f0\u60d1\u7684\u540c\u5b66\u3002</p>","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#2-lima","title":"2. Lima","text":"","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#21-\u4ecb\u7ecd","title":"2.1 \u4ecb\u7ecd","text":"<p>https://github.com/lima-vm/lima</p> <p>Lima launches Linux virtual machines with automatic file sharing and port forwarding (similar to WSL2).  The original goal of Lima was to promote containerd including nerdctl (contaiNERD ctl) to Mac users, but Lima can be used for non-container applications as well.</p> <p>\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u91cc\u9762\u8fd0\u884c\u7740 containerd \u7684\u865a\u62df\u673a\uff0c\u4f7f\u7528\u7c7b\u4f3c\u4e8e windows \u4e0a\u7684 WSL2\u3002</p> <p>\u5176\u4e2d containerd \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4e0e docker \u5f15\u64ce\u6240\u505a\u7684\u4e8b\u60c5\u4e00\u6837\uff0c\u540c\u65f6\u4e5f\u662f CNCF \u6bd5\u4e1a\u9879\u76ee\u3002</p> <p>https://github.com/containerd/containerd</p> <p>containerd is an industry-standard container runtime with an emphasis on simplicity, robustness, and portability. It is available as a daemon for Linux and Windows, which can manage the complete container lifecycle of its host system: image transfer and storage, container execution and supervision, low-level storage and network attachments, etc.</p>","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#22-\u5b89\u88c5","title":"2.2 \u5b89\u88c5","text":"<p>\u5728 mac \u4e0a\u5b89\u88c5\u5341\u5206\u7b80\u5355:</p> Bash<pre><code>$ brew install lima\n\n$ lima -v\nlimactl version 0.20.1\n</code></pre> <p>\u5b89\u88c5\u597d lima \u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7 lima \u6765\u505a\u5f88\u591a\u4e8b\u60c5\u4e86\u3002</p> <p>\u76ee\u524d lima \u5b98\u65b9\u63d0\u4f9b\u4e86\u591a\u4e2a\u6a21\u7248\uff0c\u5982 archlinux\u3001docker\u3001podman\u3001Kubernetes\u3001ubuntu \u7b49\uff0c\u57fa\u672c\u6ee1\u8db3\u6240\u6709\u642d\u5efa\u73af\u5883\u7684\u9700\u6c42\uff0c\u53ef\u901a\u8fc7\u4e0b\u9762\u6307\u4ee4\u67e5\u770b\uff1a</p> Bash<pre><code>$ limactl start --list-templates\n\nalmalinux-8\nalmalinux-9\nalmalinux\nalpine\napptainer-rootful\napptainer\narchlinux\n.....\n</code></pre> <p>\u4e0b\u9762\u4f1a\u91cd\u70b9\u63cf\u8ff0\u4e0b\u901a\u8fc7 lima \u642d\u5efa docker+ubuntu \u7684\u73af\u5883\u3002</p>","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#3-\u642d\u5efa-dockerubuntu-\u73af\u5883","title":"3. \u642d\u5efa docker+ubuntu \u73af\u5883","text":"","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#31-\u5b89\u88c5-docker","title":"3.1 \u5b89\u88c5 docker","text":"<p>\u8fd9\u91cc\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u6765\u4fdd\u5b58\u4e0b LimaVM \u7684\u914d\u7f6e\u6587\u4ef6\uff1a</p> Bash<pre><code>$ mkdir lima_vm &amp;&amp; cd lima_vm\n</code></pre> <p>\u6211\u4eec\u8fd9\u91cc\u4e0b\u8f7d\u4f7f\u7528\u5b98\u65b9\u63d0\u4f9b\u7684\u914d\u7f6e\u6a21\u7248\u5e93\u4e0b\u7684 docker.yaml\uff0c\u5148\u67e5\u770b\u5176\u5185\u5bb9\uff1a</p> Bash<pre><code>$ curl -o docker.yaml https://raw.githubusercontent.com/lima-vm/lima/master/examples/docker.yaml\n$ cat docker.yaml\n</code></pre> <p>\u914d\u7f6e\u6587\u4ef6\u4e2d\u6bcf\u4e2a\u914d\u7f6e\u9879\u7684\u90fd\u6709\u8be6\u7ec6\u7684\u89e3\u91ca\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u67e5\u9605\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u4f7f\u7528\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\u5c31\u53ef\u4ee5\u76f4\u63a5\u542f\u52a8 lima VM\uff1a</p> <p>\u82e5\u60f3\u8981\u5bf9\u865a\u62df\u673a\u5206\u914d\u7684 CPU\u3001\u5185\u5b58\u3001\u6302\u8f7d\u76ee\u5f55\u8fdb\u884c\u8c03\u6574\uff0c\u914d\u7f6e\u6587\u4ef6\u4e2d\u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u53c2\u6570\u3002</p> Bash<pre><code>$ limactl start ./docker.yaml\n</code></pre> <p></p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a</p> <ul> <li>\u6b64\u547d\u4ee4\u901a\u5e38\u662f\u521d\u59cb\u5316\u7684\u65f6\u5019\u6267\u884c\uff0c\u540e\u7eed\u521b\u5efa\u6210\u529f\u540e\u4e0d\u7528\u91cd\u590d\u6267\u884c</li> <li>\u4e0a\u9762\u6587\u4ef6\u53ea\u662f\u521d\u59cb\u542f\u52a8\u7684\u914d\u7f6e\uff0c\u542f\u52a8\u540e\u4f1a\u81ea\u52a8\u751f\u6210\u4e0b\u9762\u8def\u5f84\u7684\u914d\u7f6e\u6587\u4ef6<ul> <li>\u540e\u7eed\u82e5\u9700\u8981\u4fee\u6539\u914d\u7f6e\uff0c\u5219\u9700\u8981\u7f16\u8f91\u4e0b\u9762\u751f\u6210\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u91cd\u542f\u751f\u6548\u3002</li> </ul> </li> </ul> Bash<pre><code>~/.lima/docker/lima.yaml\n</code></pre>","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#32-\u5177\u4f53\u4f7f\u7528","title":"3.2 \u5177\u4f53\u4f7f\u7528","text":"Bash<pre><code># \u67e5\u770b\u76ee\u524d\u8fd0\u884c\u5217\u8868\uff0c\u5e76\u5305\u542b\u5176\u5206\u914d\u7684\u540d\u79f0\u3001SSH\u3001Status\u3001CPU\u3001Memory \u7b49\n$ limactl list\n# \u8fdb\u5165 shell\n$ limactl shell docker\n# \u76f4\u63a5\u6267\u884c shell \u547d\u4ee4 docker ps\n$ limactl shell docker docker ps\n# \u5173\u95ed VM\n$ limactl stop docker\n# \u522a\u9664 VM\n$ limactl delete docker\n</code></pre> <p>\u4e0a\u9762\u53ef\u770b\u5230\u6211\u4eec\u5728\u6267\u884c docker \u547d\u4ee4\u7684\u65f6\u5019\uff0c\u8981\u4e48\u662f\u8981\u8fdb\u5165\u5230\u7ec8\u7aef\u5177\u518d\u64cd\u4f5c\uff0c\u8981\u4e48\u662f\u8981\u52a0\u4e0a\u5bf9\u5e94\u7684<code>limactl shell docker</code>\u7684\u524d\u7f00\u3002</p> <p>\u5982\u679c\u60f3\u505a\u5230\u50cf\u5728\u672c\u5730\u4e00\u6837\u76f4\u63a5\u6267\u884c docker cli \u7684\u8bdd\uff0c\u9700\u8981\uff1a</p> Bash<pre><code># 1. \u672c\u5730\u5b89\u88c5 docker cli\n$ brew install docker\n# 2. \u8bbe\u7f6e docker \u73af\u5883\u53d8\u91cf\n# Name \u5373 lima \u542f\u52a8\u65f6\u547d\u540d\u7684\u540d\u79f0\uff0c\u5982\u524d\u9762\u7684 docker\uff0c\u5373 lima-docker\uff09\n# Dir \u5373 lima \u542f\u52a8\u540e\u81ea\u52a8\u751f\u6210\u7684\u8def\u5f84\uff0c\u5982\u524d\u9762\u7684 ~/.lima/docker/sock/docker.sock\n$ docker context create lima-{{.Name}} --docker \"host=unix://{{.Dir}}/sock/docker.sock\"\n$ docker context use lima-{{.Name}}\n# 3. \u50cf docker cli \u4e00\u6837\u76f4\u63a5\u5728\u672c\u5730\u7ec8\u7aef\u6267\u884c docker \u547d\u4ee4\n$ docker run hello-world\n</code></pre> <p></p>","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#33-\u65b0\u589e-ubuntu-\u5bb9\u5668","title":"3.3 \u65b0\u589e ubuntu \u5bb9\u5668","text":"<p>\u76ee\u524d docker \u955c\u50cf\u4e2d\u5df2\u7ecf\u6709\u73b0\u6210\u7684\u955c\u50cf\u53ef\u4ee5\u4f7f\u7528\uff0c\u4e0b\u9762\u5b89\u88c5\u7684\u662f ubuntu 20.04 \u7248\u672c\uff1a</p> Bash<pre><code>$ docker pull ubuntu:20.04\n$ docker images \n</code></pre> <p></p> <p>\u5b89\u88c5\u597d\u955c\u50cf\u540e\uff0c\u6211\u4eec\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a ubuntu \u7684\u5bb9\u5668\uff1a</p> Bash<pre><code># \u521d\u59cb\u5316\u5bb9\u5668\n$ docker run --name ubuntu-container -it ubuntu:20.04 bash\n</code></pre> <p>\u6b64\u65f6\u4f60\u5c31\u5df2\u7ecf\u80fd\u4f7f\u7528 ubuntu \u7684\u64cd\u4f5c\u7cfb\u7edf\u6765\u5b8c\u6210\u9700\u6c42\u52d2\u3002\u8fd9\u91cc\u4e5f\u8d34\u4e00\u4e0b\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u5e38\u7528\u64cd\u4f5c\uff1a</p> <p>Bash<pre><code># \u67e5\u770b\u5f53\u524d\u6240\u6709\u7684\u5bb9\u5668\u53ca\u5176\u72b6\u6001\uff0c\u6bd4\u5982\u524d\u9762\u8fd0\u884c\u7684 ubuntu-container\n$ docker ps -a \n# \u82e5\u5bb9\u5668\u4e0d\u662f\u8fd0\u884c\u72b6\u6001\uff0c\u5219\u9700\u8981\u542f\u52a8\u5b83\n$ docker start ubuntu-container\n# \u8fdb\u884c\u8be5\u5bb9\u5668\u7684\u7ec8\u7aef\n$ docker exec -it ubuntu-container bash\n</code></pre> </p>","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#34-\u5b89\u88c5-gdb","title":"3.4 \u5b89\u88c5 gdb","text":"<p>\u8fdb\u5165 ubuntu \u5bb9\u5668\u540e\uff0c\u5c31\u53ef\u4ee5\u5b89\u88c5 gdb \u6765\u8c03\u8bd5 c \u8bed\u8a00\u7a0b\u5e8f\u4e86\uff1a</p> Bash<pre><code># \u8fdb\u5165\u5bb9\u5668\u540e\u66f4\u65b0\u8f6f\u4ef6\u5305\n$ apt update\n# \u5b89\u88c5 gdb\n$ apt install gdb\n</code></pre>","tags":["os","docker"]},{"location":"blog/2024/02/29/mac%E6%90%AD%E5%BB%BAdockerubuntu%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81gdb/#\u53c2\u8003","title":"\u53c2\u8003","text":"<p>https://zhuanlan.zhihu.com/p/476240258</p> <p>https://blog.crazyfirelee.tw/posts/sharing/lima/</p> <p>https://github.com/lima-vm/lima/blob/master/examples/docker.yaml</p> <p>https://stackoverflow.com/questions/67310123/how-to-install-gdb-on-mac-m1-apple-silicon</p> <p>https://zhuanlan.zhihu.com/p/354794701</p>","tags":["os","docker"]},{"location":"common/","title":"Common","text":""},{"location":"common/01-100_tips/","title":"100 Tips from The Pragmatic Programmers Book","text":"<p>https://dev.to/rajeshroyal/care-about-your-craft-pragmatic-programmer-series-1-3b84</p>"},{"location":"common/01-100_tips/#1-care-about-your-craft","title":"1. Care About Your Craft.","text":"<p>Why spend your life developing software unless you care about doing it well? Why do you write software? Is it just a job, a means to an end, or is it something more? Do you take pride in your work, or do you just churn out code that barely works?</p>"},{"location":"common/01-100_tips/#2-think-about-your-work","title":"2. Think! About Your Work.","text":"<p>Turn off the autopilot and take control. Constantly critique and appraise your work. Do you ever find yourself writing code without thinking? Do you ever copy and paste solutions from the internet without understanding them? Do you ever follow instructions blindly without questioning them?</p>"},{"location":"common/01-100_tips/#3-you-have-agency","title":"3. You Have Agency.","text":"<p>It\u2019s your life. Grab a hold of it and make it what you want.</p>"},{"location":"common/01-100_tips/#4-provide-options-dont-make-lame-excuses","title":"4. Provide Options, Don\u2019t Make Lame Excuses.","text":"<p>Instead of excuses, provide options. Don\u2019t say it can\u2019t be done; explain what can be done.</p>"},{"location":"common/01-100_tips/#5-dont-live-with-broken-windows","title":"5. Don\u2019t Live with Broken Windows.","text":"<p>Fix bad designs, wrong decisions, and poor code when you see them.</p>"},{"location":"common/01-100_tips/#6-be-a-catalyst-for-change","title":"6. Be a Catalyst for Change.","text":"<p>You can\u2019t force change on people. Instead, show them how the future might be and help them participate in creating it.</p>"},{"location":"common/01-100_tips/#7-remember-the-big-picture","title":"7. Remember the Big Picture","text":"<p>Don\u2019t get so engrossed in the details that you forget to check what\u2019s happening around you.</p>"},{"location":"common/01-100_tips/#8-make-quality-a-requirements-issue","title":"8. Make Quality a Requirements Issue.**","text":"<p>Involve your users in determining the project\u2019s real quality requirements.</p>"},{"location":"common/01-100_tips/#9-invest-regularly-in-your-knowledge-portfolio","title":"9. Invest Regularly in Your Knowledge Portfolio.","text":"<p>Learning is essential for programmers. Don\u2019t stop at what you know. Explore new topics, skills, and technologies. Invest in your knowledge portfolio regularly. Make learning a habit.</p>"},{"location":"common/01-100_tips/#10-critically-analyze-what-you-read-and-hear","title":"10. Critically Analyze What You Read and Hear.","text":"<p>Don\u2019t be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project.</p>"},{"location":"common/01-100_tips/#11-english-is-just-another-programming-language","title":"11. English is Just Another Programming Language.","text":"<p>Treat English as Just Another Programming Language. Write documents as you would write code: honor the DRY principle, ETC, automation, and so on.</p>"},{"location":"common/01-100_tips/#12-its-both-what-you-say-and-the-way-you-say-it","title":"12. It\u2019s Both What You Say and the Way You Say It.","text":"<p>There\u2019s no point in having great ideas if you don\u2019t communicate them effectively.</p>"},{"location":"common/01-100_tips/#13-build-documentation-in-dont-bolt-it-on","title":"13. Build Documentation In, Don\u2019t Bolt It On.","text":"<p>Documentation created separately from code is less likely to be correct and up to date.</p>"},{"location":"common/01-100_tips/#14-good-design-is-easier-to-change-than-bad-design","title":"14. Good Design Is Easier to Change Than Bad Design.","text":"<p>A thing is well designed if it adapts to the people who use it. For code, that means it must adapt by changing.</p>"},{"location":"common/01-100_tips/#15-drydont-repeat-yourself","title":"15. DRY\u2014Don't Repeat Yourself.","text":"<p>Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.</p>"},{"location":"common/01-100_tips/#16-make-it-easy-to-reuse","title":"16. Make It Easy to Reuse.","text":"<p>If it\u2019s easy to reuse, people will. Create an environment that supports reuse.</p>"},{"location":"common/01-100_tips/#17-eliminate-effects-between-unrelated-things","title":"17. Eliminate Effects Between Unrelated Things.","text":"<p>Design components that are self-contained, independent, and have a single, well-defined purpose.</p>"},{"location":"common/01-100_tips/#18-there-are-no-final-decisions","title":"18. There Are No Final Decisions.","text":"<p>No decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change.</p>"},{"location":"common/01-100_tips/#19-forgo-following-fads","title":"19. Forgo Following Fads.","text":"<p>Neal Ford says, \u201cYesterday\u2019s Best Practice Becomes Tomorrow\u2019s Antipattern.\u201d Choose architectures based on fundamentals, not fashion.</p>"},{"location":"common/01-100_tips/#20-use-tracer-bullets-to-find-the-target","title":"20. Use Tracer Bullets to Find the Target.","text":"<p>Tracer bullets let you home in on your target by trying things and seeing how close they land.</p>"},{"location":"common/01-100_tips/#31-prototype-to-learn","title":"31. Prototype to Learn.","text":"<p>Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.</p>"},{"location":"common/01-100_tips/#32-program-close-to-the-problem-domain","title":"32. Program Close to the Problem Domain.","text":"<p>Design and code in the language of the problem domain.</p>"},{"location":"common/01-100_tips/#33-estimate-to-avoid-surprises","title":"33. Estimate to Avoid Surprises.","text":"<p>Estimate before you start. You\u2019ll spot potential problems up front.</p>"},{"location":"common/01-100_tips/#34-iterate-the-schedule-with-the-code","title":"34. Iterate the Schedule with the Code.","text":"<p>Use experience you gain as you implement to refine the project time scales.</p>"},{"location":"common/01-100_tips/#35-keep-knowledge-in-plain-text","title":"35. Keep Knowledge in Plain Text.","text":"<p>Plain text won\u2019t become obsolete. It helps leverage your work and simplifies debugging and testing.</p>"},{"location":"common/01-100_tips/#36-use-the-power-of-command-shells","title":"36. Use the Power of Command Shells.","text":"<p>Use the shell when graphical user interfaces don\u2019t cut it.</p>"},{"location":"common/01-100_tips/#37-achieve-editor-fluency","title":"37. Achieve Editor Fluency.","text":"<p>An editor is your most important tool. Know how to make it do what you need, quickly and accurately.</p>"},{"location":"common/01-100_tips/#38-always-use-version-control","title":"38. Always Use Version Control.","text":"<p>Version control is a time machine for your work; you can go back.</p>"},{"location":"common/01-100_tips/#39-fix-the-problem-not-the-blame","title":"39. Fix the Problem, Not the Blame.","text":"<p>It doesn\u2019t really matter whether the bug is your fault or someone else\u2019s\u2014it is still your problem, and it still needs to be fixed.</p>"},{"location":"common/01-100_tips/#40-dont-panic","title":"40. Don\u2019t Panic.","text":"<p>This is true for galactic hitchhikers and for developers.</p>"},{"location":"common/02-solve_procrastination/","title":"\ud83d\ude2a\u62d6\u5ef6\u5e94\u5bf9\u57fa\u7840\u8bad\u7ec3\u8425","text":"<p>\u5f00\u59cb\u4e8e\u300c2024.02.19\u300d\uff0c\u5171\u6301\u7eedx\u5929</p>"},{"location":"common/02-solve_procrastination/#1-day1","title":"1. Day1","text":"<ul> <li>\u9605\u8bfb\uff1a\u62d6\u5ef6\u6709\u89e3\u5417\uff1f</li> <li>\u884c\u52a8\uff1a\u89c2\u5bdf\u300c\u62d6\u5ef6\u56de\u8def\u300d</li> <li>\u6b63\u5ff5\uff1a\u5728\u8fdb\u98df\u884c\u4e3a\u4e2d\u89c9\u5bdf</li> <li>\u524d\u6d4b\uff1a\u62d6\u5ef6\u5e94\u5bf9\u95ee\u5377</li> </ul>"},{"location":"common/02-solve_procrastination/#11-\u62d6\u5ef6\u6709\u89e3\u5417","title":"1.1 \u62d6\u5ef6\u6709\u89e3\u5417\uff1f","text":"<p>1. \u4e3a\u4ec0\u4e48\u8981\u5e94\u5bf9\u62d6\u5ef6\uff1f</p> <ul> <li>\u601d\u8003\u81ea\u5df1\u4e4b\u524d\u5e94\u5bf9\u62d6\u5ef6\u7684\u4e8b\u60c5</li> </ul> <p>\u6bd4\u5982\u601d\u8003\u81ea\u5df1\u4e4b\u524d\u4e3a\u4e86\u5e94\u5bf9\u62d6\u5ef6\u800c\u5c1d\u8bd5\u7684\u65e0\u6548\u65b9\u6cd5\u7b49\u3002</p> <ul> <li>\u62d6\u5ef6\u662f\u4e00\u79cd\u5f3a\u5927\u7684\u4e60\u60ef\uff0c\u53ef\u80fd\u53cd\u590d\u8d70\u4e0a\u62d6\u5ef6\u7684\u8f68\u9053</li> </ul> <p>\u62d6\u5ef6\u662f\u4e00\u79cd\u884c\u4e3a\u4e60\u60ef,\u5982\u679c\u4e0d\u53bb\u5efa\u7acb\u4e00\u5957\u65b0\u7684\u884c\u4e3a\u65b9\u5f0f,\u5c31\u5f88\u6709\u53ef\u80fd\u53cd\u590d\u8d70\u8fdb\u65e7\u4e60\u60ef\u4e2d\u3002</p> <p>\u4e60\u60ef\u662f\u5982\u4f55\u5f62\u6210\u7684</p> <p>\u4e00\u4e2a\u884c\u4e3a\u4f1a\u91cd\u590d\u51fa\u73b0\uff0c\u662f\u56e0\u4e3a\u5728\u8fc7\u53bb\u7684\u7ecf\u9a8c\u4e2d\uff0c\u8fd9\u4e2a\u884c\u4e3a\u4e2d\u80fd\u5e26\u6765\u67d0\u4e9b\u597d\u5904\uff08\u5f97\u5230\u5956\u8d4f\u6216\u8005\u907f\u514d\u4e0d\u6109\u60a6\u7684\u523a\u6fc0\uff09\u3002</p> <p>\u4e60\u60ef\u517b\u6210\u7684\u56de\u8def\uff1a\u89e6\u53d1\u7ebf\u7d22 trigger -&gt; \u884c\u4e3a behavior -&gt; \u5956\u8d4f\u884c\u4e3a reward</p> <p>\u6162\u6162\u7684,\u6bcf\u4e00\u6b21\u9047\u5230\u76f8\u4f3c\u7684\u60c5\u51b5,\u4f60\u90fd\u4f1a\u9009\u62e9\u505a\u51fa\u76f8\u540c\u7684\u884c\u4e3a\u53ef\u3002</p> <p>\u89e6\u53d1\u884c\u4e3a\u7684\u7ebf\u7d22\uff0c\u4f60\u7684\u884c\u4e3a\u65b9\u5f0f\uff0c\u5927\u8111\u5bf9\u5956\u8d4f\u7684\u9884\u671f\uff0c\u8fd9\u4e09\u4e2a\u6761\u4ef6\u90fd\u4e0d\u6539\u53d8\uff0c\u4e60\u60ef\u5c31\u4f1a\u4e00\u76f4\u7ef4\u6301\u4e0b\u53bb\u3002</p> <ul> <li>\u62d6\u5ef6\u65f6\uff0c\u4f60\u7684\u5927\u8111\u91cc\u6709\u4e00\u5ea7\u5929\u5e73\uff0c\u4f46\u603b\u662f\u504f\u5411\u62d6\u5ef6</li> </ul> <p>\"\u4e24\u4e2a\u9009\u9879\u90fd\u6709\u597d\u5904\"\uff1a</p> <p>\u9009\u9879A\u7684\u597d\u5904:\u4f60\u6709\u53ef\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u63a8\u52a8\u5de5\u4f5c\uff0c\u5e76\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u83b7\u5f97\u6210\u5c31\u611f\u3002</p> <p>\u9009\u9879B\u7684\u597d\u5904:\u81f3\u5c11\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u7684\u611f\u53d7\u662f\u8f7b\u677e\u7684\uff0c\u4e0d\u5fc5\u9762\u4e34\u56f0\u96be\u7684\u4efb\u52a1\u3002</p> <p>\u4e3a\u4ec0\u4e48\u5929\u5e73\u4f1a\u504f\u5411\u300c\u62d6\u5ef6\u300d\u8fd9\u4e00\u7aef\uff1f</p> <p>\u56e0\u4e3a\u4f60\u7684\u5927\u8111\u57fa\u4e8e\u8fc7\u53bb\u7684\u7ecf\u9a8c\u505a\u5224\u65ad\uff0c\u5982\u679c\u4f60\u7ecf\u5e38\u9009\u62e9\u7528\u73a9\u624b\u673a\u6765\u5904\u7406\u56f0\u96be\u60c5\u5883\uff0c\u5e76\u4ece\u4e2d\u83b7\u5f97\u8fc7\u597d\u5904\uff0c\u5927\u8111\u5c31\u4f1a\u6709\u66f4\u591a\u504f\u5411\u8fd9\u4e2a\u9009\u9879\u7684\u781d\u7801\u3002</p> <p>\u5e94\u5bf9\u62d6\u5ef6\u5c31\u662f\u6253\u7834\u8fd9\u4e2a\u5faa\u73af\uff0c\u628a\u5927\u8111\u7684\u6307\u9488\u5f80\u53e6\u4e00\u4e2a\u65b9\u5411\u8c03\u4e00\u8c03\u3002</p> <p>2. \u62d6\u5ef6\u95ee\u9898\u7684\u89e3\u6cd5</p> <p>\u8bc6\u522b\u300c\u62d6\u5ef6\u56de\u8def\u300d\uff0c\u591a\u7ba1\u9f50\u4e0b</p> <p>a. \u51cf\u5c11\u62d6\u5ef6\u884c\u4e3a\u7684\u89e6\u53d1\u7ebf\u7d22\u2014\u2014\u756a\u8304\u5de5\u4f5c\u6cd5 b. \u8c03\u6574\u884c\u4e3a\u7ebf\u7d22\u7684\u5929\u5e73\u2014\u2014\u5373\u65f6\u542f\u52a8 c. \u91cd\u5851\u5927\u8111\u7684\u51b3\u7b56\u8def\u5f84\u2014\u2014\u4eb2\u8eab\u89c2\u5bdf\u548c\u4e8b\u5b9e\u68c0\u9a8c</p> <p>\u57f9\u517b\u884c\u52a8\u4e2d\u7684\u89c9\u5bdf\u529b\u2014\u2014\u6b63\u5ff5</p> <p>a. \u57f9\u517b\u6ce8\u610f\u8c03\u63a7\u80fd\u529b b. \u63d0\u5347\u884c\u52a8\u4e2d\u7684\u89c9\u5bdf c. \u57f9\u517b\u63a5\u7eb3\u3001\u975e\u8bc4\u5224\u6001\u5ea6</p>"},{"location":"common/02-solve_procrastination/#12-\u8bc6\u522b\u62d6\u5ef6\u7684\u884c\u4e3a\u56de\u8def","title":"1.2 \u8bc6\u522b\u62d6\u5ef6\u7684\u300c\u884c\u4e3a\u56de\u8def\u300d","text":"<p>\u89e6\u53d1\u7ebf\u7d22\u2192\u63a8\u8fdf\u884c\u4e3a\u2192\u9884\u671f\u5956\u8d4f</p> <ul> <li>\u89e6\u53d1\u7ebf\u7d22\uff1a\u60f3\u5230\u8981\u8bfb\u7684\u82f1\u6587\u8d44\u6599\uff0c\u89c9\u5f97\u671b\u800c\u751f\u754f </li> <li>\u63a8\u8fdf\u884c\u4e3a\uff1a\u628a\u8d44\u6599\u653e\u5728\u4e00\u8fb9\uff0c\u5148\u73a9\u4e00\u628a\u6e38\u620f </li> <li>\u9884\u671f\u5956\u8d4f\uff1a\u6682\u65f6\u7f13\u89e3\u4e86\u7126\u8651</li> </ul> <p>1. \u6b65\u9aa4\u4e00\uff1a\u5148\u5b9a\u4f4d\u4e00\u4e2a\u300c\u63a8\u8fdf\u884c\u4e3a\u300d</p> <p>\u5c31\u662f\u5f53\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u62d6\u5ef6\u7684\u65f6\u5019\uff0c\u4f60\u5b9e\u9645\u5728\u505a\u4e9b\u4ec0\u4e48\u3002</p> <p>2. \u6b65\u9aa4\u4e8c\uff1a\u5c1d\u8bd5\u627e\u5230\u5bf9\u5e94\u7684\u89e6\u53d1\u7ebf\u7d22\u548c\u9884\u671f\u5956\u8d4f</p> <p>\u89e6\u53d1\u7ebf\u7d22\uff1a\u548c\u67d0\u4e2a\u4e8b\u4ef6\u6709\u5173\u7684\u60f3\u6cd5\u3001\u60c5\u7eea\u3001\u8eab\u4f53\u611f\u89c9\u3001\u51b2\u52a8\u529b/\u884c\u4e3a\u503e\u5411\u7b49\uff0c\u90fd\u53ef\u80fd\u662f\u89e6\u53d1\u7ebf\u7d22\u3002</p> <p>\u9884\u671f\u5956\u8d4f\uff1a\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u5224\u65ad\u6807\u51c6\uff0c\u5c31\u662f\u770b\u884c\u4e3a\u662f\u4e0d\u662f\u80fd\u591f\u56de\u907f\u4e0d\u6109\u60a6\u7684\u611f\u53d7\uff0c\u6216\u8005\u83b7\u53d6\u6109\u60a6\u7684\u611f\u53d7\u3002\u6709\u65f6\u5019\u4e5f\u8bb8\u4e24\u8005\u90fd\u6709\u3002 \u5982\u679c\u4f60\u77e5\u9053\u600e\u4e48\u505a\u4e86,\u4f7f\u7528\u300c\u300d\u7684\u601d\u8def,</p>"},{"location":"common/02-solve_procrastination/#2-day2","title":"2. Day2","text":"<ul> <li>\u9605\u8bfb\uff1a\u53d1\u52a8\u8eab\u4f53\u7684\u529b\u91cf </li> <li>\u884c\u52a8\uff1a\u5173\u6ce8\u8eab\u4f53\uff0c\u5373\u65f6\u542f\u52a8 </li> <li>\u6b63\u5ff5\uff1a\u8ba9\u6ce8\u610f\u529b\u6765\u5230\u8eab\u4f53</li> </ul>"},{"location":"common/02-solve_procrastination/#21-\u53d1\u52a8\u8eab\u4f53\u7684\u529b\u91cf","title":"2.1 \u53d1\u52a8\u8eab\u4f53\u7684\u529b\u91cf","text":"<p>1. \u4e3a\u4ec0\u4e48\u4f1a\u7ecf\u5e38\u52a8\u4e0d\u8d77\u6765\uff1f</p> <ul> <li>\u6ce8\u610f\u529b\u5e76\u6ca1\u6709\u653e\u5728\u884c\u52a8\u4e0a\uff0c\u800c\u662f\u9677\u5165\u4e86\u5934\u8111\u60f3\u60f3\u6cd5\uff0c\u7279\u522b\u662f\u5404\u79cd\u7406\u7531\u7684\u4e89\u8bba\u5927\u4f1a </li> <li>\u7528\u6765\u652f\u914d\u884c\u52a8\u7684\u6ce8\u610f\u529b\u88ab\u60f3\u6cd5\u5360\u636e\u7740\uff0c\u884c\u52a8\u5c31\u4f1a\u53d8\u5f97\u6bd4\u8f83\u56f0\u96be</li> </ul> <p>2. \u5b66\u4f1a\u53d1\u52a8\u8eab\u4f53\u7684\u529b\u91cf</p> <p>\u5373\u65f6\u542f\u52a8\u2014\u2014\u7528\u8eab\u4f53\u6ce8\u610f\u529b\u64ac\u52a8\u884c\u4e3a</p> <p>\u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff1a\u5f53\u4f60\u51b3\u5b9a\u597d\u53bb\u505a\u4e00\u4ef6\u4e8b\u60c5</p> <ul> <li>\u9996\u5148\u628a\u6ce8\u610f\u529b\u653e\u5728\u8fd9\u4e00\u523b\u7684\u8eab\u4f53\u611f\u89c9\u4e0a</li> <li>\u7136\u540e\u7acb\u5373\u542f\u52a8\u521a\u624d\u6240\u51b3\u5b9a\u7684\u884c\u4e3a</li> <li>\u4e00\u65e6\u7559\u610f\u5230\u6ce8\u610f\u529b\u9677\u5165\u4e86\u5934\u8111\u601d\u8003\uff0c\u4e0d\u9700\u8981\u542c\u4ece\u5934\u8111\u60f3\u6cd5\uff0c\u91cd\u65b0\u628a\u6ce8\u610f\u529b\u653e\u5230\u6b64\u523b\u7684\u8eab\u4f53\u611f\u89c9\u4e0a\uff0c\u7136\u540e\u91cd\u590d\u4e0a\u9762\u884c\u4e3a</li> </ul> <ul> <li>\u628a\u6ce8\u610f\u529b\u4ece\u5934\u8111\u5e26\u56de\u8eab\u4f53\uff0c\u63d0\u9192\u81ea\u5df1\u505a\u51fa\u7684\u51b3\u5b9a\uff0c\u7acb\u523b\u542f\u52a8\u51b3\u5b9a\u4e86\u7684\u884c\u4e3a</li> </ul> <p>3. \u5373\u65f6\u542f\u52a8\u80cc\u540e\u7684\u539f\u7406</p> <p>\u539f\u7406\u4e00\uff1a\u7ed5\u5f00\u5934\u8111\uff0c\u76f4\u6307\u610f\u56fe</p> <p>\u53ea\u8981\u628a\u6ce8\u610f\u529b\u4e3b\u52a8\u5730\u5e26\u56de\u5f53\u4e0b\uff0c\u6211\u4eec\u6bcf\u4e2a\u4eba\u90fd\u6709\u80fd\u529b\u7ed5\u5f00\u5934\u8111\u601d\u8003\uff0c\u76f4\u63a5\u542f\u52a8\u884c\u4e3a\uff0c\u6307\u5411\u610f\u56fe\uff08\u4e5f\u5c31\u662f\u4f60\u7684\u51b3\u5b9a\uff09\u3002</p> <p>\u65e0\u610f\u8bc6\u884c\u4e3a\u5e38\u5e38\u53d7\u63a7\u4e8e\u56de\u8def\uff0c\u4f46\u5bf9\u4e8e\u6709\u610f\u8bc6\u884c\u4e3a\uff0c\u6211\u4eec\u7684\u5373\u65f6\u8c03\u8282\u80fd\u529b\u8981\u5145\u5206\u5f97\u591a\u3002</p> <p>\u539f\u7406\u4e8c\uff1a\u8eab\u4f53\u662f\u884c\u52a8\u7684\u76df\u53cb</p> <p>\u8eab\u4f53\u7ecf\u5e38\u88ab\u5934\u8111\u62a2\u8d70\u6ce8\u610f\u529b\uff0c\u6210\u4e3a\u4e00\u4e2a\u4f4e\u8c03\u7684\u89d2\u8272\uff0c\u4f46\u8eab\u4f53\u662f\u884c\u52a8\u7684\u91cd\u8981\u76df\u53cb\u3002</p> <p>\u884c\u52a8\u4e0e\u5355\u7eaf\u601d\u8003\u7684\u533a\u522b\uff0c\u5e38\u5e38\u5728\u4e8e\u8eab\u4f53\u7684\u53c2\u4e0e\u3002\u800c\u4e14\uff0c\u8ba9\u6ce8\u610f\u529b\u6765\u5230\u8eab\u4f53\u4e0a\uff0c\u4e5f\u662f\u8df3\u51fa\u5934\u8111\u3001\u8df3\u51fa\u65e0\u76ca\u601d\u8003\u7684\u4e00\u6761\u6377\u5f84\u3002</p>"},{"location":"common/02-solve_procrastination/#22-\u5173\u6ce8\u8eab\u4f53\u5373\u65f6\u542f\u52a8","title":"2.2 \u5173\u6ce8\u8eab\u4f53\uff0c\u5373\u65f6\u542f\u52a8","text":"<p>\u300c\u5373\u65f6\u542f\u52a8\u300d\u662f\u4e00\u7c7b\u5feb\u901f\u8d77\u6548\u7684\u6280\u5de7\uff0c\u53ef\u4ee5\u5e2e\u4f60\u5927\u5e45\u5ea6\u51cf\u5c11\u884c\u52a8\u963b\u529b\uff0c\u5728\u4f60\u505a\u51fa\u51b3\u5b9a\u540e\u7684\u5f88\u77ed\u65f6\u95f4\u5185\uff0c\u5c31\u80fd\u591f\u6295\u5165\u5230\u884c\u52a8\u5f53\u4e2d\u3002</p> <p>1. \u54ea\u4e9b\u4e8b\u60c5\u9002\u5408\u5373\u65f6\u542f\u52a8\uff1f</p> <ul> <li>\u6ca1\u90a3\u4e48\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u53ea\u8981\u80fd\u542f\u52a8\u5c31\u79bb\u6210\u529f\u4e0d\u8fdc\u4e86</li> <li>\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u53ef\u4ee5\u5148\u7528\u5373\u65f6\u542f\u52a8\u5f00\u59cb\u4e00\u5c0f\u6b65\uff0c\u6162\u6162\u627e\u5230\u72b6\u6001</li> </ul> <p>2. \u5373\u65f6\u542f\u52a8\u7684\u64cd\u4f5c\u6280\u5de7</p> <p>\u552f\u4e00\u7684\u524d\u63d0\uff1a\u4fdd\u8bc1\u5b89\u5168</p> <p>\u786e\u8ba4\u6240\u5904\u7684\u73af\u5883\u4ee5\u53ca\u8981\u505a\u7684\u6d3b\u52a8\uff0c\u80fd\u591f\u4fdd\u8bc1\u81ea\u5df1\u548c\u4ed6\u4eba\u7684\u5b89\u5168\uff0c\u518d\u8fd0\u7528\u8fd9\u4e2a\u6280\u672f\u3002</p> <p>\u6280\u5de7\u4e00\uff1a\u542f\u52a8\u7684\u7b2c\u4e00\u6b65\uff1a\u51b3\u5b9a\u8981\u542f\u52a8\u7684\u884c\u4e3a</p> <p>\u9009\u62e9\u4e00\u4ef6\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u7136\u540e\u5728\u5fc3\u91cc\u505a\u51fa\u4e00\u4e2a\u51b3\u5b9a\uff1a\u300c\u6211\u51b3\u5b9a\u7ad9\u8d77\u8eab\u6765\u300d\u6216\u8005\u300c\u6211\u51b3\u5b9a\u626b\u4e00\u4e0b\u5730\u300d\u3002</p> <p>\u6280\u5de7\u4e8c\uff1a\u542f\u52a8\u7684\u8fc7\u7a0b\uff1a\u7f13\u6162\u51b3\u7b56\uff0c\u5feb\u901f\u542f\u52a8\uff0c\u7f13\u6162\u8fdb\u884c</p> <p>\u6162\u6162\u505a\u51fa\u8fd9\u4e2a\u51b3\u5b9a\uff0c\u4e0d\u5fc5\u7740\u6025\u3002</p> <p>\u5728\u505a\u51fa\u51b3\u5b9a\u540e\uff0c\u8bd5\u8bd5\u770b\uff1a\u7acb\u523b\u542f\u52a8\u8fd9\u9879\u884c\u4e3a\u3002\u300c\u542f\u52a8\u300d\u8fd9\u4e00\u6b65\u53ef\u4ee5\u975e\u5e38\u5feb\uff0c\u751a\u81f3\u77ac\u95f4\u542f\u52a8\u3002 \u542f\u52a8\u4e4b\u540e\u7684\u52a8\u4f5c\u4e0d\u4e00\u5b9a\u8981\u5f88\u5feb</p> <p>\u6280\u5de7\u4e09\uff1a\u542f\u52a8\u7684\u76ee\u7684\uff1a\u53ea\u662f\u542f\u52a8\uff0c\u4e0d\u662f\u5b8c\u6210</p> <p>\u8981\u6c42\u5c06\u884c\u52a8\u7ef4\u6301\u591a\u4e45\uff0c\u53ea\u8981\u5728\u505a\u51fa\u51b3\u5b9a\u4e4b\u540e\u7acb\u523b\u5f00\u59cb\u5c31\u597d\u4e86\u3002</p> <p>\u4e0d\u8981\u6c42\u671f\u5f85\u8fd9\u9879\u884c\u4e3a\u8981\u8fbe\u5230\u4ec0\u4e48\u7ed3\u679c\u6216\u6807\u51c6\uff0c\u65e0\u8bba\u662f\u8981\u63a5\u7740\u628a\u6587\u6863\u5199\u5b8c\uff0c\u6216\u8005\u628a\u5730\u9762\u5f7b\u5e95\u6e05\u626b\u5e72\u51c0\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u4e4b\u540e\u7684\u9009\u62e9\uff0c\u800c\u4e0d\u5305\u542b\u5728\u91cc\u9762\u3002</p>"},{"location":"common/02-solve_procrastination/#3-day3","title":"3. Day3","text":"<ul> <li>\u9605\u8bfb\uff1a\u8ba4\u8bc6\u756a\u8304\u5de5\u4f5c\u6cd5 </li> <li>\u884c\u52a8\uff1a\u5373\u65f6\u542f\u52a8\u4e00\u4e2a\u300c\u756a\u8304\u300d </li> <li>\u6b63\u5ff5\uff1a\u8df3\u51fa\u5934\u8111\uff0c\u56de\u5230\u5f53\u4e0b</li> </ul>"},{"location":"common/02-solve_procrastination/#31-\u8ba4\u8bc6\u756a\u8304\u5de5\u4f5c\u6cd5","title":"3.1 \u8ba4\u8bc6\u756a\u8304\u5de5\u4f5c\u6cd5","text":"<p>\u4e00\u4e2a\u6807\u51c6\u7684\u300c\u756a\u8304\u300d</p> <ul> <li>25\u5206\u949f\u6d3b\u52a8+5\u5206\u949f\u4f11\u606f</li> </ul> <p>\u5e94\u7528\u5b83\u65f6\uff0c\u4f60\u9700\u8981\u9009\u5b9a\u5de5\u4f5c\u4efb\u52a1\uff0c\u63d0\u524d\u8ba1\u65f6\uff0c\u6bcf\u5de5\u4f5c25\u5206\u949f\uff0c\u4f11\u606f5\u5206\u949f\uff0c\u7136\u540e\u7ee7\u7eed\u6295\u5165\u5de5\u4f5c\u3002</p> <p>1. \u756a\u8304\u7684\u7531\u6765</p> <ul> <li>\u756a\u8304\u7684\u529f\u80fd\u88ab\u4f4e\u4f30<ul> <li>\u81ea\u5a92\u4f53\u7b49\u4ecb\u7ecd\u7684\u756a\u8304\u5de5\u4f5c\u6cd5\uff0c\u4ee5\u53ca\u72ec\u7acb\u7684\u756a\u8304\u5e94\u7528\u7a0b\u5e8f\u53ea\u6db5\u76d6\u4e86\u756a\u8304\u5de5\u4f5c\u6cd5\u7684\u4e00\u90e8\u5206\u529f\u80fd</li> </ul> </li> <li>\u300c\u756a\u8304\u300d\u867d\u5c0f\uff0c\u4e94\u810f\u4ff1\u5168<ul> <li>\u756a\u8304\u5de5\u4f5c\u6cd5\u662f\u6574\u5408\u4e86\u591a\u79cd\u65f6\u95f4\u7ba1\u7406\u5de5\u5177\u7684\u5de5\u5177\u7bb1\u3002\u5305\u542b\u4e86\u4efb\u52a1\u7ba1\u7406\u3001\u4efb\u52a1\u6267\u884c\u548c\u603b\u7ed3\u6539\u8fdb\u7b49\u591a\u4e2a\u65b9\u9762</li> </ul> </li> <li>\u5728\u756a\u8304\u4e2d\u91cd\u65b0\u7406\u89e3\u65f6\u95f4<ul> <li>\u756a\u8304\u5de5\u4f5c\u6cd5\u5e76\u4e0d\u4ec5\u4ec5\u662f\u64cd\u4f5c\u6280\u672f\uff0c\u80cc\u540e\u5305\u542b\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u7406\u89e3\u65f6\u95f4\u7684\u65b9\u5f0f\u3002\u800c\u8fd9\u662f\u7f51\u7edc\u4e0a\u7684\u6587\u7ae0\u548c\u5e94\u7528\u5f88\u96be\u6df1\u5165\u8bb2\u89e3\u7684\u90e8\u5206\u3002\u5728\u5728\u5bf9\u8fd9\u90e8\u5206\u7f3a\u4e4f\u7406\u89e3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u5f88\u96be\u5728\u5b9e\u8df5\u756a\u8304\u4e2d\u83b7\u5f97\u4e50\u8da3\uff0c\u751a\u81f3\u4f1a\u4f1a\u4ea7\u751f\u632b\u8d25\u4f53\u9a8c</li> </ul> </li> <li>\u7528\u597d\u756a\u8304\uff0c\u300c\u4e0e\u65f6\u95f4\u5316\u654c\u4e3a\u53cb\u300d <ul> <li>\u7528\u597d\u756a\u8304\u5de5\u4f5c\u6cd5\uff0c\u53ef\u4ee5\u6539\u9020\u6211\u4eec\u4e0e\u65f6\u95f4\u7684\u5173\u7cfb\uff0c\u771f\u6b63\u505a\u5230\u300c\u4e0e\u65f6\u95f4\u5316\u654c\u4e3a\u53cb\u300d</li> </ul> </li> <li>\u878d\u5165\u6b63\u5ff5\uff0c\u8ba9\u756a\u8304\u7684\u4ef7\u503c\u66f4\u5927<ul> <li>\u756a\u8304\u5373\u6b63\u5ff5\uff0c\u6b63\u5ff5\u5373\u756a\u8304 </li> </ul> </li> <li>\u4efb\u4f55\u4eba\u90fd\u6709\u673a\u4f1a\u4ece\u756a\u8304\u83b7\u76ca <ul> <li>\u7528\u53ef\u4ee5\u91cf\u5316\u7684\u65b9\u5f0f\uff0c\u7cbe\u51c6\u4f7f\u7528\u81ea\u5df1\u7684\u65f6\u95f4\u548c\u6ce8\u610f\u529b\uff0c\u756a\u8304\u6570\u636e\u53ef\u4ee5\u5145\u5f53\u884c\u52a8\u529b\u7684\u300c\u6674\u96e8\u8868\u300d\u3002\u5373\u4efb\u4f55\u4e00\u4e2a\u5173\u5fc3\u81ea\u5df1\u6548\u7387\u6216\u8005\u6ce8\u610f\u529b\u7684\u4eba\u90fd\u53ef\u4ee5\u7528</li> </ul> </li> <li>\u4ece\u756a\u8304\u83b7\u76ca\u7684\u5173\u952e\u662f\u300c\u505a\u5230\u300d <ul> <li>\u5f88\u591a\u65f6\u5019\u77e5\u9053\u4e0d\u5982\u505a\u5230\uff0c\u800c\u756a\u8304\u5c31\u662f\u5176\u4e2d\u7684\u6865\u6881\u3002\u5f53\u4f60\u6709\u4e86\u4eb2\u8eab\u4f53\u9a8c\u4e4b\u540e,\u4f1a\u66f4\u52a0\u7406\u89e3\u5982\u4f55\u6709\u6548\u5730\u884c\u52a8\u3002</li> </ul> </li> </ul> <p>2. \u8c28\u8bb0\uff1a\u4f11\u606f\u548c\u5de5\u4f5c\u540c\u7b49\u91cd\u8981</p> <ul> <li>\u756a\u8304\u5de5\u4f5c\u6cd5\u7684\u7814\u53d1\u56e2\u961f\u5c1d\u8bd5\u8fc7\u5f88\u591a\u7ec4\u65f6\u95f4\u8bbe\u7f6e\uff0c25\u5206\u94b1\u4e2d+5\u5206\u949f\u7684\u8bbe\u7f6e\uff0c\u662f\u5b9e\u8df5\u4e2d\u5927\u591a\u6570\u4eba\u80fd\u591f\u901a\u8fc7\u52aa\u529b\uff0c\u4fdd\u6301\u5de5\u4f5c\u6548\u7387\u548c\u521b\u9020\u529b\u7684\u65f6\u95f4 </li> <li>\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\uff0c25\u5206\u949f\u53ef\u80fd\u786e\u5b9e\u4e0d\u591f\u5c3d\u5174\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u9009\u62e9\u975e\u5e38\u7b80\u77ed\u7684\u4f11\u606f\uff0c\u5141\u8bb8\u81ea\u5df1\u77ed\u6682\u4ece\u4efb\u52a1\u4e2d\u62bd\u79bb\u51fa\u6765 </li> <li>\u5982\u679c\u9700\u8981\u67e5\u770b\u6d88\u606f\uff0c\u8bb0\u5f97\u63d0\u9192\u81ea\u5df1\uff0c\u53ea\u56de\u590d\u5fc5\u987b\u56de\u590d\u7684\u6d88\u606f\uff0c\u907f\u514d\u5377\u5165\u6ca1\u6709\u76ee\u7684\u7684\u7fa4\u804a</li> <li>\u5728\u521d\u59cb\u7684\u7ec3\u4e60\u9636\u6bb5\uff0c\u80fd\u5728\u4f11\u606f\u4e4b\u540e\u4e3b\u52a8\u56de\u6765\uff0c\u662f\u7d2f\u79ef\u756a\u8304\u7684\u5173\u952e</li> </ul>"},{"location":"common/02-solve_procrastination/#32-\u756a\u8304\u521d\u4f53\u9a8c","title":"3.2 \u756a\u8304\u521d\u4f53\u9a8c","text":"<p>1. \u9009\u62e9\u4e00\u4ef6\u4e8b,\u7528\u6765\u5b9e\u8df5\u756a\u8304\u5de5\u4f5c\u6cd5</p> <p>\u73b0\u5728\u601d\u8003\u4e00\u4e0b\uff0c\u5728\u4eca\u5929\u4f59\u4e0b\u7684\u65f6\u95f4\u91cc\uff0c\u4f60\u8981\u505a\u7684\u6700\u91cd\u8981\u7684\u90a3\u4ef6\u4e8b\u662f\u4ec0\u4e48\uff0c\u5982\u679c\u5b83\u9700\u8981\u81f3\u5c1125\u5206\u949f\u7684\u65f6\u95f4\u6295\u5165\uff0c\u5e76\u4e14\u4f60\u80fd\u81ea\u4e3b\u51b3\u5b9a\u4ec0\u4e48\u65f6\u5019\u53bb\u505a\u5b83\uff0c\u5b83\u53ef\u4ee5\u6210\u4e3a\u7ec3\u4e60\u756a\u8304\u7684\u7edd\u4f73\u6750\u6599\u3002</p> <p>2. \u627e\u4e00\u5f20\u7528\u6765\u8bb0\u5f55\u756a\u8304\u7684\u767d\u7eb8\u6216\u672c\u5b50</p> <p>\u5728\u5f00\u59cb\u4e4b\u524d,\u5148\u628a\u4f60\u51b3\u5b9a\u8981\u505a\u7684\u4efb\u52a1\u5199\u4e0b\u6765\u3002</p> <p>3. \u4f60\u9700\u8981\u4e00\u4e2a\u8ba1\u65f6\u5668</p> <p>\u4efb\u4f55\u4e00\u4e2a\u53ef\u4ee5\u8ba1\u65f6\u7684\u5de5\u5177\u5373\u53ef\uff0c\u4e0d\u8981\u5728\u5bfb\u627e\u8ba1\u65f6\u5de5\u5177\u4e0a\u82b1\u8d39\u592a\u591a\u65f6\u95f4\uff0c\u8fd9\u53ef\u80fd\u4e5f\u662f\u4e00\u79cd\u62d6\u5ef6\u7684\u624b\u8868\u73b0\uff0c\u6709\u4ec0\u4e48\u7528\u4ec0\u4e48\u5c31\u597d\u3002</p> <p>4. \u8bbe\u7f6e 25 \u5206\u949f\u8ba1\u65f6\uff0c\u7136\u540e\u300c\u5373\u65f6\u542f\u52a8\u300d</p> <p>\u5982\u679c\u4e0d\u77e5\u9053\u4ece\u54ea\u5f00\u59cb\u505a\uff0c\u53ef\u4ee5\u5728\u8ba1\u65f6\u5f00\u59cb\u4e4b\u540e\uff0c\u5148\u82b1\u4e24\u4e09\u5206\u949f\u7b80\u5355\u8ba1\u5212\u4e00\u4e0b\uff0c\u5982\u4f55\u4f7f\u7528\u597d\u8fd9 20 \u591a\u5206\u949f\u7684\u65f6\u95f4\u3002</p> <p>\u5728\u884c\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u8bb8\u67d0\u4e00\u65f6\u523b\u4f60\u60f3\u53bb\u505a\u522b\u7684\u4e8b\u60c5\uff0c\u6216\u8005\u5fd8\u4e86\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\u3002\u6ca1\u5173\u7cfb\uff0c\u6bcf\u4e00\u6b21\u5206\u5fc3\u8d70\u795e\uff0c\u63d0\u9192\u81ea\u5df1\u73b0\u5728\u8981\u505a\u7684\u662f\u4ec0\u4e48\uff0c\u76f4\u5230\u8ba1\u65f6\u5668\u54cd\u8d77\u3002</p> <p>5. \u5f00\u59cb\u4f11\u606f</p> <p>\u8ba1\u65f6\u5668\u54cd\u8d77\u540e\uff0c\u5728\u4f60\u9009\u62e9\u7684\u6d3b\u52a8\u65c1\u8fb9\u753b\u4e00\u4e2a\u300cX\u300d\uff0c\u4ee3\u8868\u5b8c\u6210\u4e00\u4e2a\u756a\u8304\u3002\u7136\u540e\u5373\u65f6\u542f\u52a8\u300c\u8d77\u8eab\u300d\u7684\u52a8\u4f5c\uff0c\u5f00\u59cb\u4f11\u606f\u3002</p> <p>\u4f11\u606f\u4e0d\u7528\u4e25\u683c\u8ba1\u65f6\uff0c\u6839\u636e\u4f60\u7684\u72b6\u6001\uff0c\u53ef\u957f\u53ef\u77ed\uff0c\u4f46\u9700\u8981\u63a7\u5236\u5728\u5341\u5206\u949f\u4ee5\u5185\u3002\u5982\u679c\u4f60\u72b6\u6001\u5f88\u597d\uff0c\u53ef\u4ee5\u5728\u975e\u5e38\u77ed\u7684\u72b6\u6001\u8c03\u6574\u540e\u5c31\u7ee7\u7eed\u5f00\u59cb\u884c\u52a8\u3002</p>"},{"location":"common/02-solve_procrastination/#4-day4","title":"4. Day4","text":"<ul> <li>\u9605\u8bfb\uff1a\u5b83\u5f8b\u5373\u81ea\u5f8b </li> <li>\u884c\u52a8\uff1a\u7528\u300c\u756a\u8304\u300d\u521b\u9020\u60c5\u5883\u652f\u6301 </li> <li>\u6b63\u5ff5\uff1a\u4e0e\u60f3\u6cd5\u3001\u60c5\u7eea\u89e3\u5957</li> </ul>"},{"location":"common/02-solve_procrastination/#41-\u5b83\u5f8b\u5373\u81ea\u5f8b","title":"4.1 \u5b83\u5f8b\u5373\u81ea\u5f8b","text":"<p>1. \u4ec0\u4e48\u65f6\u5019\u4e0d\u62d6\u5ef6\uff1f\u627e\u51fa\u8fd9\u4e9b\u6210\u529f\u60c5\u5883</p> <p>\u56de\u987e\u300c\u62d6\u5ef6\u4f8b\u5916\u4e8b\u4ef6\u300d\u7684\u7ec6\u8282\uff0c\u6bd4\u5982\u5f53\u65f6\u7684\u73af\u5883\u3001\u72ec\u81ea\u505a\u4e8b\u8fd8\u662f\u548c\u5176\u4ed6\u4eba\u4e00\u8d77\u3001\u6709\u6ca1\u6709\u83b7\u5f97\u522b\u4eba\u7684\u5e2e\u52a9\u3001\u4f7f\u7528\u7684\u5de5\u5177\u7b49\u3002</p> <p>2. \u653e\u4e0b\u81ea\u5f8b\u7684\u6267\u5ff5\uff0c\u501f\u52a9\u60c5\u5883\u548c\u5de5\u5177\u7684\u529b\u91cf</p> <ul> <li>\u4eba\u7684\u610f\u5fd7\u529b\u662f\u975e\u5e38\u5b9d\u8d35\u7684\u8d44\u6e90\uff0c\u4e0d\u8bd5\u56fe\u5bf9\u6297\u5f3a\u5927\u7684\u60c5\u5883\uff0c\u800c\u662f\u9009\u62e9\u5408\u9002\u7684\u60c5\u5883\uff0c\u628a\u610f\u5fd7\u529b\u7528\u5728\u6211\u4eec\u770b\u91cd\u7684\u4e8b\u60c5\u4e0a\uff0c\u6548\u679c\u4f1a\u66f4\u597d</li> <li>\u653e\u4e0b\u5bf9\u300c\u81ea\u5f8b\u300d\u7684\u6267\u5ff5\uff0c\u9009\u62e9\u9002\u5408\u7684\u60c5\u5883\u548c\u63d0\u9192\u5de5\u5177\uff0c\u4f1a\u662f\u66f4\u5feb\u8d77\u6548\u7684\u62d6\u5ef6\u5e94\u5bf9\u65b9\u5f0f</li> </ul> <p>3. \u5b83\u5f8b\u5373\u81ea\u5f8b\uff0c\u7528\u756a\u8304\u5de5\u4f5c\u6cd5\u521b\u9020\u60c5\u5883\u652f\u6301</p> <p>\u300c\u5b83\u5f8b\u300d\u5373\u81ea\u5f8b</p> <p>\u5f53\u6211\u4eec\u6709\u610f\u8bc6\u5730\u9009\u62e9\u300c\u5b83\u5f8b\u300d\u624b\u6bb5\uff0c\u6765\u5e2e\u52a9\u81ea\u5df1\u884c\u52a8\u65f6\uff0c\u8fd9\u6070\u6070\u5c31\u662f\u4e00\u79cd\u81ea\u5f8b\u65b9\u5f0f\u3002</p> <p>\u5408\u7406\u501f\u52a9\u63d0\u9192\u7269\u548c\u5916\u90e8\u5de5\u5177\uff0c\u5c31\u50cf\u62e5\u6709\u4e86\u4e00\u5957\u300c\u5fc3\u7406\u5047\u80a2\u300d\u3002\u5373\u4f7f\u6ca1\u6709\u751f\u5c31\u4e00\u526f\u300c\u81ea\u5f8b\u300d\u7684\u94a2\u7b4b\u94c1\u9aa8\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e3b\u52a8\u5f00\u6302\uff0c\u53d8\u6210\u300c\u5b83\u5f8b\u300d\u7684\u94a2\u94c1\u4fa0\u3002</p>"},{"location":"common/02-solve_procrastination/#42-\u7528\u756a\u8304\u521b\u9020\u60c5\u5883\u652f\u6301","title":"4.2 \u7528\u300c\u756a\u8304\u300d\u521b\u9020\u60c5\u5883\u652f\u6301","text":"<ul> <li>\u60f3\u60f3\u770b\uff0c\u54ea\u4e9b\u4e8b\u60c5\u9002\u5408\u4f5c\u4e3a\u4f60\u7684\u7b2c\u4e00\u4e2a\u756a\u8304\uff1f\u53ef\u4ece\u5fc3\u7406\u5065\u8eab\u756a\u8304\u3001\u6668\u95f4\u6d3b\u52a8\u756a\u8304\u3001\u4eca\u65e5\u5f85\u529e\u756a\u8304\u7b49\u51e0\u7c7b\u6d3b\u52a8\u4e2d\u9009\u62e9\u7b2c\u4e00\u4e2a\u756a\u8304</li> <li>\u5217\u51fa\u5f85\u529e\u300d\u672c\u8eab\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u756a\u8304\uff0c\u6216\u8005\u548c\u5176\u5b83\u7684\u51c6\u5907\u6d3b\u52a8\u5408\u5e76\u5728\u4e00\u8d77\u4f5c\u4e3a\u4e00\u5929\u7684\u7b2c\u4e00\u4e2a\u756a\u8304</li> </ul>"},{"location":"common/02-solve_procrastination/#5-day5","title":"5. Day5","text":"<ul> <li>\u9605\u8bfb\uff1a\u4e0e\u65f6\u95f4\u5316\u654c\u4e3a\u53cb </li> <li>\u884c\u52a8\uff1a\u7d2f\u79ef\u756a\u8304\u7684\u529b\u91cf </li> <li>\u6b63\u5ff5\uff1a\u611f\u53d7\u72b6\u6001\u7684\u8d77\u4f0f</li> </ul>"},{"location":"common/02-solve_procrastination/#51-\u4e0e\u65f6\u95f4\u5316\u654c\u4e3a\u53cb","title":"5.1 \u4e0e\u65f6\u95f4\u5316\u654c\u4e3a\u53cb","text":"<p>1. \u65f6\u95f4\u7684\u4e24\u4e2a\u4fa7\u9762</p> <ul> <li>\u62bd\u8c61\u7684\u4fa7\u9762\uff1a\u6d41\u53d8\u6027\uff08becoming\uff09</li> </ul> <p></p> <ul> <li>\u5177\u4f53\u7684\u4fa7\u9762\uff1a\u4e8b\u4ef6\u6f14\u66ff\uff08succession of events\uff09</li> </ul> <p></p> <p>2. \u4e0d\u540c\u4fa7\u9762\u770b\u5f85\u65f6\u95f4\uff0c\u6211\u4eec\u5bf9\u4e8b\u4ef6\u7684\u611f\u77e5\u4e0d\u540c</p> <ul> <li>\u6211\u4eec\u7684\u5934\u8111\u7528\u62bd\u8c61\u6982\u5ff5\u7406\u89e3\u65f6\u95f4\u300c\u6d41\u53d8\u300d\u7684\u4e00\u9762\uff0c\u611f\u53d7\u5230\u7684\u662f\u5206\u79d2\u4e0d\u505c\uff0c\u65f6\u4e0d\u6211\u5f85\uff0c\u5f80\u5f80\u968f\u4e4b\u800c\u7126\u8651</li> <li>\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u5173\u6ce8\u65f6\u95f4\u300c\u4e8b\u4ef6\u6f14\u66ff\u300d\u7684\u4e00\u9762\uff0c\u4e0d\u8ba9\u300c\u6d41\u53d8\u300d\u5360\u636e\u6ce8\u610f\u529b\u7684\u5168\u90e8\uff0c\u53bb\u5173\u6ce8\u4e00\u4ef6\u4ef6\u5177\u4f53\u7684\u4e8b\u60c5\uff0c\u5e76\u6295\u8eab\u4e8e\u884c\u52a8</li> </ul> <p>\u5173\u6ce8\u65f6\u95f4\u300c\u4e8b\u4ef6\u6f14\u66ff\u300d\u7684\u4e00\u9762</p> <p>\u7126\u8651\u5e76\u6ca1\u6709\u88ab\u300c\u89e3\u51b3\u300d\uff0c\u5b83\u53ea\u662f\u4e0d\u77e5\u4f55\u65f6\u81ea\u884c\u9690\u9000\u4e86\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u5185\u5fc3\u6df1\u5904\u7684\u5145\u5b9e\u611f\u3002</p> <ol> <li>\u9009\u62e9\u89c2\u5bdf\u65f6\u95f4\u7684\u89c6\u89d2</li> </ol> <ul> <li>\u7528\u756a\u8304\u5de5\u4f5c\u6cd5\u5b98\u65b9\u624b\u518c\u7684\u8bdd\u6765\u8bf4\uff1a\u6211\u4eec\u300c\u4e0d\u518d\u805a\u7126\u4e8e\"\u6d41\u53d8\u6027\u300f\u7684\u6982\u5ff5\u5efa\u6784\u300d\uff0c\u4ece\u800c\u300c\u51cf\u8f7b\u7126\u8651,\u4ece\u800c\u63d0\u9ad8\u4e2a\u4eba\u6548\u7387\u300d</li> </ul> <p>\u9009\u62e9\u66f4\u5145\u5b9e\u7684\u89c6\u89d2</p> <p>\u5fcd\u53d7\u65f6\u95f4\u6d41\u901d\u662f\u4e00\u79cd\u89c6\u89d2\uff0c\u4e0e\u65f6\u95f4\u5408\u4f5c\u5219\u662f\u53e6\u4e00\u79cd\u9009\u62e9\u3002</p> <p>\u300c\u65f6\u95f4\u7684\u6d41\u901d\u4e0d\u518d\u88ab\u770b\u4f5c\u6d88\u6781\u73b0\u8c61\uff0c\u800c\u662f\u79ef\u6781\u7684\u4e8b\u60c5\u3002\u6bcf\u4e00\u4e2a\u756a\u8304\u90fd\u4ee3\u8868\u4e86\u6539\u8fdb\u884c\u52a8\u6216\u8005\u5728\u56f0\u5883\u4e2d\u8fc5\u901f\u91cd\u632f\u81ea\u6211\u7684\u673a\u4f1a\u3002\u300d\u620f\u5267\u6027\u7684\u6539\u53d8\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u3002</p> <p>\u6211\u4eec\u53ea\u662f\u9009\u62e9\u4e86\u66f4\u6709\u5e2e\u52a9\u7684\u89c6\u89d2\u3002</p>"},{"location":"common/02-solve_procrastination/#52-\u7d2f\u79ef\u756a\u8304\u7684\u529b\u91cf","title":"5.2 \u7d2f\u79ef\u756a\u8304\u7684\u529b\u91cf","text":"<p>\u4e00\u5b9a\u8981\u7528\u756a\u8304\u5de5\u4f5c\u6cd5\u5417\uff1f</p> <p>\u4ece\u4efb\u52a1\u7ba1\u7406\u3001\u5f53\u65e5\u8ba1\u5212\u5230\u8ddf\u8e2a\u6267\u884c\uff0c\u4e43\u81f3\u603b\u7ed3\u6539\u8fdb\uff0c\u90fd\u6709\u6d89\u53ca\u3002\u5982\u679c\u4f60\u60f3\u5feb\u901f\u638c\u63e1\u8fd9\u4e2a\u65b9\u9762\u7684\u6280\u5de7\uff0c\u6574\u5957\u5730\u4f7f\u7528\u756a\u8304\u5de5\u4f5c\u6cd5\u662f\u6027\u4ef7\u6bd4\u5f88\u9ad8\u7684\u505a\u6cd5\u3002 </p> <p>\u4f46\u4e0d\u662f\u6bcf\u4ef6\u4e8b\u90fd\u9002\u5408\u4f7f\u7528\u756a\u8304\u3002\u6709\u4e9b\u4e8b\u5e76\u4e0d\u65b9\u4fbf\u4e2d\u9014\u4f11\u606f\u51e0\u5206\u949f\u3002\u7136\u800c\uff0c\u756a\u8304\u6cd5\u7684\u7cbe\u9ad3\u8fdc\u4e0d\u53ea\u662f\u4e2d\u9014\u4f11\u606f\uff0c\u8fd8\u6709\u5f88\u591a\u3002\u4f60\u4ece\u756a\u8304\u6cd5\u4e2d\u5b66\u4f1a\u5b83\u4eec\u540e\uff0c\u53ef\u4ee5\u8ddf\u81ea\u5df1\u7684\u65b9\u6cd5\u7ed3\u5408\u8d77\u6765\u3002</p> <ul> <li>\u6bcf\u5929\u628a\u756a\u8304\u6570\u7d2f\u52a0\u5230\u603b\u6570\u4e0a\uff0c\u5efa\u7acb\u4e86\u4e00\u79cd\u300c\u8fdb\u5c55\u53d9\u4e8b\u300d\u3002\u603b\u6570\u53ea\u4f1a\u589e\u52a0\u4e0d\u4f1a\u51cf\u5c11\uff0c\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9d\u8d35\u7684\u786e\u5b9a\u611f\u3002</li> </ul>"},{"location":"common/02-solve_procrastination/#6-day6","title":"6. Day6","text":"<ul> <li>\u9605\u8bfb\uff1a\u7406\u89e3\u300c\u6162\u6027\u62d6\u5ef6\u4eba\u7fa4\u300d </li> <li>\u884c\u52a8\uff1a\u8bc6\u522b\u62d6\u5ef6\u98ce\u9669\u56e0\u7d20 </li> <li>\u6b63\u5ff5\uff1a\u5c0a\u91cd\u5f53\u4e0b\u7684\u611f\u53d7</li> </ul>"},{"location":"common/02-solve_procrastination/#61-\u7406\u89e3\u6162\u6027\u62d6\u5ef6\u4eba\u7fa4","title":"6.1 \u7406\u89e3\u300c\u6162\u6027\u62d6\u5ef6\u4eba\u7fa4\u300d","text":"<p>\u600e\u4e48\u624d\u4e0d\u7b97\u662f\u62d6\u5ef6\uff0c\u771f\u7684\u8981\u770b\u60c5\u51b5\u800c\u5b9a</p> <p>\u5f53\u8981\u505a\u4ec0\u4e48\u4e0d\u6e05\u6670\u65f6\uff0c\u4f60\u9700\u8981\u7684\u662f\u63d0\u9192\u81ea\u5df1\u505a\u51fa\u4e00\u4e2a\u660e\u786e\u7684\u51b3\u5b9a\uff0c\u6309\u7167\u81ea\u5df1\u7684\u51b3\u5b9a\u53bb\u884c\u52a8\uff0c\u5c31\u4e0d\u7b97\u62d6\u5ef6\u3002</p> <p>1. \u5bf9\u300c\u62d6\u5ef6\u75c7\u300d\u7684\u66f4\u7cbe\u786e\u63cf\u8ff0</p> <p>\u300c\u6162\u6027\u62d6\u5ef6\u4eba\u7fa4\u300d\uff0c\u53ef\u80fd\u9762\u4e34\u4ee5\u4e0b\u81f3\u5c11\u4e00\u7c7b\u95ee\u9898\uff1a</p> <ul> <li>\u6301\u7eed\u62d6\u5ef6\uff0c\u5305\u62ec\u300c\u6e29\u548c\u6301\u7eed\u300d\u7684\u60c5\u51b5 </li> <li>\u5728\u591a\u4e2a\u751f\u6d3b\u9886\u57df\u7684\u62d6\u5ef6\uff0c\u751a\u81f3\u662f\u300c\u5168\u9762\u62d6\u5ef6\u300d </li> <li>\u540e\u679c\u4e25\u91cd\u7684\u62d6\u5ef6 </li> <li>\u66fe\u7ecf\u7ecf\u5386\u8fc7\u591a\u6b21\u6025\u6027\u53d1\u4f5c\u7684\u300c\u62d6\u5ef6\u300d</li> </ul> <p>2. \u6162\u6027\u62d6\u5ef6\u7684\u4e09\u5927\u98ce\u9669</p> <p>\u5982\u679c\u4f60\u65e0\u6cd5\u786e\u5b9a\u81ea\u5df1\u662f\u5426\u9762\u4e34\u300c\u6162\u6027\u62d6\u5ef6\u300d\u56f0\u6270\uff0c\u4e0b\u9762\u8fd9\u4e09\u7c7b\u98ce\u9669\u56e0\u7d20\uff0c\u53ef\u80fd\u4f1a\u8ba9\u4f60\u66f4\u6709\u53ef\u80fd\u8868\u73b0\u51fa\u4e00\u4e9b\u300c\u6162\u6027\u62d6\u5ef6\u300d\u7684\u7279\u5f81\uff0c\u6216\u8005\u5904\u4e8e\u300c\u666e\u901a\u4eba\u7fa4\u300d\u4e0e\u300c\u6162\u6027\u62d6\u5ef6\u4eba\u7fa4\u300d\u4e2d\u95f4\u7684\u7070\u8272\u5730\u5e26\uff1a</p> <ul> <li>\u6267\u884c\u529f\u80fd\u53d7\u635f\uff1a\u4e00\u4e9b\u75be\u75c5\u6216\u751f\u7406\u539f\u56e0\u4f1a\u5bfc\u81f4\u5927\u8111\u529f\u80fd\u635f\u4f24\uff0c\u5f71\u54cd\u5230\u524d\u77bb\u6027\u8bb0\u5fc6\u7684\u8868\u73b0\uff0c\u5305\u62ec\u4e0e\u8ba1\u5212\u3001\u610f\u56fe\u76f8\u5173\u7684\u529f\u80fd\u3002\u6700\u5178\u578b\u7684\u5982\u6ce8\u610f\u529b\u7f3a\u5931\u591a\u52a8\u969c\u788d\uff08ADHD\uff09\uff0c\u53cc\u76f8\u60c5\u611f\u969c\u788d\u3001\u8fbe\u5230\u8bca\u65ad\u6c34\u5e73\u7684\u6291\u90c1\u969c\u788d\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u4e5f\u4f1a\u5f71\u54cd\u5230\u6267\u884c\u529f\u80fd </li> <li>\u8eab\u5fc3\u72b6\u6001\u6613\u6ce2\u52a8\uff1a\u6709\u4e9b\u4eba\u7684\u60c5\u7eea\u5524\u8d77\u5f3a\u5ea6\u9ad8\uff0c\u6301\u7eed\u65f6\u95f4\u957f\u3002\u9ad8\u5f3a\u5ea6\u7684\u60c5\u7eea\uff0c\u4e5f\u4f1a\u4f7f\u884c\u52a8\u9677\u5165\u56f0\u96be\u3002\u5404\u79cd\u4e25\u91cd\u7684\u60c5\u7eea\u56f0\u6270\uff08\u5982\u6291\u90c1\u3001\u7126\u8651\u3001\u6124\u6012\uff09\u90fd\u6709\u53ef\u80fd\u5e72\u6270\u6211\u4eec\u7684\u884c\u52a8\u3002 </li> <li>\u6cdb\u81ea\u7531\u804c\u4e1a\u8005\uff1a\u5305\u62ec\u5178\u578b\u7684\u81ea\u7531\u804c\u4e1a\u8005\uff0c\u4e5f\u5305\u62ec\u5404\u7c7b\u534a\u81ea\u7531\u804c\u4e1a\u8005\uff08\u4f8b\u5982\u8bb0\u8005\uff09\uff0c\u4ee5\u53ca\u9636\u6bb5\u6027\u81ea\u7531\u804c\u4e1a\u8005\uff0c\u4f8b\u5982\u9ad8\u6821\u5b66\u751f\u3001\u5168\u804c\u592a\u592a\u6216\u5168\u804c\u5148\u751f\u3001\u5168\u804c\u5907\u8003\u4eba\u5458\u7b49\u3002\u8fd9\u7c7b\u4eba\u7fa4\u7279\u5f81\u662f\u6240\u5728\u7684\u60c5\u5883\u4e0d\u8db3\u4ee5\u4e3a\u884c\u52a8\u63d0\u4f9b\u7ed3\u6784\u6027\u7684\u652f\u6301\u3002\u2014\u2014\u8fd9\u53e5\u8bdd\u770b\u8d77\u6765\u62bd\u8c61\uff0c\u4f46\u4f60\u5982\u679c\u771f\u5c5e\u4e8e\u8fd9\u4e2a\u7fa4\u4f53\uff0c\u53ef\u80fd\u4e00\u70b9\u4e5f\u4e0d\u89c9\u5f97\u62bd\u8c61\u3002</li> </ul> <p>3. \u5efa\u7acb\u957f\u671f\u5e94\u5bf9\u62d6\u5ef6\u7684\u9884\u671f</p> <p>\u53ea\u8981\u4f60\u80fd\u63d0\u9192\u81ea\u5df1\u4fdd\u6301\u4e00\u5b9a\u7684\u7ec3\u4e60\u9891\u7387\uff0c\u5728\u751f\u6d3b\u4e2d\u4e3b\u52a8\u5e94\u7528\u8fd9\u4e9b\u5de5\u5177\uff0c\u4f1a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u662f\u5bf9\u81ea\u5df1\u7684\u884c\u52a8\u8d8a\u6765\u8d8a\u6709\u4fe1\u5fc3\u3002</p> <p>\u91cd\u70b9\u662f\u4e3b\u52a8\u7ec3\u4e60\uff0c\u800c\u4e0d\u662f\u7ec3\u4e60\u7684\u7ed3\u679c\uff0c\u4e0d\u7528\u7ba1\u5373\u65f6\u542f\u52a8\u6709\u6ca1\u6709\u6210\u529f\uff0c\u4e5f\u4e0d\u7528\u5728\u610f\u81ea\u5df1\u7684\u756a\u8304\u662f\u4e0d\u662f\u8d28\u91cf\u4e0d\u591f\u9ad8\u6216\u8005\u6570\u91cf\u4e0d\u591f\u591a\uff0c\u80fd\u4e3b\u52a8\u7ec3\u4e60\uff0c\u5c31\u591f\u4e86\u3002</p>"},{"location":"common/02-solve_procrastination/#62-\u8bc6\u522b\u62d6\u5ef6\u98ce\u9669\u56e0\u7d20","title":"6.2 \u8bc6\u522b\u62d6\u5ef6\u98ce\u9669\u56e0\u7d20","text":"<p>\u5728\u4e09\u79cd\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u4f1a\u5bb9\u6613\u8868\u73b0\u51fa\u62d6\u5ef6\u884c\u4e3a\uff0c\u751a\u81f3\u6700\u7ec8\u6f14\u53d8\u6210\u957f\u671f\u6301\u7eed\u7684\u300c\u6162\u6027\u62d6\u5ef6\u300d:</p> <p>1. \u5927\u8111\u7684\u6ce8\u610f\u529b/\u6267\u884c\u529f\u80fd\u7f3a\u9677</p> <ul> <li>\u4e00\u4e2a\u5178\u578b\u7684\u8868\u73b0\u662f\u524d\u77bb\u6027\u8bb0\u5fc6\u4e0d\u592a\u597d\uff0c\u4e0d\u8bb0\u5f97\u81ea\u5df1\u8981\u53bb\u505a\u4ec0\u4e48\u4e8b\u60c5\uff0c\u5c31\u5f88\u5bb9\u6613\u5e26\u6765\u62d6\u5ef6</li> <li>\u6709\u65f6\u62d6\u5ef6\u662f\u56e0\u4e3a\u6267\u884c\u529f\u80fd\u62d6\u4e86\u540e\u817f\uff0c\u53ef\u80fd\u4e5f\u6ca1\u6709\u4e25\u91cd\u5230\u75be\u75c5\u8bca\u65ad\u7684\u7a0b\u5ea6\uff0c\u4f46\u786e\u5b9e\u65e0\u6cd5\u652f\u6301\u6211\u4eec\u5b8c\u6210\u4e00\u4e9b\u8f83\u590d\u6742\u7684\u4efb\u52a1</li> </ul> <p>2. \u60c5\u7eea\u5f3a\u5ea6\u5927\uff0c\u8eab\u5fc3\u72b6\u6001\u4e0d\u7a33\u5b9a</p> <p>\u751f\u6d3b\u4e2d\u7684\u5f88\u591a\u8fdb\u5c55\uff0c\u5e76\u4e0d\u662f\u5728\u72b6\u6001\u597d\u7684\u65f6\u5019\u53d1\u751f\u7684\uff0c\u800c\u662f\u5728\u72b6\u6001\u4e00\u822c\u6216\u8005\u4e0d\u592a\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u80fd\u591f\u6301\u7eed\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u4e0d\u7ba1\u505a\u5f97\u600e\u4e48\u6837\uff0c\u4f46\u81f3\u5c11\u80fd\u591f\u63a8\u52a8\u751f\u6d3b\u7ee7\u7eed\u5411\u524d\u4e86\u3002</p> <p>3. \u7279\u6b8a\u7684\u5de5\u4f5c\u73af\u5883\uff0c\u7f3a\u5c11\u6709\u6548\u652f\u6301\u6761\u4ef6</p> <p>\u5f53\u4f60\u53d1\u73b0\u81ea\u5df1\u6240\u5904\u7684\u73af\u5883\u96be\u4ee5\u63d0\u4f9b\u8db3\u591f\u7684\u652f\u6301\uff0c\u53ef\u4ee5\u5148\u60f3\u529e\u6cd5\u6539\u9020\u548c\u8865\u5145\u60c5\u5883\u3002\u4e0d\u7ba1\u662f\u589e\u52a0\u63d0\u793a\u7ebf\u7d22\uff0c\u4f7f\u7528\u756a\u8304\u5de5\u4f5c\u6cd5\uff0c\u8fd8\u662f\u548c\u4eba\u7ed3\u4f34\u5408\u4f5c\uff0c\u90fd\u662f\u53ef\u4ee5\u8003\u8651\u7684\u65b9\u6cd5\u3002</p> <p>4. \u5bf9\u81ea\u5df1\u7684\u62d6\u5ef6\u6709\u66f4\u591a\u7406\u89e3\uff0c\u5efa\u7acb\u5408\u7406\u9884\u671f</p> <p>\u957f\u671f\u5e94\u5bf9\u62d6\u5ef6\uff0c\u5e76\u4e0d\u4ee3\u8868\u4f60\u4f1a\u4e00\u76f4\u4e3a\u6b64\u56f0\u6270\u3002\u66f4\u6709\u53ef\u80fd\u662f\uff0c\u62d6\u5ef6\u8fd8\u4f1a\u5b58\u5728\uff0c\u4f46\u4f60\u4eec\u7684\u5173\u7cfb\u6ca1\u6709\u90a3\u4e48\u7d27\u5f20\uff0c\u53d8\u5f97\u66f4\u52a0\u878d\u6d3d\u4e86\u3002</p>"},{"location":"common/02-solve_procrastination/#7-day7","title":"7. Day7","text":"<ul> <li>\u884c\u52a8\uff1a\u7b2c\u4e00\u9636\u6bb5\u56de\u987e\u53cd\u601d </li> <li>\u6b63\u5ff5\uff1a\u4fdd\u6301\u8010\u5fc3\u6162\u6162\u6765</li> </ul>"},{"location":"common/02-solve_procrastination/#71-\u7b2c\u4e00\u9636\u6bb5\u603b\u7ed3","title":"7.1 \u7b2c\u4e00\u9636\u6bb5\u603b\u7ed3","text":"<p>\u5173\u952e\u6280\u672f</p> <ul> <li>\u8bc6\u522b\u884c\u4e3a\u56de\u8def</li> <li>\u5373\u65f6\u542f\u52a8</li> <li>\u756a\u8304\u5de5\u4f5c\u6cd5</li> </ul> <p>\u5173\u952e\u77e5\u8bc6\u70b9</p> <ul> <li>\u62d6\u5ef6\u884c\u4e3a\u53ef\u80fd\u6709\u597d\u5904</li> <li>\u4ece\u5f53\u4e0b\u7684\u89c6\u89d2\u770b\u5f85\u65f6\u95f4</li> <li>\u6162\u6027\u62d6\u5ef6\u9700\u8981\u66f4\u591a\u8010\u5fc3</li> </ul> <p>\u53cd\u601d\u4f53\u9a8c</p> <ul> <li>\u4f60\u5e0c\u671b\u901a\u8fc7\u7ec3\u4e60\u83b7\u5f97\u54ea\u4e9b\u65b9\u9762\u7684\u6539\u5584\uff1f</li> <li>\u4ec0\u4e48\u65f6\u5019\u4e0d\u62d6\u5ef6\uff1f</li> </ul>"},{"location":"common/02-solve_procrastination/#8-day8","title":"8. Day8","text":"<ul> <li>\u9605\u8bfb\uff1a\u57f9\u517b\u300c\u8003\u5b98\u89c6\u89d2\u300d </li> <li>\u884c\u52a8\uff1a\u68c0\u9a8c\u62d6\u5ef6\u884c\u4e3a\u56de\u8def </li> <li>\u6b63\u5ff5\uff1a\u5e26\u7740\u89c9\u5bdf\u559d\u6c34</li> </ul>"},{"location":"common/02-solve_procrastination/#81-\u57f9\u517b\u8003\u5b98\u89c6\u89d2","title":"8.1 \u57f9\u517b\u300c\u8003\u5b98\u89c6\u89d2\u300d","text":"<p>\u5728\u884c\u52a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u591a\u7559\u610f\u4e00\u4e0b\u300c\u600e\u4e48\u505a\u5bf9\u6211\u662f\u6709\u7528\u7684\u300d\u300c\u4ec0\u4e48\u65f6\u5019\u662f\u6709\u7528\u7684\u300d\u8fd9\u4e9b\u95ee\u9898\uff0c\u6210\u4e3a\u81ea\u5df1\u884c\u4e3a\u7684\u300c\u8003\u5b98\u300d\uff0c\u627e\u5230\u5bf9\u81ea\u5df1\u6709\u7528\u7684\u6280\u5de7\u3002</p> <p>1. \u5728\u62d6\u5ef6\u65f6\uff0c\u4f1a\u6218\u6597\u8fd8\u662f\u9003\u8dd1\uff1f</p> <p>\u603b\u4f53\u6765\u8bf4\uff0c\u53ef\u628a\u8bc6\u522b\u7684\u56de\u8def\u5212\u5206\u4e3a\u4e24\u7c7b\uff1a</p> <ul> <li>\u300c\u6218\u6597\u300d\uff08Fight\uff09\uff1a\u52aa\u529b\u6539\u53d8\u73b0\u72b6\uff0c\u83b7\u53d6\u6109\u60a6\u611f\u6216\u8005\u907f\u514d\u4e0d\u9002\u611f</li> <li>\u300c\u9003\u8dd1\u300d\uff08Flight\uff09\uff1a\u8fdc\u79bb\u67d0\u79cd\u60c5\u5883\uff0c\u540c\u6837\u662f\u4e3a\u4e86\u83b7\u53d6\u6109\u60a6\u611f\u6216\u8005\u907f\u514d\u4e0d\u9002\u611f</li> </ul> <p>2. \u4ece\u300c\u81ea\u52a8\u53cd\u5e94\u300d\u5230\u300c\u4e3b\u52a8\u56de\u5e94\u300d</p> <p>\u4e0d\u7ba1\u662f\u300c\u6218\u6597\u300d\u8fd8\u662f\u300c\u9003\u8dd1\u300d\uff0c\u90fd\u662f\u5934\u8111\u5728\u9762\u5bf9\u60c5\u7eea\u65f6\u81ea\u52a8\u5316\u7684\u53cd\u5e94\uff0c\u8fd9\u4e9b\u53cd\u5e94\u53ef\u80fd\u4f1a\u5728\u77ed\u671f\u5185\u5e26\u6765\u4e00\u4e9b\u5956\u8d4f\uff0c\u4f46\u957f\u671f\u6765\u770b\uff0c\u4e0d\u4e00\u5b9a\u80fd\u771f\u6b63\u89e3\u51b3\u95ee\u9898\u3002\u800c\u5982\u679c\u4e00\u76f4\u91cd\u590d\u8fd9\u4e2a\u5faa\u73af\uff0c\u4f60\u5c31\u5f88\u5bb9\u6613\u6389\u5165\u300c\u7126\u8651-\u9003\u907f-\u66f4\u7126\u8651\u300d\u7684\u9677\u9631\u91cc\u9762\u3002</p> <p>\u5f53\u89c2\u5bdf\u5230\u8fd9\u4e2a\u62d6\u5ef6\u56de\u8def\u6b63\u5728\u53d1\u751f\uff0c\u4e00\u4e2a\u5e94\u5bf9\u6280\u5de7\u662f\uff1a\u6362\u4e00\u79cd\u65b9\u5f0f\u56de\u5e94\u770b\u770b</p> <p>\u4e00\u4e2a\u56de\u5e94\u7684\u8fc7\u7a0b\u81f3\u5c11\u5305\u542b\u4e86\u4e09\u6b65\uff1a</p> <p>\u8bc6\u522b\u62d6\u5ef6\u884c\u4e3a\u6b63\u5728\u53d1\u751f \u2192 \u6682\u505c\u81ea\u52a8\u5316\u53cd\u5e94 \u2192 \u4f7f\u7528\u5176\u5b83\u65b9\u5f0f\u884c\u52a8</p> <p>\u56de\u5e94\u548c\u81ea\u52a8\u5316\u53cd\u5e94\u7684\u533a\u522b\u662f\uff1a\u66f4\u52a0\u5173\u6ce8\u884c\u52a8\u7684\u300c\u6709\u6548\u6027\u300d\uff0c\u800c\u4e0d\u662f\u5b83\u77ed\u65f6\u95f4\u5185\u5e26\u6765\u7684\u60c5\u611f\u4f53\u9a8c\u3002\u5f53\u957f\u671f\u6765\u770b\u53d1\u73b0\u4e00\u4e2a\u884c\u4e3a\u662f\u6709\u6548\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u591a\u53bb\u505a\u5b83\u3002</p> <p>3. \u505a\u884c\u4e3a\u548c\u65b9\u6cd5\u7684\u300c\u8003\u5b98\u300d</p> <p>\u83b7\u53d6\u300c\u6709\u6548\u6027\u300d\u7684\u4fe1\u606f\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a</p> <ul> <li>\u7531\u522b\u4eba\u6765\u544a\u8bc9\u6211\u4eec\uff0c\u5982\u4f55\u505a\u66f4\u6709\u6548\u3002\u6211\u4eec\u81ea\u5df1\u5c31\u50cf\u8003\u573a\u4e0a\u7684\u8003\u751f\uff0c\u8ba4\u771f\u8bb0\u4f4f\u6bcf\u4e00\u4e2a\u6807\u51c6\u7b54\u6848\uff0c\u5e76\u4e25\u683c\u64cd\u4f5c</li> </ul> <p>\u8fd9\u79cd\u65b9\u5f0f\u5f53\u7136\u6709\u6548\uff0c\u4f46\u6709\u65f6\u4f1a\u5e26\u6765\u81ea\u6211\u8bc4\u5224\uff08\u5982\u4e3a\u4ec0\u4e48\u6211\u5c31\u662f\u505a\u4e0d\u5230\u5462\uff1f\uff09 \uff0c\u8bc4\u5224\u5e26\u6765\u66f4\u591a\u7684\u8d1f\u9762\u611f\u53d7\uff0c\u6709\u65f6\u4f1a\u4ea7\u751f\u53cd\u6548\u679c\uff0c\u8ba9\u6211\u4eec\u6297\u62d2\u300c\u5373\u65f6\u542f\u52a8\u300d\uff0c\u6297\u62d2\u5f00\u59cb\u4e0b\u4e00\u4e2a\u756a\u8304\u3002</p> <p>\u8003\u5b98\u89c6\u89d2</p> <p>\u6211\u4eec\u81ea\u5df1\u6765\u5f53\u8003\u5b98\uff0c\u8ba9\u300c\u4e0d\u540c\u7684\u505a\u6cd5\u300d\u5f53\u8003\u751f\uff0c\u770b\u770b\u5b83\u4eec\u90fd\u6709\u4f55\u8868\u73b0\uff0c\u54ea\u4e9b\u80fd\u5e26\u6765\u66f4\u597d\u7684\u7ed3\u679c\u3002</p> <p>\u628a\u8fd9\u79cd\u300c\u8003\u5b98\u89c6\u89d2\u300d\uff0c\u53ef\u8fd0\u7528\u5728\u591a\u79cd\u5b66\u4e60\u9886\u57df\u4e2d\u3002</p>"},{"location":"common/02-solve_procrastination/#82-\u68c0\u9a8c\u62d6\u5ef6\u884c\u4e3a\u56de\u8def","title":"8.2 \u68c0\u9a8c\u62d6\u5ef6\u884c\u4e3a\u56de\u8def","text":"<p>1. \u5149\u660e\u6b63\u5927\u5730\u62d6\u5ef6\uff0c\u89c2\u5bdf\u548c\u8bb0\u5f55</p> <p></p> <p>2. \u5bf9\u65e7\u4e60\u60ef\u8131\u7c89</p> <p>\u5047\u5982\u591a\u6b21\u68c0\u9a8c\u90fd\u53d1\u73b0\u771f\u5b9e\u7ed3\u679c\u8fbe\u4e0d\u5230\u9884\u671f\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u5b83\u300c\u8131\u7c89\u300d\u4e86\u3002</p> <p>\u300c\u795b\u9b45\u300d</p> <p>\u968f\u7740\u65e7\u884c\u4e3a\u7684\u5438\u5f15\u529b\u9010\u6e10\u4e0b\u964d\uff0c\u65e7\u4e60\u60ef\u4f1a\u6162\u6162\u51cf\u5f31\uff0c\u751a\u81f3\u6d88\u5931\u3002</p> <p>Judson Brewer \u7b49\u4eba\u7684\u5e72\u9884\u7814\u7a76\u53d1\u73b0\uff0c\u6b63\u5ff5\u5730\u89c2\u5bdf\u884c\u4e3a\u7ed3\u679c\uff0c\u80fd\u5e2e\u4eba\u677e\u52a8\u8bb8\u591a\u574f\u4e60\u60ef\uff0c\u5305\u62ec\u62bd\u70df\u3001\u60c5\u7eea\u6027\u8fdb\u98df\u3001\u62c5\u5fe7\u6027\u601d\u8003\u7b49\u3002</p> <p>3. \u6301\u7eed\u7ec3\u4e60\u4f1a\u5e26\u6765\u4ec0\u4e48\uff1f</p> <p>\u65e0\u8bba\u54ea\u79cd\u7ed3\u679c\uff0c\u90fd\u662f\u6709\u610f\u4e49\u7684\u3002\u771f\u6027\u62d6\u5ef6\u7684\u5438\u5f15\u529b\u4f1a\u9010\u6e10\u4e0b\u964d\uff0c\u5047\u6027\u62d6\u5ef6\u4e5f\u4e0d\u518d\u90a3\u4e48\u4ee4\u4f60\u70e6\u607c\u3002</p>"},{"location":"common/02-solve_procrastination/#9-day9","title":"9. Day9","text":"<ul> <li>\u9605\u8bfb\uff1a\u7d27\u6025\u9884\u671f\u7ba1\u7406 </li> <li>\u884c\u52a8\uff1a\u589e\u91cf\u5f0f\u4ea4\u4ed8 </li> <li>\u6b63\u5ff5\uff1a\u5728\u884c\u8d70\u4e2d\u89c9\u5bdf\u60c5\u7eea</li> </ul>"},{"location":"common/02-solve_procrastination/#91-\u7d27\u6025\u9884\u671f\u7ba1\u7406","title":"9.1 \u7d27\u6025\u9884\u671f\u7ba1\u7406","text":"<p>1. \u622a\u6b62\u65e5\u671f\u4e34\u8fd1\u4f1a\u53d1\u751f\u4ec0\u4e48</p> <ul> <li>\u62d6\u5ef6\u884c\u4e3a\u53ef\u80fd\u5e26\u6765\u6700\u7cdf\u7cd5\u7684\u540e\u679c\u662f\uff0c\u6211\u4eec\u5bf9\u81ea\u5df1\u6216\u5bf9\u522b\u4eba\u627f\u8bfa\u4e86\u4e00\u4ef6\u4e8b\uff0c\u4f46\u5374\u65e0\u6cd5\u5982\u671f\u5b8c\u6210</li> <li>\u62d6\u5ef6\u4eba\u7fa4\u5728\u622a\u6b62\u65e5\u671f\u524d\u8868\u73b0\u5f97\u4e24\u6781\u5316<ul> <li>\u8981\u4e48\u75af\u72c2\u5de5\u4f5c\uff0c\u900f\u652f\u81ea\u5df1\u7684\u8eab\u4f53\u72b6\u6001\uff0c\u5bfc\u81f4\u4ea4\u4ed8\u4efb\u52a1\u540e\u4e00\u8e76\u4e0d\u632f</li> <li>\u8981\u4e48\u5e72\u8106\u653e\u5f03\uff0c\u5e76\u4e3a\u6b64\u627f\u53d7\u635f\u5931\u548c\u5185\u5fc3\u7684\u714e\u71ac</li> </ul> </li> </ul> <p>\u5728\u622a\u6b62\u65e5\u671f\u4e34\u8fd1\uff0c\u800c\u6211\u4eec\u53c8\u5f88\u96be\u4ea4\u4ed8\u5de5\u4f5c\u65f6\uff0c\u9700\u8981\u4e00\u4e9b\u66f4\u5e73\u548c\u7684\u65b9\u5f0f\uff0c\u6765\u8ba9\u81ea\u5df1\u4e0d\u90a3\u4e48\u75db\u82e6\u5730\u9762\u5bf9\u622a\u6b62\u65e5\u671f\u3002</p> <p>2. \u5982\u4f55\u7d27\u6025\u9884\u671f\u7ba1\u7406\uff1f</p> <p>\u7d27\u6025\u9884\u671f\u7ba1\u7406</p> <p>\u5373\u5f53\u4f60\u610f\u8bc6\u5230\u81ea\u5df1\u6709\u8f83\u5927\u6982\u7387\u5c06\u8981\u5931\u7ea6\u65f6\uff0c\u901a\u8fc7\u8bda\u6073\u6c9f\u901a\uff0c\u8ba9\u5229\u76ca\u76f8\u5173\u65b9\u77e5\u9053\u5f53\u524d\u7684\u5904\u5883\u548c\u53ef\u80fd\u53d1\u751f\u7684\u98ce\u9669\uff0c\u4ee5\u4fbf ta \u4eec\u80fd\u53ca\u65f6\u8c03\u6574\u5e94\u5bf9\uff0c\u5c06\u6574\u4f53\u7684\u635f\u5931\u964d\u5230\u6700\u4f4e\u3002</p> <p>\u6bcf\u4e2a\u4eba\u90fd\u6709\u53ef\u80fd\u9047\u5230\u7c7b\u4f3c\u7684\u60c5\u51b5\u3002\u6211\u4eec\u65e0\u6cd5\u51c6\u786e\u9884\u77e5\u672a\u6765\u7684\u60c5\u51b5\uff0c\u5f88\u591a\u56e0\u7d20\u4f1a\u5f71\u54cd\u5230\u63d0\u524d\u7684\u7ea6\u5b9a\uff1a</p> <ul> <li>\u6211\u4eec\u53ef\u80fd\u5728\u6700\u5f00\u59cb\u65f6\u4f4e\u4f30\u4e86\u5b83\u7684\u96be\u5ea6</li> <li>\u6216\u8005\u5728\u524d\u671f\u6c9f\u901a\u4e2d\u627f\u8bfa\u4e86\u592a\u591a\u4e0d\u8be5\u7531\u6211\u4eec\u505a/\u65e0\u6cd5\u505a\u5230\u7684\u4e8b\u60c5</li> <li>\u6216\u8005\u906d\u9047\u4e00\u4e9b\u610f\u5916\u5f71\u54cd\u5230\u4e86\u5de5\u4f5c\u7684\u72b6\u6001</li> </ul> <p>3. \u7559\u610f\u8ff9\u8c61\uff0c\u53ca\u65f6\u8bc6\u522b\u7d27\u6025\u6027</p> <p>\u4e0d\u7ba1\u56e0\u4e3a\u54ea\u79cd\u539f\u56e0\uff0c\u6211\u4eec\u90fd\u4e0d\u662f\u5728\u5230\u8fbe\u622a\u6b62\u65e5\u671f\u90a3\u4e00\u523b\uff0c\u624d\u53d1\u73b0\u81ea\u5df1\u6839\u672c\u65e0\u6cd5\u6309\u65f6\u5b8c\u6210\u4efb\u52a1\u3002</p> <p>\u8d8a\u662f\u80fd\u53ca\u65e9\u5730\u8bc6\u522b\u7d27\u6025\u6027\uff0c\u505a\u51fa\u6c9f\u901a\uff0c\u7559\u7ed9\u81ea\u5df1\u7075\u6d3b\u5e94\u5bf9\u7684\u7a7a\u95f4\u5c31\u8d8a\u5927\u3002</p> <p>\u7d27\u6025\u9884\u671f\u7ba1\u7406\u6700\u91cd\u8981\u7684\u529f\u80fd\uff0c\u662f\u901a\u8fc7\u91cd\u65b0\u534f\u5546\uff0c\u5efa\u7acb\u65b0\u7684\u7ea6\u5b9a\u3002 </p>"},{"location":"common/02-solve_procrastination/#92-\u589e\u91cf\u5f0f\u4ea4\u4ed8","title":"9.2 \u589e\u91cf\u5f0f\u4ea4\u4ed8","text":"<p>1. \u5982\u4f55\u589e\u91cf\u4ea4\u4ed8</p> <p>\u589e\u91cf\u4ea4\u4ed8\u7684\u64cd\u4f5c</p> <ol> <li> <p>\u628a\u4efb\u52a1\u62c6\u5206\uff0c\u5148\u4ea4\u4ed8\u6838\u5fc3\u5185\u5bb9\uff0c\u7136\u540e\u5206\u6279\u4ea4\u4ed8\u4f59\u4e0b\u5185\u5bb9\u3002</p> </li> <li> <p>\u5728\u6700\u91cd\u8981\u7684\u622a\u6b62\u65e5\u671f\u524d\uff0c\u5148\u4ea4\u4ed8\u6838\u5fc3\u5185\u5bb9\u5c31\u591f\u4e86\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u53ef\u4ee5\u66f4\u52a0\u7075\u6d3b\u5730\u9646\u7eed\u4ea4\u4ed8\u3002</p> </li> </ol> <p>2. \u589e\u91cf\u5f0f\u4ea4\u4ed8\u7684\u597d\u5904\u6709\u5f88\u591a</p> <ul> <li>\u80fd\u7f13\u89e3\u5185\u5fc3\u7684\u538b\u529b </li> <li>\u53ef\u80fd\u6709\u8d85\u51fa\u9884\u60f3\u7684\u6536\u83b7 </li> <li>\u6709\u52a9\u4e8e\u7ef4\u62a4\u4fe1\u4efb\uff0c\u5e2e\u52a9\u534f\u5546</li> </ul>"},{"location":"common/02-solve_procrastination/#10-day10","title":"10. Day10","text":"<ul> <li>\u9605\u8bfb\uff1a\u6b63\u5ff5\u5730\u505a\u756a\u8304 </li> <li>\u884c\u52a8\uff1a\u79cd\u4e00\u4e2a\u9ad8\u8d28\u91cf\u7684\u756a\u8304 </li> <li>\u6b63\u5ff5\uff1a\u5728\u884c\u8d70\u4e2d\u5de9\u56fa\u4e0e\u5f53\u4e0b\u7684\u8fde\u63a5</li> </ul>"},{"location":"common/02-solve_procrastination/#101-\u9605\u8bfb\u6b63\u5ff5\u5730\u505a\u756a\u8304","title":"10.1 \u9605\u8bfb\uff1a\u6b63\u5ff5\u5730\u505a\u756a\u8304","text":"<p>1. \u5982\u4f55\u7528\u6b63\u5ff5\u7684\u65b9\u5f0f\u5e94\u5bf9\u6253\u6270\uff1f</p> <p>\u6838\u5fc3\u64cd\u4f5c</p> <p>\u610f\u8bc6\u5230\u8d70\u795e\u4e86\uff0c\u628a\u6ce8\u610f\u529b\u62c9\u56de\u6765\uff0c\u5373\u628a\u6ce8\u610f\u529b\u62c9\u56de\u5f53\u524d\u756a\u8304\u6b63\u5728\u505a\u7684\u4e8b\u60c5\u4e0a</p> <p>\u5728\u6bcf\u4e00\u6b21\u610f\u8bc6\u5230\u81ea\u5df1\u8d70\u795e\u65f6\uff0c\u53ef\u7528\u6b63\u5ff5\u7684\u6001\u5ea6\uff0c\u300c\u6e29\u67d4\u800c\u575a\u5b9a\u300d\u5730\u628a\u6ce8\u610f\u529b\u62c9\u56de\u6765\uff1a</p> <ul> <li>\u6e29\u67d4\u610f\u5473\u7740\u4e0d\u5fc5\u5f3a\u6c42\u81ea\u5df1\u4e0d\u8d70\u795e\uff0c\u4e5f\u4e0d\u5fc5\u8d23\u5907\u81ea\u5df1\u8d70\u795e\uff0c\u53ea\u9700\u8981\u610f\u8bc6\u5230\uff0c\u5e76\u4e14\u62c9\u81ea\u5df1\u4e00\u628a </li> <li>\u575a\u5b9a\u610f\u5473\u7740\u4e0d\u7ba1\u8ba9\u4f60\u8d70\u795e\u7684\u90a3\u4ef6\u4e8b\u591a\u4e48\u6709\u5438\u5f15\u529b\uff0c\u591a\u4e48\u6709\u8da3\uff0c\u90fd\u8981\u63d0\u9192\u81ea\u5df1\uff0c\u56de\u6765\u505a\u756a\u8304</li> </ul> <p>\u6301\u7eed\u6b63\u5ff5\u5730\u505a\u756a\u8304\uff0c\u5c06\u7ed9\u4f60\u7684\u884c\u52a8\u5e26\u6765\u4ee5\u4e0b\u6539\u5584\uff1a</p> <ul> <li>\u589e\u8fdb\u756a\u8304\u7684\u8fde\u8d2f\u6027\u548c\u8d28\u91cf\uff0c\u5c3d\u53ef\u80fd\u8df5\u884c\u81ea\u5df1\u7684\u627f\u8bfa\u3002\u63d0\u5347\u5bf9\u756a\u8304\u7684\u6ee1\u610f\u548c\u8ba4\u53ef\u7a0b\u5ea6</li> <li>\u610f\u8bc6\u5230\u81ea\u5df1\u5e94\u5bf9\u6253\u6270\u7684\u52aa\u529b\u3002\u65e0\u8bba\u4f60\u8fd9\u5929\u6709\u6ca1\u6709\u8fbe\u5230\u9884\u671f\uff0c\u90fd\u80fd\u5bf9\u5904\u5883\u62b1\u6709\u66f4\u771f\u5b9e\u7684\u7406\u89e3\uff0c\u5bf9\u81ea\u5df1\u7684\u52aa\u529b\u62b1\u6709\u66f4\u5145\u5206\u7684\u8ba4\u53ef\uff0c\u53cb\u5584\u6216\u60b2\u60af\u5730\u5bf9\u5f85\u81ea\u5df1</li> <li>\u9006\u8f6c\u4f9d\u8d56\u6027\uff0c\u6539\u53d8\u81ea\u5df1\u4e0e\u6253\u6270\u7684\u5173\u7cfb\u3002\u4f60\u7684\u72b6\u6001\u4e0d\u518d\u4f9d\u8d56\u4e8e\u6253\u6270\u7684\u591a\u5be1\u3002\u800c\u662f\u53cd\u8fc7\u6765\uff0c\u6253\u6270\u80fd\u5426\u88ab\u653e\u884c\uff0c\u53d6\u51b3\u4e8e\u81ea\u5df1\u7684\u9009\u62e9</li> </ul> <p>2. \u6301\u7eed\u7ec3\u4e60\u6b63\u5ff5\uff0c\u80fd\u591f\u83b7\u76ca\u66f4\u591a</p> <p>\u6b63\u5ff5\u7ec3\u4e60\u53ef\u4ee5\u5728\u4e09\u4e2a\u65b9\u9762\u5e2e\u52a9\u4f60\u505a\u597d\u5e94\u5bf9\uff1a</p> <ul> <li>\u57f9\u517b\u5bf9\u8d70\u795e\u7684\u89c9\u77e5</li> <li>\u5728\u89c9\u77e5\u7684\u540c\u65f6\uff0c\u4fdd\u6301\u975e\u8bc4\u5224\u7684\u6001\u5ea6</li> <li>\u66f4\u52a0\u660e\u786e\u81ea\u5df1\u884c\u52a8\u7684\u610f\u56fe</li> </ul>"},{"location":"common/02-solve_procrastination/#102-\u79cd\u4e00\u4e2a\u9ad8\u8d28\u91cf\u7684\u756a\u8304","title":"10.2 \u79cd\u4e00\u4e2a\u9ad8\u8d28\u91cf\u7684\u756a\u8304","text":"<p>\u756a\u8304\u4e2d\u7684\u6253\u6270\u5206\u4e3a\u4e24\u7c7b\uff1a</p> <ul> <li>\u5185\u90e8\u6253\u6270\u66f4\u63a5\u8fd1\u8d70\u795e\uff0c\u6e90\u4e8e\u81ea\u5df1\u5185\u5fc3\u7684\u51b2\u52a8\u3001\u60f3\u6cd5\u548c\u611f\u53d7\u3002\u4f8b\u5982\u4e2d\u9014\u60f3\u5403\u4e1c\u897f\u3001\u60f3\u770b\u624b\u673a\uff0c\u6216\u8005\u60f3\u5148\u5b8c\u6210\u5176\u5b83\u6d3b\u52a8</li> <li>\u5916\u90e8\u6253\u6270\u5219\u6e90\u4e8e\u5916\u754c\u7684\u5404\u79cd\u4e92\u52a8\u548c\u4fe1\u606f\uff0c\u4f8b\u5982\u540c\u4e8b\u7684\u9080\u8bf7\u548c\u8054\u7edc</li> </ul> <p>\u8981\u505a\u7684\u5c31\u662f\u610f\u8bc6\u5230\u8fd9\u662f\u6253\u6270\uff0c\u7b80\u5355\u5730\u8bb0\u5f55\uff0c\u5e76\u8ba9\u4f60\u7684\u6ce8\u610f\u529b\u56de\u5230\u5f53\u524d\u756a\u8304\u4e0a\u6765\u3002</p> <p>1. \u5e94\u5bf9\u6253\u6270\uff1a\u628a\u7403\u4f20\u7ed9\u300c\u961f\u53cb\u300d</p> <p>\u756a\u8304\u5de5\u4f5c\u6cd5\u5904\u7406\u6253\u6270\u7684\u65b9\u5f0f</p> <p>\u7b2c\u4e00\u65f6\u95f4\u300c\u628a\u7403\u4f20\u51fa\u53bb\u300d\u3002</p> <ul> <li>\u961f\u53cb\u4e00\uff1a\u8ba1\u5212\u5916\u7d27\u6025\u6d3b\u52a8<ul> <li>\u4e34\u65f6\u60f3\u5230\u6216\u9047\u5230\u7d27\u6025\u4efb\u52a1\uff0c\u5fc5\u987b\u8981\u5728\u4eca\u5929\u5b8c\u6210\uff0c\u628a\u5b83\u4eec\u5217\u5728\u300c\u8ba1\u5212\u5916\u7d27\u6025\u300d\u680f\u76ee\u4e2d\u3002\u7b49\u8fd9\u4e2a\u756a\u8304\u7ed3\u675f\u540e\uff0c\u518d\u51b3\u5b9a\u5982\u4f55\u5904\u7f6e\u5b83\u4eec</li> </ul> </li> <li>\u961f\u53cb\u4e8c\uff1a\u6d3b\u52a8\u5907\u5fd8\u6e05\u5355<ul> <li>\u8bb0\u5f55\u90a3\u4e9b\u4e0d\u4e00\u5b9a\u8981\u4eca\u5929\u505a\uff0c\u4f46\u4f60\u53ef\u80fd\u4f1a\u62c5\u5fc3\u81ea\u5df1\u5fd8\u6389\u7684\u4e8b\u60c5 </li> </ul> </li> </ul> <p>2. \u89c9\u5bdf\u5e76\u8bb0\u5f55\u300c\u6253\u6270\u300d</p> <p>\u60f3\u8981\u66f4\u53ca\u65f6\u5730\u610f\u8bc6\u5230\u6253\u6270\uff0c\u9700\u8981\u63d0\u9ad8\u884c\u52a8\u4e2d\u4fdd\u6301\u6709\u610f\u8bc6\u89c9\u5bdf\u7684\u80fd\u529b\u3002</p> <ul> <li>\u53ef\u901a\u8fc7\u6b63\u5ff5\u7ec3\u4e60\u6765\u957f\u671f\u57f9\u517b\u8fd9\u9879\u80fd\u529b</li> <li>\u756a\u8304\u5de5\u4f5c\u6cd5\u672c\u8eab\u4e5f\u53ef\u4ee5\u501f\u52a9\u53ef\u89c6\u5316\u8bb0\u5f55\uff0c\u6765\u89c9\u5bdf\u6253\u6270</li> </ul> <p>\u5982\u679c\u4f60\u610f\u8bc6\u5230\u81ea\u5df1\u5728\u756a\u8304\u4e2d\u8d70\u795e\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u4e0d\u7ba1\u662f\u5206\u5fc3\u7684\u60f3\u6cd5\uff0c\u8fd8\u662f\u53bb\u505a\u4e86\u522b\u7684\u4e8b\u60c5\uff0c\u6216\u8005\u88ab\u4eba\u7a81\u7136\u6253\u65ad\uff0c\u6bcf\u78b0\u5230\u4e00\u6b21\u6253\u6270\uff0c\u5c31\u5728\u4f60\u505a\u4e00\u4e2a\u8bb0\u5f55\uff0c\u5feb\u901f\u8bb0\u5f55\u540e\uff0c\u9a6c\u4e0a\u56de\u5f52\u5f53\u524d\u7684\u6d3b\u52a8\uff0c\u76f4\u5230\u8ba1\u65f6\u7ed3\u675f\u3002</p> <p>3. \u7528\u6b63\u5ff5\u7ec3\u4e60\u7684\u5fc3\u6001\uff0c\u505a\u597d\u4e00\u4e2a\u756a\u8304</p> <ul> <li> <p>\u7ec3\u4e60\u7684\u5173\u952e\u662f\uff0c\u5728\u884c\u52a8\u4e2d\u4fdd\u6301\u6709\u610f\u8bc6\u7684\u89c9\u5bdf\uff0c\u5141\u8bb8\u81ea\u5df1\u8d70\u795e\uff0c\u5e76\u5c1d\u8bd5\u628a\u81ea\u5df1\u62c9\u56de\u6765\u3002\u8fd9\u662f\u975e\u5e38\u6709\u76ca\u7684\u7ec3\u4e60</p> </li> <li> <p>\u4e0d\u9700\u8981\u6bcf\u4e2a\u756a\u8304\u90fd\u8fd9\u6837\u3002\u6bcf\u5929\u6709\u610f\u8bc6\u5730\u7528\u8fd9\u79cd\u65b9\u5f0f\u79cd\u51fa\u4e00\u4e2a\u756a\u8304\u5c31\u591f\u4e86</p> </li> </ul>"},{"location":"common/02-solve_procrastination/#11-day11","title":"11. Day11","text":"<ul> <li>\u9605\u8bfb\uff1a\u8017\u7aed\u6f0f\u6597\u4e0e\u81ea\u6211\u7167\u987e </li> <li>\u884c\u52a8\uff1a\u89c2\u5bdf\u6ecb\u517b\u4e0e\u6d88\u8017\u6d3b\u52a8 </li> <li>\u6b63\u5ff5\uff1a\u4ece\u98ce\u666f\u4e2d\u83b7\u5f97\u6ecb\u517b</li> </ul>"},{"location":"common/02-solve_procrastination/#111-\u8017\u7aed\u6f0f\u6597\u4e0e\u81ea\u6211\u7167\u987e","title":"11.1 \u8017\u7aed\u6f0f\u6597\u4e0e\u81ea\u6211\u7167\u987e","text":"<p>\u4f60\u662f\u4ece\u4ec0\u4e48\u65f6\u5019\u4e0d\u518d\u6253\u7403\u7684\uff1f</p> <p>1. \u300c\u8017\u7aed\u6f0f\u6597\u300d\u7684\u5f62\u6210</p> <p>\u4e60\u60ef\u62d6\u5ef6\u5e38\u5e38\u5904\u4e8e\u4e00\u4e2a\u300c\u8017\u7aed\u6f0f\u6597\u300d\u4e4b\u4e2d\u3002</p> <p>\u968f\u7740\u5806\u79ef\u7684\u4e8b\u60c5\u8d8a\u6765\u8d8a\u591a\uff0c\u4f60\u7684\u7cbe\u529b\u8d8a\u6765\u8d8a\u5c11\uff0c\u56e0\u6b64\u4e0d\u5f97\u4e0d\u653e\u5f03\u4e00\u4e9b\u300c\u4e0d\u91cd\u8981\u300d\u7684\u4e8b\u60c5\uff0c\u5f3a\u8feb\u628a\u81ea\u5df1\u628a\u6ce8\u610f\u529b\u653e\u5728\u300c\u66f4\u91cd\u8981\u300d\u7684\u4e8b\u60c5\u4e0a\u3002</p> <p>\u5728\u4e0d\u4ed4\u7ec6\u5206\u8fa8\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u91cd\u8981\u6027\u7684\u5224\u65ad\u6807\u51c6\u5f80\u5f80\u53d6\u51b3\u4e8e\u81ea\u5df1\u662f\u5426\u62e5\u6709\u9009\u62e9\u6743\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u7cbe\u529b\u6b63\u662f\u9760\u7740\u8fd9\u4e9b\u6240\u8c13\u300c\u4e0d\u91cd\u8981\u300d\u7684\u4e8b\u60c5\u5f97\u5230\u6ecb\u517b\uff0c\u8fd9\u6837\u624d\u6709\u8db3\u591f\u7684\u80fd\u91cf\u53bb\u505a\u90a3\u4e9b\u6709\u538b\u529b\u7684\u4e8b\u3002</p> <p>\u53ef\u80fd\u82e5\u4f60\u4e0d\u4e3b\u52a8\u53bb\u83b7\u5f97\u6ecb\u517b\uff0c\u4f60\u7684\u8eab\u4f53\u4f1a\u81ea\u5df1\u5c1d\u8bd5\u4e00\u4e9b\u6ca1\u90a3\u4e48\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\u6f2b\u65e0\u76ee\u7684\u5730\u5237\u624b\u673a\uff0c\u6bd4\u5982\u8eba\u5728\u5e8a\u4e0a\u4ec0\u4e48\u4e5f\u4e0d\u5e72\u3002\u4f46\u662f\u65f6\u95f4\u4e00\u6837\u7528\u6389\u4e86\uff0c\u72b6\u6001\u5374\u6ca1\u6709\u4efb\u4f55\u6539\u5584\uff0c\u7531\u6b64\u8fdb\u5165\u6076\u6027\u5faa\u73af\u2026\u2026</p> <p>\u60f3\u8981\u6301\u7eed\u5730\u884c\u52a8\uff0c\u9700\u8981\u8ba9\u6211\u4eec\u7684\u8eab\u4f53\u5728\u6ecb\u517b\u548c\u6d88\u8017\u4e2d\u53d6\u5f97\u5e73\u8861\u3002</p> <p>2. \u7528\u81ea\u6211\u7167\u987e\u5e94\u5bf9\u8017\u7aed</p> <p>\u756a\u8304\u505a\u5230\u4e00\u5b9a\u9636\u6bb5\uff0c\u62fc\u7684\u5c31\u662f\u4f53\u529b\u4e86\u3002</p> <p>\u81ea\u6211\u7167\u987e\u756a\u8304\u548c\u756a\u8304\u95f4\u7684\u4f11\u606f\u7684\u533a\u522b</p> <p>\u4f11\u606f\u65f6\u95f4\u6ca1\u6709\u8ba1\u5212\u548c\u5b89\u6392\uff0c\u800c\u81ea\u6211\u7167\u987e\u756a\u8304\u5219\u662f\u5e26\u7740\u660e\u786e\u7684\u76ee\u7684\uff0c\u4e13\u95e8\u53bb\u505a\u4e00\u4ef6\u4f60\u81ea\u5df1\u60f3\u8981\u505a\u7684\u6d3b\u52a8\uff0c\u8fd9\u4e2a\u6d3b\u52a8\u5bf9\u4f60\u800c\u8a00\u5e76\u4e0d\u662f\u6d88\u8017\uff0c\u800c\u662f\u5728\u8865\u5145\u548c\u6062\u590d\u80fd\u91cf\u3002</p> <p>\u81ea\u6211\u7167\u987e\u4e3a\u4ec0\u4e48\u8981\u653e\u5728\u756a\u8304\u91cc</p> <p>\u88c5\u5230\u756a\u8304\u91cc\u9762\u6709\u4e24\u4e2a\u597d\u5904\uff1a</p> <ul> <li>\u5ef6\u7eed\u756a\u8304\u7684\u72b6\u6001\uff0c\u5c31\u50cf\u7535\u8111\u7684\u5f85\u673a\uff0c\u4e0b\u4e00\u4e2a\u756a\u8304\u53ef\u4ee5\u968f\u65f6\u5207\u6362\u56de\u5de5\u4f5c\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u5728\u627e\u56de\u72b6\u6001\u4e0a\u803d\u8bef\u592a\u591a\u65f6\u95f4</li> <li>\u756a\u8304\u7684\u65f6\u95f4\u9650\u5236\uff0c\u53ef\u4ee5\u8ba9\u4f60\u6709\u610f\u8bc6\u5730\u53bb\u4f7f\u7528\u65f6\u95f4</li> </ul> <p>\u5982\u679c\u53d1\u73b0\u81ea\u5df1\u4eca\u5929\u72b6\u6001\u4e0d\u597d\uff0c\u5f88\u96be\u5f00\u59cb\u7b2c\u4e00\u4e2a\u756a\u8304\uff0c\u90a3\u4e48\u4ece\u81ea\u6211\u7167\u987e\u756a\u8304\u5f00\u59cb\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u660e\u667a\u7684\u9009\u62e9\u3002</p> <p>\u5982\u4f55\u81ea\u6211\u7167\u987e</p> <p>\u81ea\u6211\u7167\u987e\u662f\u9700\u8981\u89c2\u5bdf\u548c\u63a2\u7d22\u7684\uff0c\u5c1d\u8bd5\u4e0d\u540c\u7c7b\u578b\u7684\u6d3b\u52a8\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4ed4\u7ec6\u4f53\u9a8c\uff0c\u89c2\u5bdf\u81ea\u5df1\u7684\u611f\u53d7\uff0c\u6162\u6162\u5730\u4f60\u4f1a\u627e\u5230\u611f\u89c9\u3002</p> <p>\u81ea\u6211\u7167\u987e\u5c0f\u6280\u5de7</p> <ol> <li>\u6d3b\u52a8\u8eab\u4f53\uff0c\u4f11\u606f\u5927\u8111</li> <li>\u653e\u677e\u7684\u5173\u952e\u662f\u5173\u6ce8\u8eab\u4f53\u611f\u89c9</li> <li>\u6ee1\u8db3\u8eab\u5fc3\u9700\u8981\uff0c\u4f1a\u5e26\u6765\u79ef\u6781\u4f53\u9a8c</li> </ol>"},{"location":"common/02-solve_procrastination/#112-\u89c2\u5bdf\u6ecb\u517b\u4e0e\u6d88\u8017\u6d3b\u52a8","title":"11.2 \u89c2\u5bdf\u6ecb\u517b\u4e0e\u6d88\u8017\u6d3b\u52a8","text":"<p>\u601d\u8003\u4ee5\u4e0b\u95ee\u9898</p> <p>\u5728\u6628\u5929\u4e00\u6574\u5929\u91cc\u9762\uff0c\u4f60\u53c2\u4e0e\u8fc7\u54ea\u4e9b\u6d3b\u52a8\uff1f  \u5176\u4e2d\u5e26\u7ed9\u4f60\u6ecb\u517b\uff0c\u6216\u8005\u8ba9\u4f60\u611f\u5230\u6709\u80fd\u91cf\uff0c\u6216\u8005\u6d3b\u529b\u6062\u590d\u7684\u6d3b\u52a8\u6709\u54ea\u4e9b\uff1f  \u5176\u4e2d\u8ba9\u4f60\u611f\u53d7\u5230\u6d88\u8017\uff0c\u505a\u5b8c\u4e4b\u540e\u66f4\u52a0\u75b2\u60eb\uff0c\u6216\u8005\u4e0d\u60c5\u613f\u7684\u6d3b\u52a8\u6709\u54ea\u4e9b\uff1f</p> <p>1. \u5236\u4f5c\u81ea\u6211\u7167\u987e\u6e05\u5355</p> <p>\u6bd4\u5982\uff1a</p> <p></p> <p>\u8fd9\u91cc\u7684\u81ea\u6211\u6d3b\u52a8\u53ef\u80fd\u5177\u6709\u4ee5\u4e0b\u7684\u7279\u70b9\uff1a</p> <ul> <li>\u5f88\u7b80\u5355\uff0c\u53ef\u80fd\u4e0d\u592a\u9700\u8981\u7279\u6b8a\u7684\u9053\u5177</li> <li>\u53ef\u80fd\u4e0d\u9700\u8981\u82b1\u8d39\u4f60\u592a\u957f\u7684\u65f6\u95f4\uff0c\u80fd\u5728 15-30 \u5206\u949f\u4e4b\u5185\u5b8c\u6210</li> <li>\u5927\u591a\u6570\u65f6\u5019\uff0c\u4f60\u80fd\u4f53\u9a8c\u5230\u6d3b\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u6216\u8005\u6d3b\u52a8\u7ed3\u675f\u540e\u7684\u6b63\u53cd\u9988</li> </ul>"},{"location":"common/02-solve_procrastination/#12-day12","title":"12. Day12","text":"<ul> <li>\u884c\u52a8\uff1a\u7528\u597d\u5947\u5fc3\u64ac\u52a8\u884c\u52a8 </li> <li>\u6b63\u5ff5\uff1a\u8c03\u7528\u8fdb\u98df\u65f6\u7684\u597d\u5947\u5fc3</li> </ul>"},{"location":"common/02-solve_procrastination/#121-\u7528\u597d\u5947\u5fc3\u64ac\u52a8\u884c\u52a8","title":"12.1 \u7528\u597d\u5947\u5fc3\u64ac\u52a8\u884c\u52a8","text":"<p>\u8fd9\u91cc\u8bf4\u660e\u4e24\u4e2a\u6e29\u548c\u7684\u6280\u5de7\u6765\u5e2e\u52a9\u5e94\u5bf9\u62d6\u5ef6\uff0c\u5176\u5173\u952e\u5c31\u662f\u7528\u6b63\u5ff5\u4e2d\u300c\u597d\u5947\u300d\u7684\u6001\u5ea6\u3002</p> <p>\u6280\u5de7\u4e00\uff1a\u5e26\u7740\u597d\u5947\uff0c\u5373\u65f6\u542f\u52a8</p> <p>\u5177\u4f53\u6b65\u9aa4\uff1a</p> <ul> <li>\u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u5148\u505a\u51fa\u4e00\u4e2a\u51b3\u5b9a</li> <li>\u7b2c\u4e8c\u6b65\uff0c\u8bd5\u7740\u5728\u5fc3\u91cc\u5411\u81ea\u5df1\u63d0\u95ee\uff1a\u300c\u542f\u52a8\u540e\u7684\u611f\u53d7\u4f1a\u662f\u600e\u6837\u7684\u5462\uff1f\u300d</li> <li>\u7b2c\u4e09\u6b65\uff0c\u5e26\u7740\u7591\u95ee\uff0c\u7acb\u523b\u542f\u52a8</li> </ul> <p>\u300c\u770b\u770b\u771f\u5b9e\u7684\u60c5\u51b5\u5230\u5e95\u600e\u6837\uff1f\u300d\uff0c\u8fd9\u5c31\u662f\u4e00\u79cd\u597d\u5947\u7684\u6001\u5ea6\u3002</p> <p>\u6280\u5de7\u4e8c\uff1a\u5e26\u7740\u597d\u5947\uff0c\u7528\u300c\u6d4b\u901f\u6cd5\u300d\u884c\u52a8</p> <p>\u6d4b\u901f\u662f\u4e00\u79cd\u6e29\u548c\u800c\u95f4\u63a5\u7684\u4e13\u6ce8\u7b56\u7565\uff1a</p> <ul> <li>\u8981\u70b9\u662f\u5e26\u7740\u597d\u5947\u5fc3\u5411\u81ea\u5df1\u63d0\u95ee\uff1a\u300c\u5047\u5982\u6211\u7528\u6b63\u5e38\u901f\u5ea6\u6765\u505a\u8fd9\u4ef6\u4e8b\uff0c\u6700\u5feb\u8981\u591a\u4e45\u5b8c\u6210\u5462\uff1f\u300d</li> </ul> <p>\u5173\u952e\u662f\u597d\u5947\uff0c\u5168\u7a0b\u4ee5\u597d\u5947\u6765\u63a8\u52a8\u4f60\u7684\u6d4b\u901f\uff0c\u800c\u4e0d\u662f\u8ba9\u5bf9\u6548\u7387\u672c\u8eab\u7684\u8ffd\u6c42\u63a8\u52a8\u3002</p>"},{"location":"common/02-solve_procrastination/#13-day13","title":"13. Day13","text":"<ul> <li>\u9605\u8bfb\uff1a\u622a\u6b62\u65e5\u671f\u4e3a\u4ec0\u4e48\u662f\u6709\u6548\u7684\uff1f</li> <li>\u884c\u52a8\uff1a\u300c\u91cd\u8981-\u7d27\u6025\u300d\u56db\u8c61\u9650 </li> <li>\u6b63\u5ff5\uff1a\u4e09\u6b65\u56de\u5230\u5f53\u4e0b</li> </ul>"},{"location":"common/02-solve_procrastination/#131-\u622a\u6b62\u65e5\u671f\u4e3a\u4ec0\u4e48\u662f\u6709\u6548\u7684","title":"13.1 \u622a\u6b62\u65e5\u671f\u4e3a\u4ec0\u4e48\u662f\u6709\u6548\u7684","text":"<p>1. \u54ea\u4e9b\u6d3b\u52a8\u4e0d\u5bb9\u6613\u62d6\u5ef6\uff1f</p> <p>\u628a\u751f\u6d3b\u4e2d\u7684\u6d3b\u52a8\u62c6\u5206\u6210\u4e24\u7c7b\uff1a</p> <ul> <li>\u300c\u65e5\u7a0b\u300d\uff1a\u6709\u7ea6\u5b9a\u622a\u6b62\u65e5\u671f\u7684\u6d3b\u52a8<ul> <li>\u5728\u4e0e\u522b\u4eba\u534f\u4f5c\u65f6\uff0c\u7ea6\u5b9a\u65f6\u95f4\u5f62\u6210\u300c\u65e5\u7a0b\u300d\u662f\u4e00\u79cd\u9ad8\u6548\u7684\u65b9\u6cd5</li> <li>\u534f\u4f5c\u8d8a\u590d\u6742\uff0c\u5bf9\u65f6\u95f4\u7684\u7ea6\u5b9a\u6027\u5f80\u5f80\u8d8a\u5f3a</li> </ul> </li> <li>\u300c\u5f85\u529e\u4e8b\u9879\u300d\uff1a\u81ea\u7531\u5b89\u6392\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\uff0c\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f<ul> <li>\u5f85\u529e\u4e8b\u9879\u7684\u63a8\u8fdf\uff0c\u901a\u5e38\u4e0d\u4f1a\u76f4\u63a5\u9020\u6210\u540e\u679c</li> </ul> </li> </ul> <p>2. \u4e3a\u4ec0\u4e48\u622a\u6b62\u65e5\u671f\u80fd\u591f\u63d0\u9ad8\u751f\u4ea7\u529b\uff1f</p> <ul> <li>\u5bf9\u65f6\u95f4\u7684\u5f3a\u4f9d\u8d56\u6027<ul> <li>\u56e0\u4e3a\u65e5\u7a0b\u5bf9\u65f6\u95f4\u7684\u5f3a\u4f9d\u8d56\u6027\uff0c\u4e3a\u6211\u4eec\u7684\u5f85\u529e\u4e8b\u9879\u91cd\u65b0\u505a\u4e86\u6392\u5e8f</li> </ul> </li> <li>\u6d89\u53ca\u534f\u4f5c\u7684\u5f3a\u7ea6\u5b9a\u6027<ul> <li>\u72ec\u81ea\u5de5\u4f5c\u65f6\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u4e3b\u52a8\u8bbe\u7f6e\u65e5\u7a0b\uff0c\u5c31\u66f4\u5bb9\u6613\u62d6\u5ef6</li> </ul> </li> </ul>"},{"location":"common/02-solve_procrastination/#132-\u91cd\u8981-\u7d27\u6025\u56db\u8c61\u9650","title":"13.2 \u300c\u91cd\u8981-\u7d27\u6025\u300d\u56db\u8c61\u9650","text":"<p>1. \u8bc6\u522b\u300c\u7d27\u6025\u6027\u9677\u9631\u300d</p> <p>\u4f5c\u4e3a\u6253\u6270\u51fa\u73b0\u7684\u6d3b\u52a8\uff0c\u5230\u5e95\u6709\u591a\u7d27\u6025\uff1a</p> <ul> <li>\u5217\u5165\u300c\u8ba1\u5212\u5916\u7d27\u6025\u300d\u7684\u6d3b\u52a8<ul> <li>\u6709\u591a\u5c11\u662f\u4f60\u7ed3\u675f\u4e86\u5f53\u524d\u756a\u8304\u540e\uff0c\u4f1a\u9a6c\u4e0a\u53bb\u505a\u7684</li> <li>\u6709\u591a\u5c11\u662f\u7ed3\u675f\u756a\u8304\u4e4b\u540e\uff0c\u4f60\u53d1\u73b0\u4e0d\u7528\u7ba1\u5b83\uff0c\u53ef\u4ee5\u5148\u505a\u522b\u7684\u5de5\u4f5c\uff0c\u7b49\u4ee5\u540e\u518d\u8bf4</li> </ul> </li> <li>\u5217\u5165\u300c\u6d3b\u52a8\u5907\u5fd8\u300d\u7684\u6d3b\u52a8<ul> <li>\u6709\u591a\u5c11\u662f\u4f60\u771f\u7684\u4f1a\u5728\u8fd1\u671f\u5185\u505a\u7684</li> <li>\u6709\u591a\u5c11\u53ef\u80fd\u4f1a\u4e00\u76f4\u8eba\u5728\u90a3\u4e00\u9875\u7eb8\u4e0a\uff0c\u76f4\u5230\u4e0b\u6b21\u88ab\u60f3\u8d77</li> </ul> </li> </ul> <p>\u4ece\u6d3b\u52a8\u7684\u300c\u7d27\u6025\u6027\u300d\u548c\u300c\u91cd\u8981\u6027\u300d\u4e24\u4e2a\u89d2\u5ea6\u51fa\u53d1\uff0c\u6765\u81ea\u5df1\u6392\u5217\u5f85\u529e\u4e8b\u9879\u7684\u4f18\u5148\u7ea7\u3002</p> <p>2. \u300c\u91cd\u8981-\u7d27\u6025\u300d\u56db\u8c61\u9650</p> <ul> <li>\u91cd\u8981\u4e14\u7d27\u6025\u7684</li> <li>\u91cd\u8981\u4f46\u4e0d\u7d27\u6025\u7684</li> <li>\u4e0d\u91cd\u8981\u4f46\u7d27\u6025\u7684</li> <li>\u4e0d\u91cd\u8981\u4e5f\u4e0d\u7d27\u6025\u7684</li> </ul> <p>\u4e0d\u540c\u8c61\u9650\u7684\u6d3b\u52a8\u9002\u5408\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f</p> <ol> <li>\u91cd\u8981\u7684\u6d3b\u52a8\u4f18\u5148\u5904\u7406</li> </ol> <p>\u82e5\u751f\u6d3b\u4e2d\u90fd\u662f\u91cd\u8981\u53c8\u7d27\u6025\u7684\u4e8b\u4ef6\uff0c\u53ef\u80fd\u610f\u5473\u7740\u4f60\u5bf9\u65f6\u95f4\u7684\u4f7f\u7528\u51fa\u4e86\u5f88\u5927\u95ee\u9898\u3002</p> <p>\u4e00\u4e2a\u6539\u8fdb\u7684\u65b9\u5411\u662f\u786e\u4fdd\u5927\u591a\u6570\u65f6\u95f4\u653e\u5728\u5e73\u7a33\u63a8\u8fdb\u91cd\u8981\u4f46\u4e0d\u7d27\u6025\u7684\u6d3b\u52a8\u4e0a\uff1a</p> <ul> <li>\u5c3d\u53ef\u80fd\u5728\u91cd\u8981\u6d3b\u52a8\u53d8\u7d27\u6025\u4e4b\u524d\uff0c\u63d0\u524d\u5f00\u59cb\u884c\u52a8</li> </ul> <ol> <li>\u4e0d\u91cd\u8981\u7684\u6d3b\u52a8\u51cf\u5c11\u6295\u5165</li> </ol> <p>\u4e0d\u91cd\u8981\u4f46\u7d27\u6025\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5404\u79cd\u529e\u6cd5\uff0c\u5feb\u901f\u5b8c\u6210\uff0c\u4e0d\u8981\u82db\u6c42\u5b8c\u7f8e\u3002</p> <p>\u81f3\u4e8e\u4e0d\u91cd\u8981\u53c8\u4e0d\u7d27\u6025\u7684\u4e8b\uff0c\u539f\u5219\u4e0a\u5c3d\u91cf\u5c11\u505a\u6216\u4e0d\u505a\u3002</p> <p>\u91cd\u8981\u6027\u8981\u4ed4\u7ec6\u5206\u8fa8\uff0c\u56e0\u4e3a\u5f88\u591a\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u9700\u8981\u6f2b\u957f\u7684\u65f6\u95f4\u79ef\u7d2f\uff0c\u624d\u4f1a\u5bf9\u6211\u4eec\u7684\u751f\u6d3b\u771f\u6b63\u4ea7\u751f\u5f71\u54cd\uff1a</p> <ul> <li>\u5e76\u975e\u53ea\u6709\u5de5\u4f5c\u662f\u91cd\u8981\u7684\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u4eba\u6216\u4e8b\u90fd\u6709\u53ef\u80fd\u662f\u91cd\u8981\u7684</li> <li>\u90a3\u4e9b\u5e2e\u52a9\u6211\u4eec\u7ef4\u6301\u72b6\u6001\u3001\u4fdd\u6301\u7cbe\u529b\u548c\u6548\u7387\u7684\u6d3b\u52a8\uff08\u4f8b\u5982\u8eab\u4f53\u953b\u70bc\u3001\u6b63\u5ff5\u3001\u81ea\u6211\u7167\u987e\uff09\u4e5f\u662f\u91cd\u8981\u7684</li> </ul>"},{"location":"common/02-solve_procrastination/#14-day14","title":"14. Day14","text":"<ul> <li>\u884c\u52a8\uff1a\u7b2c\u4e8c\u9636\u6bb5\u56de\u987e\u53cd\u601d </li> <li>\u6b63\u5ff5\uff1a\u56de\u5e94\u8eab\u5fc3\u98a0\u7c38</li> </ul>"},{"location":"common/02-solve_procrastination/#141-\u7b2c\u4e8c\u9636\u6bb5\u56de\u987e","title":"14.1 \u7b2c\u4e8c\u9636\u6bb5\u56de\u987e","text":"<p>1. \u4e09\u6761\u91cd\u8981\u7ebf\u7d22</p> \u7ebf\u7d22\u4e00\uff1a\u4e60\u60ef\u6539\u53d8\u7ebf\u7d22\u4e8c\uff1a\u6025\u6027\u62d6\u5ef6\u5e94\u5bf9\u7ebf\u7d22\u4e09\uff1a\u756a\u8304\u5de5\u4f5c\u6cd5 <ul> <li>\u4e60\u60ef\u6539\u53d8\uff1a\u901a\u8fc7\u8bc6\u522b\u884c\u4e3a\u56de\u8def\u56fe\uff0c\u6709\u610f\u8bc6\u5730\u8c03\u6574\u884c\u52a8\uff0c\u7528\u65b0\u884c\u4e3a\u4e60\u60ef\u66ff\u4ee3\u65e7\u884c\u4e3a\u4e60\u60ef\u7684\u8fc7\u7a0b</li> </ul> <p>\u300c\u89e6\u53d1\u7ebf\u7d22-\u884c\u4e3a-\u9884\u671f\u5956\u8d4f-&gt;\u4e8b\u5b9e\u68c0\u9a8c\uff08\u89c2\u5bdf\u884c\u4e3a\u7684\u5b9e\u9645\u7ed3\u679c\uff09\u300d</p> <ul> <li>\u901a\u8fc7\u5b9e\u9a8c\u53bb\u89c2\u5bdf\uff0c\u884c\u4e3a\u7684\u5b9e\u9645\u7ed3\u679c\u662f\u5426\u548c\u9884\u671f\u7684\u5956\u8d4f\u4e00\u81f4\uff0c\u4ece\u800c\u9488\u5bf9\u7ec3\u4e60\u6539\u5584\u7684\u65b9\u5411</li> </ul> <p>\u5373\u65f6\u542f\u52a8\uff1a</p> <ul> <li>\u300c\u7528\u597d\u5947\u5fc3\u64ac\u52a8\u884c\u4e3a\u300d</li> </ul> <p>\u5e94\u5bf9\u622a\u6b62\u65e5\u671f\uff1a</p> <ul> <li>\u300c\u7d27\u6025\u9884\u671f\u7ba1\u7406\u300d</li> <li>\u300c\u589e\u91cf\u5f0f\u4ea4\u4ed8\u300d</li> </ul> <p>\u63d0\u9ad8\u756a\u8304\u8d28\u91cf\uff1a</p> <ul> <li>\u5b66\u4e60\u5982\u4f55\u5e94\u5bf9\u756a\u8304\u8fc7\u7a0b\u7684\u6253\u6270\uff08\u6b63\u5ff5\u5730\u505a\u756a\u8304\uff09</li> </ul> <p>2. \u4e24\u4e2a\u91cd\u8981\u77e5\u8bc6\u70b9</p> <p>\u77e5\u8bc6\u70b9\u4e00\uff1a\u4efb\u52a1\u7ba1\u7406\u8981\u540c\u65f6\u8003\u8651\u300c\u7d27\u6025\u6027\u300d\u548c\u300c\u91cd\u8981\u6027\u300d</p> <ul> <li>\u540c\u65f6\u8003\u8651\u6d3b\u52a8\u7684\u91cd\u8981\u6027\u548c\u7d27\u6025\u6027\uff0c\u5e76\u628a\u66f4\u591a\u7684\u7cbe\u529b\u7528\u5728\u5e73\u7a33\u63a8\u8fdb\u91cd\u8981\u7684\u6d3b\u52a8\u4e0a\uff08\u5373\u756a\u8304\u5de5\u4f5c\u6cd5\u6700\u64c5\u957f\u7684\uff09</li> <li>\u5b9a\u671f\u91cd\u65b0\u8bc4\u4f30\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\uff0c\u56e0\u4e3a\u4e8b\u4ef6\u7684\u91cd\u8981\u6027\u548c\u7d27\u6025\u6027\u4f1a\u968f\u65f6\u95f4\u53d1\u751f\u53d8\u5316</li> </ul> <p>\u77e5\u8bc6\u70b9\u4e8c\uff1a\u5728\u6ecb\u517b\u548c\u6d88\u8017\u7c7b\u6d3b\u52a8\u4e2d\u4fdd\u6301\u5e73\u8861</p> <p>\u6709\u610f\u8bc6\u5730\u5206\u8fa8\u6ecb\u517b\u4e0e\u6d88\u8017\u6d3b\u52a8\uff0c\u5e76\u5c1d\u8bd5\u66f4\u591a\u81ea\u6211\u7167\u987e\u7684\u65b9\u6cd5\uff0c\u5b66\u4f1a\u81ea\u5df1\u8c03\u6574\u81ea\u5df1\u7684\u72b6\u6001\u3002</p>"},{"location":"common/02-solve_procrastination/#15-day15","title":"15. Day15","text":"<ul> <li>\u884c\u52a8\uff1a\u68c0\u9a8c\u300c\u88ab\u62d6\u5ef6\u884c\u4e3a\u300d </li> <li>\u6b63\u5ff5\uff1a\u63a2\u7d22\u4f38\u5c55\u7684\u6781\u9650</li> </ul>"},{"location":"common/02-solve_procrastination/#151-\u68c0\u9a8c\u88ab\u62d6\u5ef6\u884c\u4e3a","title":"15.1 \u68c0\u9a8c\u300c\u88ab\u62d6\u5ef6\u884c\u4e3a\u300d","text":"<p>\u901a\u8fc7\u6bd4\u8f83\u62d6\u5ef6\u884c\u4e3a\u7684\u611f\u53d7\u53ca\u9884\u671f\u5956\u8d4f\u548c\u88ab\u62d6\u5ef6\u884c\u4e3a\u7684\u611f\u53d7\u53ca\u9884\u671f\u5956\u8d4f\uff1a</p> <ul> <li>\u6765\u5224\u65ad\u5982\u4f55\u9009\u62e9\u884c\u4e3a\u5408\u7406\uff0c\u63d0\u4f9b\u63a5\u4e0b\u6765\u884c\u52a8\u7684\u65b9\u5411</li> <li>\u6765\u66f4\u52a0\u6df1\u523b\u5730\u89c9\u5bdf\u62d6\u5ef6\u884c\u4e3a\u548c\u88ab\u62d6\u5ef6\u5e26\u6765\u7684\u7ed3\u679c</li> </ul>"},{"location":"common/03-symbol_train/","title":"Symbol \u7b2c\u4e8c\u66f2\u7ebf","text":"<p>https://symbol.iamkasong.com/</p>"},{"location":"common/books/","title":"Books","text":""},{"location":"common/books/01think_out/","title":"24.02\u300a\u601d\u8003\u5982\u4f55\u8d85\u8d8a\u601d\u8003\u300b\u9605\u8bfb","text":"<ul> <li>\u8c46\u74e3\u94fe\u63a5</li> <li>\u539f\u4f5c\u540d: The Extended Mind: The Power of Thinking Outside the Brain</li> <li>\u4f5c\u8005: [\u7f8e] \u5b89\u59ae\u00b7\u58a8\u83f2\u00b7\u4fdd\u7f57</li> <li>\u8bd1\u8005: \u5434\u8273\u7ea2</li> <li>\u51fa\u7248\u5e74: 2023-11-15</li> </ul>"},{"location":"common/books/01think_out/#1-\u7b2c\u4e00\u90e8\u5206-\u52a8\u8111\u4e4b\u524d\u5148\u52a8\u4e8e\u8eab\u5177\u8eab\u8ba4\u77e5","title":"1. \u7b2c\u4e00\u90e8\u5206 \u52a8\u201c\u8111\u201d\u4e4b\u524d\u5148\u52a8\u4e8e\u201c\u8eab\u201d\u5177\u8eab\u8ba4\u77e5","text":""},{"location":"common/books/01think_out/#11-\u7b2c1\u7ae0-\u8981\u60f3\u505a\u51fa\u826f\u597d\u7684\u51b3\u7b56\u9700\u8981\u4ed4\u7ec6\u503e\u542c\u8eab\u4f53\u7ed9\u51fa\u7684\u4fe1\u606f","title":"1.1 \u7b2c1\u7ae0 \u8981\u60f3\u505a\u51fa\u826f\u597d\u7684\u51b3\u7b56\uff0c\u9700\u8981\u4ed4\u7ec6\u503e\u542c\u8eab\u4f53\u7ed9\u51fa\u7684\u4fe1\u606f","text":"<ul> <li>\u8bad\u7ec3\u5bf9\u5fc3\u8df3\u8282\u62cd\u7684\u654f\u9510\u611f\u77e5\uff0c\u8ba9\u4f60\u66f4\u5177\u6d1e\u5bdf\u529b</li> <li>\u98a4\u6296\u6216\u547c\u5438\u6025\u4fc3\uff0c\u8eab\u4f53\u7ed9\u4f60\u7684\u51b3\u7b56\u4fe1\u53f7</li> <li>\u4ece\u8eab\u4f53\u626b\u63cf\u5230\u6807\u8bb0\u3001\u8c03\u8282\uff0c\u8bad\u7ec3\u5bf9\u8eab\u4f53\u7684\u611f\u77e5\u529b</li> <li>\u5bf9\u8eab\u4f53\u4e0d\u9002\u4fe1\u53f7\u4fdd\u6301\u201c\u8b66\u89c9\u201d\uff0c\u52a9\u4f60\u5728\u9ad8\u538b\u73af\u5883\u91cd\u89c6\u80dc\u51fa</li> <li>\u5bf9\u81ea\u8eab\u611f\u53d7\u7684\u611f\u77e5\uff0c\u8ba9\u4f60\u66f4\u5584\u4e8e\u7ba1\u7406\u60c5\u7eea</li> </ul>"},{"location":"common/books/01think_out/#12-\u7b2c2\u7ae0-\u8fb9\u8fd0\u52a8\u8fb9\u601d\u8003\u51b3\u7b56\u51c6\u786e\u7387\u4ece85\u63d0\u5347\u523099","title":"1.2 \u7b2c2\u7ae0 \u8fb9\u8fd0\u52a8\u8fb9\u601d\u8003\uff0c\u51b3\u7b56\u51c6\u786e\u7387\u4ece85%\u63d0\u5347\u523099%","text":"<ul> <li>\u7ad9\u8d77\u6765\u751f\u6d3b\u80dc\u8fc7\u4e8e\u5750\u4e0b\u6765\u601d\u8003</li> <li>\u4e2d\u7b49\u5f3a\u5ea6\u7684\u8fd0\u52a8\u80fd\u6709\u6548\u63d0\u5347\u4e13\u6ce8\u529b\u548c\u6267\u884c\u529b</li> <li>\u6211\u52a8\u6545\u6211\u5fc6\uff0c\u8fb9\u6bd4\u5212\u8fb9\u5b66\u7684\u8bb0\u5fc6\u6548\u679c\u6700\u597d</li> <li>\u7528\u8eab\u4f53\u52a8\u4f5c\u6a21\u62df\u5b66\u4e60\u8fc7\u7a0b\uff0c\u8ba9\u7406\u89e3\u66f4\u52a0\u6df1\u5165</li> <li>\u505a\u51fa\u4f55\u79cd\u542b\u4e49\u7684\u52a8\u4f5c\uff0c\u5c31\u4f1a\u6fc0\u53d1\u4f55\u79cd\u601d\u8003</li> </ul>"},{"location":"common/books/01think_out/#13-\u7b2c3\u7ae0-\u8fb9\u505a\u624b\u52bf\u8fb9\u8bf4\u8bdd\u66f4\u597d\u5730\u8bf4\u670d\u4e0e\u8bb0\u5fc6","title":"1.3 \u7b2c3\u7ae0 \u8fb9\u505a\u624b\u52bf\u8fb9\u8bf4\u8bdd\uff0c\u66f4\u597d\u5730\u8bf4\u670d\u4e0e\u8bb0\u5fc6","text":"<ul> <li>\u5584\u7528\u624b\u52bf\u7684\u4eba\uff0c\u7ecf\u6d4e\u548c\u6559\u80b2\u6c34\u5e73\u66f4\u4f73</li> <li>\u5b66\u4e60\u65f6\u591a\u7528\u624b\u52bf\uff0c\u7406\u89e3\u5f97\u66f4\u5feb\u66f4\u6df1</li> <li>\u6f14\u8bb2\u548c\u6559\u5b66\u65f6\u8f85\u4ee5\u624b\u52bf\uff0c\u66f4\u6709\u529b\u5730\u6559\u4f1a\u548c\u8bf4\u670d\u4ed6\u4eba</li> <li>\u7ed9\u6bcf\u4e2a\u65b0\u5355\u8bcd\u8bbe\u8ba1\u4e2a\u624b\u52bf\uff0c\u8ba9\u4f60\u8fc7\u76ee\u4e0d\u5fd8</li> </ul>"},{"location":"common/books/01think_out/#2-\u7b2c\u4e8c\u90e8\u5206-\u5c06\u601d\u8003\u4ece\u5927\u8111\u79fb\u5230\u601d\u7ef4\u7a7a\u95f4\u60c5\u5883\u8ba4\u77e5","title":"2. \u7b2c\u4e8c\u90e8\u5206 \u5c06\u601d\u8003\u4ece\u201c\u5927\u8111\u201d\u79fb\u5230\u201c\u601d\u7ef4\u7a7a\u95f4\u201d\u60c5\u5883\u8ba4\u77e5","text":""},{"location":"common/books/01think_out/#21-\u7b2c4\u7ae0-\u4e0d\u662f\u6700\u5feb\u7684\u8def\u7ebf\u800c\u662f\u6811\u6728\u9c9c\u82b1\u9e1f\u9e23\u6700\u591a\u7684\u8def\u7ebf","title":"2.1 \u7b2c4\u7ae0 \u4e0d\u662f\u6700\u5feb\u7684\u8def\u7ebf\uff0c\u800c\u662f\u6811\u6728\u3001\u9c9c\u82b1\u3001\u9e1f\u9e23\u6700\u591a\u7684\u8def\u7ebf","text":"<ul> <li>\u6211\u4eec\u7684\u8eab\u4f53\u548c\u5927\u8111\u66f4\u504f\u597d\u201c\u6237\u5916\u6d3b\u52a8\u201d</li> <li>\u5728\u690d\u7269\u56ed\u6563\u6b65\u4e0d\u5230\u4e00\u5c0f\u65f6\uff0c\u8bb0\u5fc6\u529b\u63d0\u534720%</li> <li>\u5f85\u5728\u81ea\u7136\u73af\u5883\u800c\u975e\u5efa\u7b51\u73af\u5883\u4e2d\uff0c\u7ed9\u4f60\u4e50\u89c2\u7684\u653e\u677e\u7684\u5927\u8111</li> <li>\u5728\u80fd\u770b\u5230\u6811\u6728\u3001\u6652\u5230\u592a\u9633\u7684\u529e\u516c\u5ba4\u5de5\u4f5c\uff0c\u6548\u7387\u66f4\u4f73</li> <li>\u91ce\u5916\u5f92\u6b65\u4e09\u5929\uff0c\u521b\u9020\u529b\u548c\u524d\u77bb\u6027\u601d\u7ef4\u7ffb\u500d</li> <li>\u81ea\u7136\u662f\u4eba\u7c7b\u8054\u7ed3\u611f\u4e0e\u5f52\u5c5e\u611f\u7684\u6c38\u6052\u6765\u6e90</li> </ul>"},{"location":"common/books/01think_out/#22-\u7b2c5\u7ae0-\u572824\u7c73\u9ad8\u7684\u5929\u82b1\u677f\u4e0b\u6d17\u6fa1vs\u572845\u7c73\u9ad8\u7684\u5929\u82b1\u677f\u4e0b\u6d17\u6fa1","title":"2.2 \u7b2c5\u7ae0 \u57282.4\u7c73\u9ad8\u7684\u5929\u82b1\u677f\u4e0b\u6d17\u6fa1vs\u572845\u7c73\u9ad8\u7684\u5929\u82b1\u677f\u4e0b\u6d17\u6fa1","text":"<ul> <li>\u62c6\u9664\u5899\u58c1\uff0c\u6fc0\u53d1\u66f4\u591a\u7684\u534f\u4f5c\u4e0e\u521b\u9020</li> <li>\u58c1\u5792\u7b51\u5f97\u597d\uff0c\u5408\u4f5c\u624d\u80fd\u597d</li> <li>\u4e3b\u573a\u4f18\u52bf\uff0c\u5f15\u7206\u521b\u9020\u529b\u4e0e\u5de5\u4f5c\u6548\u7387</li> <li>\u201c\u95f4\u6b47\u6027\u5408\u4f5c\u201d\u7a7a\u95f4\uff0c\u51cf\u5c11\u5de5\u4f5c\u4e2d\u7684\u201c\u60c5\u7eea\u75b2\u60eb\u201d</li> <li>\u201c\u5fc3\u7406\u5305\u5bb9\u6027\u8bbe\u8ba1\u201d\u7a7a\u95f4\uff0c\u8ba9\u56e2\u961f\u6210\u5458\u66f4\u5177\u5f52\u5c5e\u611f</li> <li>\u795e\u7ecf\u5efa\u7b51\u5b66\uff0c\u62d3\u5bbd\u601d\u7ef4\u7684\u65b0\u89c6\u89d2</li> </ul>"},{"location":"common/books/01think_out/#23-\u7b2c6\u7ae0-\u4e3a\u4ec0\u4e48\u8bb0\u5fc6\u51a0\u519b\u80fd\u8bb0\u4e0b72\u4e2a\u8bcd\u4e2d\u768471\u4e2a\u6211\u4eec\u53ea\u80fd\u8bb0\u4f4f29\u4e2a","title":"2.3 \u7b2c6\u7ae0 \u4e3a\u4ec0\u4e48\u8bb0\u5fc6\u51a0\u519b\u80fd\u8bb0\u4e0b72\u4e2a\u8bcd\u4e2d\u768471\u4e2a\uff0c\u6211\u4eec\u53ea\u80fd\u8bb0\u4f4f29\u4e2a","text":"<ul> <li>\u5730\u70b9\u8bb0\u5fc6\u6cd5\uff0c\u5c06\u7269\u7406\u4f4d\u7f6e\u4e0e\u8bb0\u5fc6\u5173\u8054\u8d77\u6765</li> <li>\u6982\u5ff5\u6620\u5c04\u6cd5\uff0c\u628a\u4f60\u7684\u601d\u7ef4\u201c\u5730\u56fe\u201d\u753b\u5728\u5899\u4e0a</li> <li>\u9009\u62e9\u66f4\u5927\u3001\u66f4\u591a\u7684\u663e\u793a\u5668</li> <li>\u628a\u601d\u8003\u548c\u60f3\u6cd5\u5199\u4e0b\u6765\uff0c\u800c\u4e0d\u662f\u505c\u7559\u5728\u5934\u8111\u4e2d</li> <li>\u8ba9\u601d\u7ef4\u548c\u5916\u90e8\u4e8b\u7269\u8fdb\u884c\u4e92\u52a8</li> </ul>"},{"location":"common/books/01think_out/#3-\u7b2c\u4e09\u90e8\u5206-\u628a\u4ed6\u4eba\u7684\u667a\u6167\u7eb3\u5165\u81ea\u5df1\u7684\u601d\u7ef4\u5206\u5e03\u5f0f\u8ba4\u77e5","title":"3. \u7b2c\u4e09\u90e8\u5206 \u628a\u201c\u4ed6\u4eba\u201d\u7684\u667a\u6167\u7eb3\u5165\u201c\u81ea\u5df1\u201d\u7684\u601d\u7ef4\u5206\u5e03\u5f0f\u8ba4\u77e5","text":""},{"location":"common/books/01think_out/#31-\u7b2c7\u7ae0-\u5b66\u5f92\u5f0f\u6a21\u4eff\u50cf\u5316\u5b66\u5bb6\u4e00\u6837\u5199\u4f5c\u50cf\u7269\u7406\u5b66\u5bb6\u4e00\u6837\u601d\u8003","title":"3.1 \u7b2c7\u7ae0 \u201c\u5b66\u5f92\u201d\u5f0f\u6a21\u4eff\uff1a\u50cf\u5316\u5b66\u5bb6\u4e00\u6837\u5199\u4f5c\uff0c\u50cf\u7269\u7406\u5b66\u5bb6\u4e00\u6837\u601d\u8003","text":"<ul> <li>\u523b\u610f\u6a21\u4eff\u4ed6\u4eba\u6709\u5229\u4e8e\u7406\u89e3\u5bf9\u65b9\u8bf4\u7684\u8bdd</li> <li>\u8d62\u5bb6\u4e00\u76f4\u5728\u6a21\u4eff</li> <li>\u6210\u529f\u7684\u6a21\u4eff\u8005\u5c31\u662f\u521b\u65b0\u8005</li> <li>\u6a21\u4eff\u662f\u4eba\u7c7b\u5728\u4f17\u591a\u7269\u79cd\u4e2d\u8131\u9896\u800c\u51fa\u7684\u5173\u952e</li> <li>\u62c6\u5206\u4e0e\u653e\u5927\uff0c\u66f4\u597d\u5730\u6a21\u4eff\u4e13\u5bb6</li> </ul>"},{"location":"common/books/01think_out/#32-\u7b2c8\u7ae0-\u72ec\u601d\u8003\u4e0d\u5982\u4f17\u601d\u8003","title":"3.2 \u7b2c8\u7ae0 \u201c\u72ec\u201d\u601d\u8003\uff0c\u4e0d\u5982\u201c\u4f17\u201d\u601d\u8003","text":"<ul> <li>\u4e0e\u4ed6\u4eba\u4e00\u8d77\u601d\u8003\u65f6\uff0c\u601d\u8003\u7684\u6548\u679c\u6700\u4f73</li> <li>\u6559\u522b\u4eba\u53ef\u4ee5\u63d0\u5347\u81ea\u8eab\u7684\u601d\u7ef4\u80fd\u529b</li> <li>\u8fa9\u8bba\u53ef\u4ee5\u4fc3\u6210\u660e\u667a\u7684\u51b3\u7b56</li> <li>\u501f\u7528\u6545\u4e8b\uff0c\u8ba9\u6c9f\u901a\u4e8b\u534a\u529f\u500d</li> </ul>"},{"location":"common/books/01think_out/#33-\u76f8\u6bd4\u4e00\u8d77\u770bexcel\u62a5\u8868\u4e0d\u5982\u4e00\u8d77\u805a\u9910","title":"3.3 \u76f8\u6bd4\u4e00\u8d77\u770bExcel\u62a5\u8868\uff0c\u4e0d\u5982\u4e00\u8d77\u805a\u9910","text":"<ul> <li>\u6fc0\u6d3b\u7fa4\u4f53\u601d\u7ef4\u662f\u5e94\u5bf9\u5f53\u4eca\u793e\u4f1a\u590d\u6742\u6027\u7684\u552f\u4e00\u65b9\u6cd5</li> <li>\u540c\u6b65\u6d3b\u52a8\uff0c\u8ba9\u4eba\u4eec\u6210\u4e3a\u66f4\u597d\u7684\u5408\u4f5c\u8005</li> <li>\u5171\u540c\u6ce8\u610f\uff1a\u6295\u5165\u65f6\u95f4\u8d8a\u957f\uff0c\u83b7\u5f97\u6210\u5c31\u8d8a\u591a</li> <li>\u6709\u5f3a\u5927\u4ea4\u4e92\u8bb0\u5fc6\u7684\u56e2\u961f\u8868\u73b0\u66f4\u597d</li> <li>\u8ba9\u6bcf\u4e2a\u6210\u5458\u90fd\u6210\u4e3a\u56e2\u961f\u4e2d\u7684\u5fc5\u9700\u8981\u7d20</li> </ul>"},{"location":"common/books/01think_out/#\u7ed3\u8bed-\u6bcf\u4e2a\u4eba\u90fd\u6709\u80fd\u529b\u91cd\u5851\u5927\u8111","title":"\u7ed3\u8bed \u6bcf\u4e2a\u4eba\u90fd\u6709\u80fd\u529b\u91cd\u5851\u5927\u8111","text":"<ul> <li>\u7814\u7a76\u8868\u660e\uff0c\u9762\u5bf9\u523b\u677f\u5370\u8c61\u5a01\u80c1\u8fd9\u6837\u7684\u6311\u6218\u65f6\uff0c\u601d\u7ef4\u5ef6\u5c55\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u6709\u6548\u5730\u601d\u8003</li> </ul> <p>\u542f\u52a8\u601d\u7ef4\u5ef6\u5c55\u8ba1\u5212</p> <ul> <li>\u7b2c\u4e00\u5957\u539f\u5219\u5217\u51fa\u4e86\u4e00\u4e9b\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u5c31\u80fd\u517b\u6210\u7684\u601d\u7ef4\u4e60\u60ef</li> </ul> <p>\u65b9\u6cd5\u4e00\uff1a\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u5c31\u5e94\u8be5\u91ca\u653e\u4fe1\u606f\uff0c\u5c06\u5176\u5916\u5316\uff0c\u5373\u4ece\u5927\u8111\u79fb\u5230\u5916\u90e8\u4e16\u754c\u4e2d\u3002</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u8981\u5c3d\u53ef\u80fd\u5c06\u4fe1\u606f\u8f6c\u5316\u4e3a\u5b9e\u4f53\uff0c\u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u771f\u5b9e\u7684\u4e1c\u897f\uff0c\u7136\u540e\u7ee7\u7eed\u4e0e\u5b83\u4e92\u52a8\uff0c\u6620\u5c04\u5b83\uff0c\u611f\u53d7\u5b83\uff0c\u8c03\u6574\u5b83\uff0c\u5411\u522b\u4eba\u5c55\u793a\u5b83\u3002\u4eba\u7c7b\u7684\u8fdb\u5316\u4f7f\u6211\u4eec\u53ef\u4ee5\u5f88\u597d\u5730\u5904\u7406\u5177\u4f53\u7684\u4e8b\u7269\uff0c\u800c\u4e0d\u662f\u53bb\u601d\u8003\u62bd\u8c61\u7684\u4e8b\u7269\u3002</p> <p>\u65b9\u6cd5\u4e09\uff1a\u5728\u4ece\u4e8b\u8111\u529b\u52b3\u52a8\u65f6\uff0c\u5e94\u8be5\u8bbe\u6cd5\u6539\u53d8\u81ea\u5df1\u7684\u72b6\u6001\u3002\u6211\u4eec\u5df2\u7ecf\u591a\u6b21\u63a2\u8ba8\u4e86\u5c06\u5927\u8111\u7c7b\u6bd4\u4e3a\u8ba1\u7b97\u673a\u7684\u5c40\u9650\u6027\uff0c\u800c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9047\u5230\u4e86\u5b83\u6700\u660e\u663e\u7684\u7f3a\u9677\u3002</p> <ul> <li>\u7b2c\u4e8c\u5957\u539f\u5219\u57fa\u4e8e\u5bf9\u5927\u8111\u8fdb\u5316\u529f\u80fd\u7684\u7406\u89e3\uff0c\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u5173\u4e8e\u601d\u7ef4\u5ef6\u5c55\u5982\u4f55\u5de5\u4f5c\u7684\u66f4\u9ad8\u5c42\u6b21\u89c6\u89d2</li> </ul> <p>\u65b9\u6cd5\u56db\uff1a\u7406\u89e3\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u5373\u5e94\u8be5\u5c3d\u53ef\u80fd\u91cd\u65b0\u5177\u4f53\u5316\u81ea\u5df1\u6240\u601d\u8003\u7684\u4fe1\u606f\u3002\u5bf9\u77e5\u8bc6\u7684\u8ffd\u6c42\u8ba9\u4eba\u4eec\u7ecf\u5e38\u8bd5\u56fe\u5c06\u601d\u7ef4\u4e0e\u8eab\u4f53\u5206\u79bb\u3002\u5ef6\u5c55\u601d\u7ef4\u7684\u76f8\u5173\u7814\u7a76\u5219\u63d0\u4f9b\u4e86\u76f8\u53cd\u7684\u5efa\u8bae\uff0c\u5373\u5e94\u8be5\u8bbe\u6cd5\u628a\u8eab\u4f53\u62c9\u56de\u601d\u8003\u7684\u8fc7\u7a0b\u4e2d\u3002</p> <p>\u65b9\u6cd5\u4e94\uff1a\u5f3a\u8c03\u4e86\u4eba\u7c7b\u7684\u53e6\u4e00\u79cd\u529b\u91cf\uff0c\u5373\u5e94\u8be5\u5c06\u601d\u8003\u7684\u4fe1\u606f\u91cd\u65b0\u7a7a\u95f4\u5316\u3002</p> <p>\u65b9\u6cd5\u516d\uff1a\u5b8c\u5584\u4e86\u6211\u4eec\u7684\u5148\u5929\u80fd\u529b\uff0c\u5373\u91cd\u65b0\u793e\u4f1a\u5316\u6211\u4eec\u6240\u601d\u8003\u7684\u4fe1\u606f\u3002</p> <p>\u65b9\u6cd5\u4e03\uff1a\u5e94\u8be5\u5c3d\u53ef\u80fd\u901a\u8fc7\u8ba4\u77e5\u5faa\u73af\u6765\u7ba1\u7406\u81ea\u5df1\u7684\u601d\u7ef4\u6d3b\u52a8\u3002</p> <p>\u65b9\u6cd5\u516b\uff1a\u5e94\u8be5\u5c3d\u53ef\u80fd\u521b\u9020\u8ba4\u77e5\u4e00\u81f4\u7684\u60c5\u5883\u6765\u7ba1\u7406\u601d\u7ef4\u3002</p> <p>\u65b9\u6cd5\u4e5d\uff1a\u56de\u5230\u4eba\u7c7b\u672c\u8eab\uff0c\u5373\u81ea\u6211\u53c2\u7167\u5f0f\u89c2\u5bdf\u3002\u4eba\u7c7b\u662f\u4ec0\u4e48\u6837\u7684\u751f\u7269\uff1f\u4eba\u7c7b\u662f\u4e00\u6709\u673a\u4f1a\u5c31\u4f1a\u70ed\u5207\u800c\u79ef\u6781\u5730\u5ef6\u5c55\u81ea\u6211\u7684\u751f\u7269\u3002</p> <p>\u6253\u7834\u201c\u667a\u529b\u5929\u751f\u8bba\u201d\uff0c\u5851\u9020\u8d85\u5f3a\u5927\u8111</p> <p>\u5b9e\u8bc1\u8bc1\u636e\u8868\u660e\uff0c\u80fd\u66f4\u5145\u5206\u5730\u5ef6\u5c55\u601d\u7ef4\u80fd\u529b\u7684\u4e2a\u4f53\uff0c\u4e5f\u80fd\u66f4\u6709\u6548\u5730\u89e3\u51b3\u65e5\u5e38\u751f\u6d3b\u4e2d\u7684\u95ee\u9898\u3002</p> <p>\u535a\u5361\u5185\u683c\u62c9\u8bf4\uff1a\u201c\u4eba\u4eec\u6b63\u5728\u8fd0\u7528\u5927\u91cf\u672a\u88ab\u91cd\u89c6\u7684\u7b56\u7565\u6765\u89e3\u51b3\u95ee\u9898\uff0c\u8fd9\u4e9b\u7b56\u7565\u672a\u88ab\u91cd\u89c6\u7684\u90e8\u5206\u539f\u56e0\u662f\u4eba\u4eec\u4e0d\u5584\u4e8e\u63cf\u8ff0\u81ea\u5df1\u7684\u601d\u7ef4\u8fc7\u7a0b\u3002\u5c3d\u7ba1\u4e00\u76f4\u5728\u4f7f\u7528\uff0c\u4f46\u8fd9\u4e9b\u7b56\u7565\u901a\u5e38\u8fd8\u662f\u6ca1\u6709\u88ab\u4eba\u4eec\u610f\u8bc6\u5230\u3002\u6211\u4eec\u6709\u5174\u8da3\u7814\u7a76\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4eba\u4eec\u662f\u5426\u4f1a\u53d1\u5c55\u51fa\u66f4\u590d\u6742\u7684\u7b56\u7565\u3002\u201d</p> <p>\u6211\u76f8\u4fe1\uff0c\u82e5\u80fd\u627f\u8ba4\u601d\u7ef4\u53ef\u4ee5\u5ef6\u5c55\uff0c\u6211\u4eec\u90fd\u5c06\u62e5\u6709\u65e0\u9650\u5e7f\u9614\u7684\u601d\u7ef4\u3002</p>"},{"location":"common/books/02good_advice/","title":"24.02\u300a\u5b9d\u8d35\u7684\u4eba\u751f\u5efa\u8bae\u300b\u9605\u8bfb","text":""},{"location":"common/books/04-nvim_use/","title":"NVIM \u5907\u5fd8\u5f55","text":"<ul> <li> <p>vim \u547d\u4ee4</p> </li> <li> <p>lua \u547d\u4ee4</p> </li> </ul> Lua<pre><code>-- leader key\nvim.g.mapleader = \" \"\nvim.g.maplocalleader = \" \"\n\nlocal map = vim.api.nvim_set_keymap\n  -- \u590d\u7528 opt \u53c2\u6570\nlocal opt = {noremap = true, silent = true }\n-- \u53d6\u6d88 s \u9ed8\u8ba4\u529f\u80fd\nmap(\"n\", \"s\", \"\", opt)\n-- windows \u5206\u5c4f\u5feb\u6377\u952e\nmap(\"n\", \"sv\", \":vsp&lt;CR&gt;\", opt)\nmap(\"n\", \"sh\", \":sp&lt;CR&gt;\", opt)\n-- \u5173\u95ed\u5f53\u524d\nmap(\"n\", \"sc\", \"&lt;C-w&gt;c\", opt)\n-- \u5173\u95ed\u5176\u4ed6\nmap(\"n\", \"so\", \"&lt;C-w&gt;o\", opt)\n-- Alt + hjkl  \u7a97\u53e3\u4e4b\u95f4\u8df3\u8f6c\nmap(\"n\", \"&lt;A-h&gt;\", \"&lt;C-w&gt;h\", opt)\nmap(\"n\", \"&lt;A-j&gt;\", \"&lt;C-w&gt;j\", opt)\nmap(\"n\", \"&lt;A-k&gt;\", \"&lt;C-w&gt;k\", opt)\nmap(\"n\", \"&lt;A-l&gt;\", \"&lt;C-w&gt;l\", opt)\n-- \u5de6\u53f3\u6bd4\u4f8b\u63a7\u5236\nmap(\"n\", \"s,\", \":vertical resize -20&lt;CR&gt;\", opt)\nmap(\"n\", \"s.\", \":vertical resize +20&lt;CR&gt;\", opt)\n-- \u4e0a\u4e0b\u6bd4\u4f8b\nmap(\"n\", \"sj\", \":resize +10&lt;CR&gt;\", opt)\nmap(\"n\", \"sk\", \":resize -10&lt;CR&gt;\", opt)\n-- \u7b49\u6bd4\u4f8b\nmap(\"n\", \"s=\", \"&lt;C-w&gt;=\", opt)\n-- Terminal\u76f8\u5173\nmap(\"n\", \"&lt;leader&gt;t\", \":sp | terminal&lt;CR&gt;\", opt)\nmap(\"n\", \"&lt;leader&gt;vt\", \":vsp | terminal&lt;CR&gt;\", opt)\nmap(\"t\", \"&lt;Esc&gt;\", \"&lt;C-\\\\&gt;&lt;C-n&gt;\", opt)\nmap(\"t\", \"&lt;A-h&gt;\", [[ &lt;C-\\&gt;&lt;C-N&gt;&lt;C-w&gt;h ]], opt)\nmap(\"t\", \"&lt;A-j&gt;\", [[ &lt;C-\\&gt;&lt;C-N&gt;&lt;C-w&gt;j ]], opt)\nmap(\"t\", \"&lt;A-k&gt;\", [[ &lt;C-\\&gt;&lt;C-N&gt;&lt;C-w&gt;k ]], opt)\nmap(\"t\", \"&lt;A-l&gt;\", [[ &lt;C-\\&gt;&lt;C-N&gt;&lt;C-w&gt;l ]], opt)\n\n-- visual\u6a21\u5f0f\u4e0b\u7f29\u8fdb\u4ee3\u7801\nmap(\"v\", \"&lt;\", \"&lt;gv\", opt)\nmap(\"v\", \"&gt;\", \"&gt;gv\", opt)\n-- \u4e0a\u4e0b\u79fb\u52a8\u9009\u4e2d\u6587\u672c\nmap(\"v\", \"J\", \":move '&gt;+1&lt;CR&gt;gv-gv\", opt)\nmap(\"v\", \"K\", \":move '&lt;-2&lt;CR&gt;gv-gv\", opt)\n\n-- \u4e0a\u4e0b\u6eda\u52a8\u6d4f\u89c8\nmap(\"n\", \"&lt;C-j&gt;\", \"4j\", opt)\nmap(\"n\", \"&lt;C-k&gt;\", \"4k\", opt)\n-- ctrl u / ctrl + d  \u53ea\u79fb\u52a89\u884c\uff0c\u9ed8\u8ba4\u79fb\u52a8\u534a\u5c4f\nmap(\"n\", \"&lt;C-u&gt;\", \"9k\", opt)\nmap(\"n\", \"&lt;C-d&gt;\", \"9j\", opt)\n\n\n-- \u5728visual \u6a21\u5f0f\u91cc\u7c98\u8d34\u4e0d\u8981\u590d\u5236\nmap(\"v\", \"p\", '\"_dP', opt)\n\n-- \u9000\u51fa\nmap(\"n\", \"q\", \":q&lt;CR&gt;\", opt)\nmap(\"n\", \"qq\", \":q!&lt;CR&gt;\", opt)\nmap(\"n\", \"Q\", \":qa!&lt;CR&gt;\", opt)\n\n-- insert \u6a21\u5f0f\u4e0b\uff0c\u8df3\u5230\u884c\u9996\u884c\u5c3e\nmap(\"i\", \"&lt;C-h&gt;\", \"&lt;ESC&gt;I\", opt)\nmap(\"i\", \"&lt;C-l&gt;\", \"&lt;ESC&gt;A\", opt)\n\n-- bufferline\n-- \u5de6\u53f3Tab\u5207\u6362\nmap(\"n\", \"&lt;C-h&gt;\", \":BufferLineCyclePrev&lt;CR&gt;\", opt)\nmap(\"n\", \"&lt;C-l&gt;\", \":BufferLineCycleNext&lt;CR&gt;\", opt)\n-- \u5173\u95ed\n--\"moll/vim-bbye\"\nmap(\"n\", \"&lt;C-w&gt;\", \":Bdelete!&lt;CR&gt;\", opt)\nmap(\"n\", \"&lt;leader&gt;bl\", \":BufferLineCloseLeft&lt;CR&gt;\", opt)\nmap(\"n\", \"&lt;leader&gt;bh\", \":BufferLineCloseRight&lt;CR&gt;\", opt)\nmap(\"n\", \"&lt;leader&gt;bc\", \":BufferLinePickClose&lt;CR&gt;\", opt)\n\n-- Telescope\n-- \u67e5\u627e\u6587\u4ef6\nmap(\"n\", \"&lt;C-p&gt;\", \":Telescope find_files&lt;CR&gt;\", opt)\n-- \u5168\u5c40\u641c\u7d22\nmap(\"n\", \"&lt;C-f&gt;\", \":Telescope live_grep&lt;CR&gt;\", opt)\n\n-- \u63d2\u4ef6\u5feb\u6377\u952e\nlocal pluginKeys = {}\n\n-- nvim-tree\n-- alt + m \u952e\u6253\u5f00\u5173\u95edtree\nmap(\"n\", \"&lt;A-m&gt;\", \":NvimTreeToggle&lt;CR&gt;\", opt)\n-- \u5217\u8868\u5feb\u6377\u952e\npluginKeys.nvimTreeList = {\n  -- \u6253\u5f00\u6587\u4ef6\u6216\u6587\u4ef6\u5939\n  { key = {\"&lt;CR&gt;\", \"o\", \"&lt;2-LeftMouse&gt;\"}, action = \"edit\" },\n  -- \u5206\u5c4f\u6253\u5f00\u6587\u4ef6\n  { key = \"v\", action = \"vsplit\" },\n  { key = \"h\", action = \"split\" },\n  -- \u663e\u793a\u9690\u85cf\u6587\u4ef6\n  { key = \"i\", action = \"toggle_custom\" }, -- \u5bf9\u5e94 filters \u4e2d\u7684 custom (node_modules)\n  { key = \".\", action = \"toggle_dotfiles\" }, -- Hide (dotfiles)\n  -- \u6587\u4ef6\u64cd\u4f5c\n  { key = \"&lt;F5&gt;\", action = \"refresh\" },\n  { key = \"a\", action = \"create\" },\n  { key = \"d\", action = \"remove\" },\n  { key = \"r\", action = \"rename\" },\n  { key = \"x\", action = \"cut\" },\n  { key = \"c\", action = \"copy\" },\n  { key = \"p\", action = \"paste\" },\n  { key = \"s\", action = \"system_open\" },\n}\n-- Telescope \u5217\u8868\u4e2d \u63d2\u5165\u6a21\u5f0f\u5feb\u6377\u952e\npluginKeys.telescopeList = {\n  i = {\n    -- \u4e0a\u4e0b\u79fb\u52a8\n    [\"&lt;C-j&gt;\"] = \"move_selection_next\",\n    [\"&lt;C-k&gt;\"] = \"move_selection_previous\",\n    [\"&lt;Down&gt;\"] = \"move_selection_next\",\n    [\"&lt;Up&gt;\"] = \"move_selection_previous\",\n    -- \u5386\u53f2\u8bb0\u5f55\n    [\"&lt;C-n&gt;\"] = \"cycle_history_next\",\n    [\"&lt;C-p&gt;\"] = \"cycle_history_prev\",\n    -- \u5173\u95ed\u7a97\u53e3\n    [\"&lt;C-c&gt;\"] = \"close\",\n    -- \u9884\u89c8\u7a97\u53e3\u4e0a\u4e0b\u6eda\u52a8\n    [\"&lt;C-u&gt;\"] = \"preview_scrolling_up\",\n    [\"&lt;C-d&gt;\"] = \"preview_scrolling_down\",\n  },\n}\n\n\nreturn pluginKeys\n</code></pre>"},{"location":"ds/","title":"Data System","text":""},{"location":"language/","title":"Programming Language","text":"<p>Last update time: 20240203</p> <ul> <li> <p>Work mainly uses Golang</p> </li> <li> <p>Lately I\u2019ve been learning by using Rust</p> </li> <li> <p>Programming languages that have actually been exposed to (and used) include the following</p> <ul> <li>Java</li> <li>Python</li> <li>C/C++</li> <li>Html/Css/Javascript</li> <li>Kotlin .......</li> </ul> </li> </ul>"},{"location":"language/golang/","title":"Golang","text":""},{"location":"language/golang/%5B0%5D%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/go_best_practice/","title":"\u300aGo \u8bed\u8a00\u5b9e\u6218: \u7f16\u5199\u53ef\u7ef4\u62a4 Go \u8bed\u8a00\u4ee3\u7801\u5efa\u8bae\u300bTips","text":"<p>https://github.com/llitfkitfk/go-best-practice/tree/master</p>"},{"location":"language/rust/","title":"Rust","text":""},{"location":"language/rust/%5B0%5D%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/list/","title":"\u94fe\u8868\u5b9e\u8df5","text":"<p>https://course.rs/too-many-lists/intro.html</p>"},{"location":"language/rust/%5B1%5D%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB/rust_course/","title":"\u300aRust \u8bed\u8a00\u5723\u7ecf\u300b\u9605\u8bfb\u7b14\u8bb0","text":""},{"location":"middleware/","title":"Middleware","text":""},{"location":"network/","title":"Computer Network","text":""},{"location":"os/","title":"Operating System","text":""},{"location":"os/2401mit6s081/","title":"MIT-6.S081","text":"<p>Start on 2024.02</p> <ul> <li>\u8bfe\u7a0b\u8868\uff1ahttps://pdos.csail.mit.edu/6.1810/2020/schedule.html</li> <li>\u8bfe\u7a0b\u89c6\u9891\uff1ahttps://www.youtube.com/watch?v=L6YqHxYHa7A</li> <li>\u7ffb\u8bd1\u8bfe\u7a0b\u6587\u6863\uff1ahttps://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/</li> <li>\u5176\u4ed6\u53c2\u8003\u4fe1\u606f\uff1a<ul> <li>https://zhuanlan.zhihu.com/p/632281381</li> <li>https://csdiy.wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/MIT6.S081/#_1</li> <li>https://tarplkpqsm.feishu.cn/docs/doccnBFsXFMsAr1oXEVsaT9E3Jg#</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/#lecture--preparation","title":"Lecture &amp; Preparation","text":"<ul> <li> Lecture 01 (24.02)</li> <li> Lecture 02 (24.02.21)</li> <li> Lecture 03 (24.02.26)</li> <li> Lecture 04</li> <li> Lecture 05</li> <li> Lecture 06</li> <li> Lecture 07</li> <li> Lecture 08</li> <li> Lecture 09</li> <li> Lecture 10</li> <li> Lecture 11</li> <li> Lecture 12</li> <li> Lecture 13</li> <li> Lecture 14</li> <li> Lecture 15</li> <li> Lecture 16</li> <li> Lecture 17</li> <li> Lecture 18</li> <li> Lecture 19</li> <li> Lecture 20</li> <li> Lecture 21</li> <li> Lecture 22</li> <li> Lecture 23</li> </ul>"},{"location":"os/2401mit6s081/#lab","title":"Lab","text":"<ul> <li> Lab01 (24.02)</li> <li> Lab02</li> <li> Lab03</li> <li> Lab04</li> <li> Lab05</li> <li> Lab06</li> <li> Lab07</li> <li> Lab08</li> <li> Lab09</li> <li> Lab10</li> <li> Lab11</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/","title":"Lec1","text":""},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#1-preparationoperator-system-interfaces","title":"1. Preparation:Operator system interfaces","text":"<p>book-riscv-rev3 Chapter1</p> <p></p>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#11-processes-and-memory","title":"1.1 Processes and memory","text":"<ul> <li>An xv6 process consists of user-space memory (instructions, data, and stack) and per-process state private to the kernel.</li> <li>A process may create a new process using the <code>fork</code> system call.</li> </ul> <ul> <li>If <code>exec</code> succeeds then the child will execute instructions from <code>echo</code> instead of <code>runcmd</code>. At some point <code>echo</code> will call <code>exit</code>, which will cause the parent to return from <code>wait</code> in <code>main</code> (user/sh.c:146).</li> <li>why <code>fork</code> and <code>exec</code> are not combined in a single call; we will see later that the shell exploits the separation in its implementation of I/O redirection. To avoid the wastefulness of creating a duplicate process and then immediately replacing it (with <code>exec</code>), operating kernels optimize the implementation of <code>fork</code> for this use case by using virtual memory techniques such as copy-on-write (see Section 4.6).</li> <li>Xv6 allocates most user-space memory implicitly.</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#12-io-and-file-descriptors","title":"1.2 I/O and File descriptors","text":"<ul> <li>A file descriptor is a small integer representing a kernel-managed object that a process may read from or write to.</li> <li>the file descriptor interface abstracts away the differences between files, pipes, and devices, making them all look like streams of bytes. We\u2019ll refer to input and output as I/O.</li> <li>By convention, a process reads from file descriptor 0 (standard input), writes output to file descriptor 1 (standard output), and writes error messages to file descriptor 2 (standard error).<ul> <li>the shell exploits the convention to implement I/O redirection and pipelines. The shell ensures that it always has three file descriptors open (user/sh.c:152), which are by default file descriptors for the console.</li> </ul> </li> <li>The <code>read</code> and <code>write</code> system calls read bytes from and write bytes to open files named by file descriptors.</li> <li>The use of file descriptors and the convention that file descriptor 0 is input and file descriptor 1 is output allows a simple implementation of <code>cat</code>.</li> <li>A newly allocated file descriptor is always the lowest-numbered unused descriptor of the current process.</li> <li>The system call <code>exec</code> replaces the calling process\u2019s memory but preserves its file table. This behavior allows the shell to implement I/O redirection by forking, re-opening chosen file descriptors in the child, and then calling <code>exec</code> to run the new program.</li> <li>The parent process\u2019s file descriptors are not changed by this sequence, since it modifies only the child\u2019s descriptors.</li> <li>The second argument to <code>open</code> consists of a set of flags, expressed as bits, that control what <code>open</code> does.<ul> <li>like:open(\"input.txt\", O_RDONLY)</li> </ul> </li> <li>Now it should be clear why it is helpful that <code>fork</code> and <code>exec</code> are separate calls: between the two, the shell has a chance to redirect the child\u2019s I/O without disturbing the I/O setup of the main shell.</li> <li>Although <code>fork</code> copies the file descriptor table, each underlying file offset is shared between parent and child.</li> <li>The <code>dup</code> system call duplicates an existing file descriptor, returning a new one that refers to the same underlying I/O object. Both file descriptors share an offset, just as the file descriptors duplicated by <code>fork</code> do.</li> <li>a process writing to file descriptor 1 may be writing to a file, to a device like the console, or to a pipe.</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#13-pipe","title":"1.3 Pipe","text":"<ul> <li>A pipe is a small kernel buffer exposed to processes as a pair of file descriptors, one for reading and one for writing. Writing data to one end of the pipe makes that data available for reading from the other end of the pipe. Pipes provide a way for processes to communicate.</li> </ul> <ul> <li>If no data is available, a <code>read</code> on a pipe waits for either data to be written or for all file descriptors referring to the write end to be closed.</li> <li>The fact that <code>read</code> blocks until it is impossible for new data to arrive is one reason that it\u2019s important for the child to close the write end of the pipe before executing wc above</li> <li>(e.g., <code>a | b | c</code>) the shell may create a tree of processes.</li> <li>Pipes may seem no more powerful than temporary files: the pipeline<ul> <li><code>echo hello world | wc</code> could be implemented without pipes as <code>echo hello world &gt;/tmp/xyz; wc &lt;/tmp/xyz</code></li> </ul> </li> <li>Pipes have at least three advantages over temporary files in this situation.<ul> <li>First, pipes automatically clean themselves up; with the file redirection, a shell would have to be careful to remove <code>/tmp/xyz</code> when done.</li> <li>Second, pipes can pass arbitrarily long streams of data, while file redirection requires enough free space on disk to store all the data.</li> <li>Third, pipes allow for parallel execution of pipeline stages, while the file approach requires the first program to finish before the second starts.</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#14-file-system","title":"1.4 File System","text":"<ul> <li>The xv6 file system provides data files, which contain uninterpreted byte arrays, and directories, which contain named references to data files and other directories.<ul> <li>The directories form a tree, starting at a special directory called the root. </li> <li>Paths that don\u2019t begin with / are evaluated relative to the calling process\u2019s current directory, which can be changed with the chdir system call.</li> </ul> </li> </ul> <ul> <li>There are system calls to create new files and directories: <ul> <li><code>mkdir</code> creates a new directory</li> <li><code>open</code> with the O_CREATE flag creates a new data file</li> <li><code>mknod</code> creates a new device file</li> </ul> </li> </ul> <ul> <li><code>mknod</code> creates a special file that refers to a device. Associated with a device file are the major and minor device numbers (the two arguments to <code>mknod</code>), which uniquely identify a kernel device.<ul> <li>When a process later opens a device file, the kernel diverts <code>read</code> and <code>write</code> system calls to the kernel device implementation instead of passing them to the file system.</li> </ul> </li> <li>Each link consists of an entry in a directory; the entry contains a file name and a reference to an inode.<ul> <li>An inode holds metadata about a file, including its type (file or directory or device), its length, the location of the file\u2019s content on disk, and the number of links to a file.</li> </ul> </li> <li>The <code>fstat</code> system call retrieves information from the inode that a file descriptor refers to.</li> </ul> <ul> <li>The <code>link</code> system call creates another file system name referring to the same inode as an existing file.<ul> <li>Each inode is identified by a unique inode number.</li> <li>After the code sequence above, it is possible to determine that a and b refer to the same underlying contents by inspecting the result of fstat: both will return the same inode number (<code>ino</code>), and the <code>nlink</code> count will be set to 2. </li> </ul> </li> </ul> C<pre><code>open(\"a\", O_CREATE|O_WRONLY);\nlink(\"a\", \"b\");\n</code></pre> <ul> <li>an idiomatic way to create a temporary inode with no name that will be cleaned up when the process closes <code>fd</code> or exits.</li> </ul> C<pre><code>fd = open(\"/tmp/xyz\", O_CREATE|O_RDWR);\nunlink(\"/tmp/xyz\");\n</code></pre> <ul> <li>Unix provides file utilities callable from the shell as user-level programs.</li> <li><code>cd</code> must change the current working directory of the shell itself.</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#15-real-world","title":"1.5 Real World","text":"<ul> <li>Unix\u2019s combination of \u201cstandard\u201d file descriptors, pipes, and convenient shell syntax for operations on them was a major advance in writing general-purpose reusable programs.<ul> <li>The idea sparked a culture of \u201csoftware tools\u201d that was responsible for much of Unix\u2019s power and popularity, and the shell was the first so-called \u201cscripting language.\u201d</li> </ul> </li> <li>The Unix system call interface has been standardized through the Portable Operating System Interface (POSIX) standard.<ul> <li>Our main goals for xv6 are simplicity and clarity while providing a simple UNIX-like system-call interface.</li> </ul> </li> <li>Unix unified access to multiple types of resources (files, directories, and devices) with a single set of file-name and file-descriptor interfaces.<ul> <li>This idea can be extended to more kinds of resources.</li> </ul> </li> <li>The file system and file descriptors have been powerful abstractions. Even so, there are other models for operating system interfaces.<ul> <li>Multics, a predecessor of Unix, abstracted file storage in a way that made it look like memory, producing a very different flavor of interface. The complexity of the Multics design had a direct influence on the designers of Unix, who aimed to build something simpler.</li> </ul> </li> <li>Any operating system must multiplex processes onto the underlying hardware, isolate processes from each other, and provide mechanisms for controlled inter-process communication.</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#2-lecture-1","title":"2. Lecture 1","text":"<p>https://pdos.csail.mit.edu/6.1810/2023/lec/l-overview.txt</p>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#21-operating-system-introduction","title":"2.1 operating system introduction","text":"<ul> <li> <p>What's an operating system?</p> <ul> <li>[user/kernel diagram]</li> <li>h/w: CPU, RAM, disk, net, &amp;c</li> <li>user applications: sh, cc, DB, &amp;c</li> <li>kernel services: FS, processes, memory, network, &amp;c</li> <li>system calls</li> </ul> </li> <li> <p>What is the purpose of an O/S?</p> <ul> <li>Multiplex the hardware among many applications</li> <li>Isolate applications for security and to contain bugs</li> <li>Allow sharing among cooperating applications</li> <li>Abstract the hardware for portability</li> <li>Provide useful services</li> </ul> </li> <li> <p>Design tensions make O/S design interesting</p> <ul> <li>efficient vs abstract/portable/general-purpose</li> <li>powerful vs simple interfaces</li> <li>flexible vs secure</li> <li>compatible vs new hardware and interfaces</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#22-unix-system-calls","title":"2.2 UNIX system calls","text":""},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#221-example-ex1c-copy-input-to-output","title":"2.2.1 example: ex1.c, copy input to output","text":"C<pre><code>// ex1.c: copy input to output.\n#include \"kernel/types.h\"\n#include \"user/user.h\"\n\nint main()\n{\n  char buf[64];\n  while(1){\n    int n = read(0, buf, sizeof(buf));\n    if(n &lt;= 0)\n      break;\n    write(1, buf, n);\n  }\n  exit(0);\n}\n</code></pre> <ul> <li>read() and write() are system calls<ul> <li>they look like function calls, but actually jump into the kernel.</li> </ul> </li> <li>first read()/write() argument is a \"file descriptor\" (FD)<ul> <li>passed to kernel to tell it which \"open file\" to read/write </li> <li>must previously have been opened </li> <li>an FD connects to a file/pipe/socket/&amp;c </li> <li>a process can open many files, have many FDs</li> </ul> </li> </ul> <p>UNIX convention: fd 0 is \"standard input\", 1 is \"standard output\"</p> <ul> <li>programs don't have to know where input comes from, or output goes </li> <li>they can just read/write FDs 0 and 1</li> </ul> <ul> <li>second read() argument is a pointer to some memory into which to read</li> <li>third argument is the number of bytes to read<ul> <li>read() may read less, but not more</li> </ul> </li> <li>return value: number of bytes actually read, or -1 for error</li> <li>note: ex1.c does not care about the format of the data <ul> <li>UNIX I/O is 8-bit bytes </li> <li>interpretation is application-specific, e.g. database records, C source, &amp;c</li> </ul> </li> </ul> <p>where do file descriptors come from?</p> <p>answer:</p> <p>File descriptors are integer values that are used to identify and access files or other input/output resources within a computer operating system. In Unix-like operating systems, including Linux, file descriptors are typically obtained through the process of opening files, pipes, sockets, and other resources. </p> <p>The steps and thought process for obtaining file descriptors are as follows:</p> <ol> <li>Open System Call: File descriptors are typically obtained through the use of system calls such as <code>open()</code> for files, <code>socket()</code> for network sockets, or <code>pipe()</code> for inter-process communication pipes. When a file or resource is opened, the operating system returns a file descriptor that can be used to reference that resource in subsequent read or write operations.</li> <li>Assignment: Once obtained from the system call, the file descriptor is typically assigned to a variable in the program for later use. For example, after opening a file, the returned file descriptor might be stored in an integer variable for easy reference.</li> <li>Use in I/O Operations: The obtained file descriptor is then used in read and write operations to perform input and output on the associated resource. For example, the file descriptor might be passed as an argument to the <code>read()</code> or <code>write()</code> system calls to read from or write to the associated file, pipe, or socket.</li> <li>Closing: After the file descriptor is no longer needed, it should be closed using the <code>close()</code> system call. This releases the associated resources and frees up the file descriptor for reuse. </li> </ol> <p>In summary, file descriptors are obtained through system calls when opening files or other resources, and they serve as references to those resources for performing input/output operations within a program.</p>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#222-example-ex2c-create-a-file","title":"2.2.2 example: ex2.c, create a file","text":"C<pre><code>// ex2.c: create a file, write to it.\n\n#include \"kernel/types.h\"\n#include \"user/user.h\"\n#include \"kernel/fcntl.h\"\n\nint main()\n{\n  int fd = open(\"out\", O_WRONLY | O_CREATE | O_TRUNC);\n\n  printf(\"open returned fd %d\\n\", fd);\n\n  write(fd, \"ooo\\n\", 4);\n\n  exit(0);\n}\n</code></pre> <ul> <li>open() creates (or opens) a file, returns a file descriptor (or -1 for error)</li> <li>FD is a small integer </li> <li>FD indexes into a per-process table maintained by kernel</li> <li>different processes have different FD name-spaces <ul> <li>e.g. FD 3 usually means different things to different processes</li> </ul> </li> </ul> <p>what happens when a program calls a system call like open()?</p> <ul> <li>CPU saves some user registers</li> <li>CPU increases privilege level</li> <li>CPU jumps to a known \"entry point\" in the kernel</li> <li>now running C code in the kernel</li> <li>kernel calls system call implementation<ul> <li>sys_open() looks up name in file system </li> <li>it might wait for the disk </li> <li>it updates kernel data structures (file block cache, FD table)</li> </ul> </li> <li>restore user registers</li> <li>reduce privilege level</li> <li>jump back to calling point in the program, which resumes</li> </ul> <ul> <li>typing to UNIX's command-line interface, the shell<ul> <li>the shell is an ordinary user program, not part of the kernel</li> <li>the shell lets you run UNIX command-line utilities</li> <li>time-sharing via the shell was the original focus of UNIX</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#223-example-ex3c-create-a-new-process","title":"2.2.3 example: ex3.c, create a new process","text":"C<pre><code>// ex3.c: create a new process with fork()\n#include \"kernel/types.h\"\n#include \"user/user.h\"\nint main()\n{\n  int pid;\n  pid = fork();\n  printf(\"fork() returned %d\\n\", pid);\n  if(pid == 0){\n    printf(\"child\\n\");\n  } else {\n    printf(\"parent\\n\");\n  }\n  exit(0);\n}\n</code></pre> <ul> <li>a separate process helps prevent them from interfering, e.g. if buggy </li> <li>the fork() system call creates a new process </li> <li>the kernel makes a copy of the calling process<ul> <li>instructions, data, registers, file descriptors, current directory</li> <li>\"parent\" and \"child\" processes</li> </ul> </li> <li>child and parent are initially identical!<ul> <li>except: fork() returns a pid in parent, 0 in child</li> </ul> </li> <li>a pid (process ID) is an integer; kernel gives each process a different pid</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#224-example-ex4c-replace-calling-process-with-an-executable-file","title":"2.2.4 example: ex4.c, replace calling process with an executable file","text":"C<pre><code>// ex4.c: replace a process with an executable file\n\n#include \"kernel/types.h\"\n#include \"user/user.h\"\nint main()\n{\n  char *argv[] = { \"echo\", \"this\", \"is\", \"echo\", 0 };\n  exec(\"echo\", argv);\n  printf(\"exec failed!\\n\");\n  exit(0);\n}\n</code></pre> <p>how does the shell run a program, e.g. $ echo a b c</p> <ul> <li>a program is stored in a file: instructions and initial memory<ul> <li>created by the compiler and linker</li> </ul> </li> <li>so there's a file called echo, containing instructions<ul> <li>on your own computer: ls -l /bin/echo</li> </ul> </li> <li>exec() replaces current process with an executable file <ul> <li>discards old instruction and data memory </li> <li>loads instructions and initial memory from the file </li> <li>preserves file descriptors</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#225-example-ex5c-fork-a-new-process-exec-a-program","title":"2.2.5 example: ex5.c, fork() a new process, exec() a program","text":"C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n// ex5.c: fork then exec\nint main()\n{\n  int pid, status;\n  pid = fork();\n  if(pid == 0){\n    char *argv[] = { \"echo\", \"THIS\", \"IS\", \"ECHO\", 0 };\n    exec(\"echo\", argv);\n    printf(\"exec failed!\\n\");\n    exit(1);\n  } else {\n    printf(\"parent waiting\\n\");\n    wait(&amp;status);\n    printf(\"the child exited with status %d\\n\", status);\n  }\n\n  exit(0);\n}\n</code></pre> <ul> <li>the shell can't simply call exec()!<ul> <li>since it wouldn't be running any more </li> <li>wouldn't be able to accept more than one command</li> </ul> </li> <li>ex5.c shows how the shell deals with this:<ul> <li>fork() a child process </li> <li>child calls exec()</li> <li>parent wait()s for child to finish</li> </ul> </li> <li>the shell does this fork/exec/wait for every command you type <ul> <li>after wait(), the shell prints the next prompt</li> </ul> </li> <li>exit(status) -&gt; wait(&amp;status)<ul> <li>status allows children to send back 32 bits of info to parent </li> <li>status convention: 0 = success, 1 = command encountered an error</li> </ul> </li> <li>note: the fork() copies, but exec() discards the copied memory<ul> <li>this may seem wasteful, you'll transparently eliminate the copy in the \"copy-on-write\" lab</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#226-example-ex6c-redirect-the-output-of-a-command","title":"2.2.6 example: ex6.c, redirect the output of a command","text":"C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n#include \"kernel/fcntl.h\"\n// ex6.c: run a command with output redirected\nint main()\n{\n  int pid;\n  pid = fork();\n  if(pid == 0){\n    close(1);\n    open(\"out\", O_WRONLY | O_CREATE | O_TRUNC);\n\n    char *argv[] = { \"echo\", \"this\", \"is\", \"redirected\", \"echo\", 0 };\n    exec(\"echo\", argv);\n    printf(\"exec failed!\\n\");\n    exit(1);\n  } else {\n    wait((int *) 0);\n  }\n\n  exit(0);\n}\n</code></pre> <ul> <li>what does the shell do for this? </li> <li>$ echo hello &gt; out </li> <li>answer: fork, child changes FD 1, child exec's echo</li> <li>note: open() always chooses lowest unused FD; 1 due to close(1). </li> <li>note: exec preserves FDs </li> <li>fork, FDs, and exec interact nicely to implement I/O redirection <ul> <li>separate fork-then-exec gives child a chance to change FDs </li> <li>before exec() gives up control </li> <li>and without disturbing parent's FDs</li> </ul> </li> <li>FDs provide indirection <ul> <li>commands just use FDs 0 and 1, don't have to know where they go</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#227-example-ex7c-communicate-through-a-pipe","title":"2.2.7 example: ex7.c, communicate through a pipe","text":"C<pre><code>// ex7.c: communication over a pipe\n#include \"kernel/types.h\"\n#include \"user/user.h\"\nint main()\n{\n  int fds[2];\n  char buf[100];\n  int n;\n\n  // create a pipe, with two FDs in fds[0], fds[1].\n  pipe(fds);\n\n  // write to the pipe\n  write(fds[1], \"xyz\\n\", 4);\n\n  // read from the pipe\n  n = read(fds[0], buf, sizeof(buf));\n\n  // display the results on the terminal\n  write(1, buf, n);\n\n  exit(0);\n}\n</code></pre> <ul> <li>an FD can refer to a \"pipe\", rather than a file </li> <li>the pipe() system call creates two FDs <ul> <li>read from the first FD </li> <li>write to the second FD</li> </ul> </li> <li>the kernel maintains a buffer for each pipe<ul> <li>write() appends to the buffer </li> <li>read() waits until there is data</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#228-example-ex8c-communicate-between-processes","title":"2.2.8 example: ex8.c, communicate between processes","text":"C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n// ex8.c: communication between two processes\nint main()\n{\n  int n, pid;\n  int fds[2];\n  char buf[100];\n\n  // create a pipe, with two FDs in fds[0], fds[1].\n  pipe(fds);\n\n  pid = fork();\n  if (pid == 0) {\n    // child\n    write(fds[1], \"this is ex8\\n\", 12);\n  } else {\n    // parent\n    n = read(fds[0], buf, sizeof(buf));\n    write(1, buf, n);\n  }\n\n  exit(0);\n}\n</code></pre> <ul> <li>the shell builds pipelines by forking twice and calling exec()</li> <li>pipes are a separate abstraction, but combine well w/ fork()</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec1/#229-example-ex9c-list-files-in-a-directory","title":"2.2.9 example: ex9.c, list files in a directory","text":"C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n\n// ex9.c: list file names in the current directory\n\nstruct dirent {\n  ushort inum;\n  char name[14];\n};\n\nint main()\n{\n  int fd;\n  struct dirent e;\n\n  fd = open(\".\", 0);\n  while(read(fd, &amp;e, sizeof(e)) == sizeof(e)){\n    if(e.name[0] != '\\0'){\n      printf(\"%s\\n\", e.name);\n    }\n  }\n  exit(0);\n}\n</code></pre>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/","title":"Lec2","text":""},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#1-preparation","title":"1. Preparation","text":"<p>The C Programming Language, by Kernighan and Ritchie (K&amp;R)</p>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#11-29-bitwise-operators","title":"1.1 2.9 (Bitwise operators)","text":"C<pre><code>// 1. &amp;\n\n      101010101010101     052525\n    &amp; 000000001111111   &amp; 000177\n      ---------------     ------\n              1010101        125\n// 2. |\n\n            000000000     000000\n          | 000001010   | 000012\n            ---------     ------\n                 1010         12\n</code></pre> <ul> <li>The precedence of the bitwise operators is not what you might expect, and explicit parentheses are often needed</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#12-51-pointers-and-addresses-through-56-pointer-arrays","title":"1.2 5.1 (Pointers and addresses) through 5.6 (Pointer arrays)","text":"Pointers and AddressesPointers and Function ArgumentsPointers and ArraysAddress ArithmeticCharacter Pointers and FunctionsPointer Arrays; Pointers to Pointers C<pre><code>// case 1\n    int i = 1;      /* an integer */\n    int *ip;        /* a pointer-to-int */\n    ip = &amp;i;        /* ip points to i */\n    printf(\"%d\\n\", *ip);    /* prints i, which is 1 */\n    *ip = 5;        /* sets i to 5 */\n// case 2\n    int* ip1, ip2;      /* WRONG */\n    int *ip1, *ip2; \n</code></pre> C<pre><code>// case 1\n    int getint(int *pn)\n    {\n        char line[20];\n        if (getline(line, 20) &lt;= 0)\n            return EOF;\n        *pn = atoi(line);\n        return 1;\n    }\n// case 2\n    int a = 1, b = 2;\n    swap(&amp;a, &amp;b);\n// case 3 \n    int *a;\n    getint(a);      \n</code></pre> <ul> <li>The meaning of ``adding 1 to a pointer,'' and by extension, all pointer arithmetic, is that pa+1 points to the next object, and pa+i points to the i-th object beyond pa.</li> <li>The correspondence between indexing and pointer arithmetic is very close. By definition, the value of a variable or expression of type array is the address of element zero of the array.</li> <li>In evaluating a[i], C converts it to *(a+i) immediately; the two forms are equivalent.</li> <li>When an array name is passed to a function, what is passed is the location of the initial element.</li> </ul> C<pre><code>    /** case1 **/\n    pa = &amp;a[5];\n    /** case2 **/\n    pa = &amp;a[0]; // pa = a;\n    i = a[5];   // i = *(a+5);\n    /** case3 **/\n    int a[10];\n    f(a);\n    /** case4 **/\n    int a[10];\n    int *pa;\n    pa = a;\n    *pa = 0;\n    *(pa+1) = 1;\n    pa[2] = 2;\n    pa = &amp;a[5];\n    *pa = 5;\n    *(pa-1) = 4;\n    pa[1] = 6;\n    pa = &amp;a[9];\n    *pa = 9;\n    pa[-1] = 8;\n</code></pre> C<pre><code>// null pointer\nint *ip = 0;\n\n#define NULL 0\nint *ip = NULL;\n\nif(p != NULL)\n        *p = 0;\nelse    printf(\"p doesn't point anywhere\\n\");\n\n// address arithmetic\nint a[10];\nint *pa = &amp;a[0];\n*(pa+1) = 1;\n\nint a[10];\nint *pa = &amp;a[0];\n*(pa+sizeof(int)) = 1;\n\nint a[10];\nint *pa1 = &amp;a[0];\nint *pa2 = pa1 + 5;\n</code></pre> <ul> <li>C does not provide any operators for processing an entire string of characters as a unit.</li> </ul> C<pre><code>// assigning two pointers, not copying two entire strings.\nchar *pmessage;\npmessage = \"now is the time\";\npmessage = \"hello, world\";\n\n// reassign pmessage to point somewhere else, but as long as it points to the string literal, we can't modify the characters it points to.\nchar amessage[] = \"now is the time\";\nchar *pmessage = \"now is the time\";\namessage[0] = 'N';\npmessage[0] = 'N';   /* NOT WORK */\n\n// The first function is strcpy(s,t), which copies the string t to the string s. It would be nice just to say s=t but this copies the pointer, not the characters.\nvoid strcpy(char s[], char t[])\n{\n    int i;\n    for(i = 0; t[i] != '\\0'; i++)\n        s[i] = t[i];\n    s[i] = '\\0';\n}\n\nvoid strcpy(char *s, char *t)\n{\n    while(*t != '\\0')\n        *s++ = *t++;\n    *s = '\\0';\n}\n\n// any time you copy strings, using strcpy or some other method, you must be sure that the destination string is a writable array with enough space for the string you're writing.\n// Remember, too, that the space you need is the number of characters in the string you're copying, plus one for the terminating '\\0'.\nchar *p1 = \"Hello, world!\";\nchar *p2;\nstrcpy(p2, p1);     /* WRONG */\n\nchar *p = \"Hello, world!\";\nchar a[13];\nstrcpy(a, p);       /* WRONG */\n\nchar *p3 = \"Hello, world!\";\nchar *p4 = \"A string to overwrite\";\nstrcpy(p4, p3);     /* WRONG */\n</code></pre> <ul> <li>Since pointers are variables themselves, they can be stored in arrays just as other variables can.</li> <li>lineptr is an array of MAXLINES elements, each element of which is a pointer to a char. That is, lineptr[i] is a character pointer.</li> </ul> C<pre><code>if (nlines &gt;= maxlines || (p == alloc(len)) == NULL)\n    ....\n</code></pre>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#13-64-pointers-to-structures","title":"1.3 6.4 (pointers to structures)","text":"<ul> <li>never to access outside of the defined and allocated bounds of an array</li> <li>Don't assume, however, that the size of a structure is the sum of the sizes of its members.</li> </ul> C<pre><code>int a[10];\nint *ip;\nfor (ip = &amp;a[0]; ip &lt; &amp;a[10]; ip++)\n    ...\nor\nint a[10];\nint *endp = &amp;a[10];\nint *ip;\nfor (ip = a; ip &lt; endp; ip++)\n    ...\n</code></pre>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#2-lecture-2programming-xv6-in-c","title":"2. Lecture 2:programming xv6 in C","text":""},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#21-memory","title":"2.1 memory","text":""},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#211-hardware-layer-ram-and-io","title":"2.1.1 Hardware layer: RAM and I/O","text":"<ul> <li>\"How does a bus work?\"</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#212-cpuos-layer-address-spaces","title":"2.1.2 CPU/OS layer: Address Spaces","text":"<ul> <li>How to interact with an address space?</li> </ul> <p>Idea #1: Address spaces can have holes</p> <p></p> <p>Idea #2: Address spaces can have permissions</p> <p></p> <p>Idea #3: Combine RAM and devices</p> <p></p> <p>More ideas not discussed today    </p> <p>Typical granularity for mappings is a page (4KB), not a byte</p> <p>Idea #4: Virtual memory</p> <p>Allows each process to have its own address space</p> <p>Idea #5: Cache coherence and consistency</p> <p>Allows multiple CPUs to share memory in an address space Will be covered in later lectures.....</p>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#213-compilerlibrary-layer-stacks-and-heaps","title":"2.1.3 Compiler/Library Layer: Stacks and Heaps","text":"<p>memory allocation</p> <p>1. Stack</p> <p>A stack allocates memory when a function is called and frees itwhen a function returns.</p> <p></p> <p>2. Heap</p> <p>A heap manages memory that is allocated and freed independently of function invocationst.</p> <p></p> C<pre><code>struct foo *f = malloc(sizeof(*f));\nif (!f) // handle out of memory error \n    memset(f, 0, sizeof(*f)); // initialization \n// do something with f\nfree(f);\n</code></pre> <p>3. When is it better to use a stack vs. a heap?</p> <ul> <li>Always prefer a stack, except if the object must remain valid after the function returns or if the object is too large</li> <li>Why? More efficient and simpler</li> <li>Note: A stack is generally much smaller than the heap</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#214-common-memory-management-pitfalls","title":"2.1.4 Common memory management pitfalls","text":"<ol> <li>Using memory after freeing it</li> <li>Freeing the same object more than once</li> <li>Forgetting to initialize memory (nothing is zeroed automatically)</li> <li>Writing beyond the end of an array (buffer overflow)</li> <li>Forgetting to free an object (memory leak)</li> <li>Casting an object to the wrong type</li> <li>Forgetting to check if an allocation failed</li> <li>Using pointers to locations on the stack (if they could return)</li> </ol>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#22-why-c","title":"2.2 Why C","text":"<p>1. good for low-level programming</p> <ul> <li>easy mapping between C and RISC-V instructions</li> <li>easy mapping between C types and hardware structures</li> </ul> <p>2. minimal runtime</p> <ul> <li>easy to port to another hardware platform</li> <li>direct access to hardware</li> </ul> <p>3. explicit memory management</p> <ul> <li>no garbage collector</li> <li>kernel is in complete control of memory management</li> </ul> <p>4. efficient: compiled (no interpreter)</p> <ul> <li>compiler compiles C  to assembly</li> </ul> <p>5. popular for building kernels, system software, etc.</p> <ul> <li>good support for C on almost any platform</li> </ul> <p>why not?</p> <ul> <li>easy to write incorrect code</li> <li>easy to write code that has security vulnerabilities</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#23-use-of-c-in-xv6","title":"2.3 use of C in xv6","text":""},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#231-memory-layout","title":"2.3.1 memory layout","text":"<ul> <li>text: code, read-only data</li> <li>data: global C variables</li> <li>stack: function's local variables</li> <li>heap: dynamic memory allocation using sbrk, malloc/free</li> </ul> example: compile cat.cexplore a.out of _cat <ul> <li>Makefile defines how</li> <li>gcc compiles to .o<ul> <li>ld links .o files into an executable</li> </ul> </li> <li>ulibc.o is xv6 minimal C library</li> <li>executable has a.out format with sections for:<ul> <li>text (code), initialized data, symbol table, debug info, and more</li> </ul> </li> </ul> <ul> <li>riscv64-linux-gnu-objdump -S user/_cat<ul> <li>0x0: cat</li> <li>0x8e: _main</li> </ul> </li> <li>what is _main?<ul> <li>defined in ulib.c, which calls main() and exit(0)</li> </ul> </li> <li>where is data memory?<ul> <li>in data/bss segment</li> <li>must be setup by kernel</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#232-pointers","title":"2.3.2 pointers","text":"<ul> <li>a pointer is a memory address <ul> <li>every variable has a memory address (i.e., p = &amp;i)</li> <li>so each variable can be accessed through its pointer (i.e., *i)</li> <li>a pointer can be variable (e.g., int *p) </li> <li>a pointer has a memory address, etc. </li> </ul> </li> <li>pointer arithmetic </li> <li>referencing elements of a struct</li> </ul> C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n\nint g = 3;\n\nint\nmain(int ac, char **av)\n{\n  int l = 5;   // local variables don't have a default value\n  int *p, *q;\n\n  // take address of variable\n  p = &amp;g;\n  q = &amp;l;\n  printf(\"p %p q %p\\n\", p, q);\n\n  // assign using pointer\n  *p = 11;\n  *q = 13;\n  printf(\"g %d l %d\\n\", g, l);\n\n  // struct\n  struct two {\n    int a;\n    int b;\n  } s;\n  s.a = 10;\n  struct two *ptr = &amp;s;\n  printf(\"%d %d\\n\", s.a, ptr-&gt;a);\n\n  // can take address of any variable\n  int **pp;\n  pp = &amp;p;    // take address of a pointer variable\n  printf(\"pp %p %p %d\\n\", pp, *pp, **pp);\n\n  int (*f)(int, char **);\n  f = &amp;main;  // take address of a function&lt;\n  printf(\"main: %p\\n\", f);\n\n  return 0;\n}\n</code></pre>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#233-arrays","title":"2.3.3 arrays","text":"<ul> <li>contiguous memory holding same data type (char, int, etc.)<ul> <li>no bound checking, no growing </li> </ul> </li> <li>two ways to access arrays:<ul> <li>through index: buf[0], buf[1]</li> <li>through pointer: *buf, *(buf+1)</li> </ul> </li> </ul> C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n\nint a[3] = {1, 2, 3};    // an array of 3 int's\nchar b[3] = {'a', 'b', 'c'};  // an array of 3 char's\n\nint\nmain(int ac, char **av)\n{\n\n  // first element is at index 0\n  printf(\"%d\\n\", a[0]);\n\n  a[1] += 1;  // use index access\n  *(a+2) = 5; // pointer access\n\n  printf(\"%d %d\\n\", a[1], a[2]);\n\n  // pointers to array elements\n  printf(\"a %p a1 %p a2 %p a2 %p\\n\", a, a+1, a+2, &amp;a[2]);\n\n  // pointer arithmetic uses type\n  printf(\"%p %p\\n\", b, b+1);\n\n  return 0;\n}\n</code></pre>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#234-strings","title":"2.3.4 strings","text":"<ul> <li>arrays of characters, ending in 0</li> </ul> C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n\nchar *s = \"123\";\n\nint\nmain(int ac, char **av)\n{\n  char s1[4] = {'1', '2', '3', '\\0'}; \n\n  // s and s1 are strings\n  printf(\"s %s s1 %s\\n\", s, s1);\n\n  // can use index or pointer access\n  printf(\"%c %c\\n\", s[0], *s);\n  printf(\"%c %c\\n\", s[2], *(s+2));\n\n  // read beyond str end; DON'T DO THIS\n  printf(\"%x %p %p\\n\", s1[4], s1, &amp;s1[4]);\n\n  // write beyond str end; DON'T DO THIS\n  s1[4] = 'D';\n\n  return 0;\n}\n</code></pre> <ul> <li>ulib.c has several functions for strings<ul> <li>strlen() --- use array access </li> <li>strcmp() --- use pointer access</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#235-lists","title":"2.3.5 lists","text":"<ul> <li>single-linked list<ul> <li>kernel/kalloc.c implements a memory allocator </li> <li>keeps a list of free \"pages\" of memory <ul> <li>a page is 4096 bytes </li> <li>free prepends </li> <li>kalloc grabs from front of list</li> </ul> </li> </ul> </li> <li>double-linked list <ul> <li>kernel/bio.c implements an LRU buffer cache </li> <li>brelse() needs to move a buf to the front of the list </li> <li>see buf.h:two pointers: prev and next</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#236-bitwise-operators","title":"2.3.6 bitwise operators","text":"C<pre><code>0b10001 &amp; 0b10000 == 0b10000 \n0b10001 | 0b10000 == 0b10001 \n0b10001 ^ 0b10000 == 0b00001 \n~0b1000 == 0b0111\n</code></pre>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec2/#237-common-c-bugs","title":"2.3.7 common C bugs","text":"<ul> <li>use after free </li> <li>double free </li> <li>uninitialized memory </li> <li>memory on stack or returned by malloc are not zero </li> <li>buffer overflow </li> <li>write beyond end of array </li> <li>memory leak </li> <li>type confusion </li> <li>wrong type cast</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/","title":"Lec3","text":""},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#1-preparation-operating-system-organization","title":"1. Preparation: Operating system organization","text":"<p>1. book-riscv-rev3 Chapter2</p> <p>2. xv6 code: kernel/proc.h, kernel/defs.h, kernel/entry.S, kernel/main.c, user/initcode.S, user/init.c, and skim kernel/proc.c and kernel/exec.c</p> <ul> <li>A key requirement for an operating system is to support several activities at once. </li> <li>an operating system must fulfill three requirements: multiplexing, isolation, and interaction.</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#11-abstracting-physical-resources","title":"1.1 Abstracting physical resources","text":"<ul> <li>That is, one could implement the system calls in Figure 1.2 as a library, with which applications link. In this plan, each application could even have its own library tailored to its needs. Applications could directly interact with hardware resources and use those resources in the best way for the application</li> <li>It\u2019s more typical for applications to not trust each other, and to have bugs, so one often wants stronger isolation than a cooperative scheme provides.</li> <li>To achieve strong isolation it\u2019s helpful to forbid applications from directly accessing sensitive hardware resources, and instead to abstract the resources into services.</li> <li>Similarly, Unix transparently switches hardware CPUs among processes, saving and restor- ing register state as necessary, so that applications don\u2019t have to be aware of time sharing. </li> <li>Many forms of interaction among Unix processes occur via file descriptors. Not only do file descriptors abstract away many details (e.g., where data in a pipe or file is stored), they are also defined in a way that simplifies interaction. </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#12-user-mode-supervisor-mode-and-system-calls","title":"1.2 User mode, supervisor mode, and system calls","text":"<ul> <li>Instead, the operating system should be able to clean up the failed application and continue running other applications. To achieve strong isolation, the operating system must arrange that applications cannot modify (or even read) the operating system\u2019s data structures and instructions and that applications cannot access other processes\u2019 memory.</li> <li>CPUs provide hardware support for strong isolation. </li> <li>machine mode, supervisor mode, and user mode</li> <li>In supervisor mode the CPU is allowed to execute privileged instructions</li> <li>An application can execute only user-mode instructions (e.g., adding numbers, etc.) and is said to be running in user space, while the software in supervisor mode can also execute privileged instructions and is said to be running in kernel space. </li> <li>An application that wants to invoke a kernel function (e.g., the read system call in xv6) must transition to the kernel; an application cannot invoke a kernel function directly.</li> <li>It is important that the kernel control the entry point for transitions to supervisor mode; if the application could decide the kernel entry point, a malicious application could, for example, enter the kernel at a point where the validation of arguments is skipped.</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#13-kernel-organization","title":"1.3 Kernel organization","text":"<ul> <li>A key design question is what part of the operating system should run in supervisor mode.</li> <li>In this organization the entire operating system runs with full hardware privilege. </li> <li>Furthermore, it is easier for different parts of the op- erating system to cooperate.</li> <li>A downside of the monolithic organization is that the interfaces between different parts of the operating system are often complex (as we will see in the rest of this text)</li> </ul> <ul> <li>easy for an operating system developer to make a mistake. In a monolithic kernel, a mistake is fatal, because an error in supervisor mode will often cause the kernel to fail.</li> <li>To reduce the risk of mistakes in the kernel, OS designers can minimize the amount of operating system code that runs in supervisor mode, and execute the bulk of the operating system in user mode. This kernel organization is called a microkernel.</li> <li>In a microkernel, the kernel interface consists of a few low-level functions for starting applica- tions, sending messages, accessing device hardware, etc. This organization allows the kernel to be relatively simple, as most of the operating system resides in user-level servers.</li> <li>Many Unix kernels are monolithic.</li> <li>There is much debate among developers of operating systems about which organization is better, and there is no conclusive evidence one way or the other.</li> <li>From this book\u2019s perspective, microkernel and monolithic operating systems share many key ideas. They implement system calls, they use page tables, they handle interrupts, they support processes, they use locks for concurrency control, they implement a file system, etc.</li> <li>Xv6 is implemented as a monolithic kernel, like most Unix operating systems. </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#14-code-xv6-organization","title":"1.4 Code: xv6 organization","text":"<ul> <li>The source is divided into files, following a rough notion of modularity.</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#15-process-overview","title":"1.5 Process overview","text":"<ul> <li>The unit of isolation in xv6 (as in other Unix operating systems) is a process. The process ab- straction prevents one process from wrecking or spying on another process\u2019s memory, CPU, file descriptors, etc. It also prevents a process from wrecking the kernel itself, so that a process can\u2019t subvert the kernel\u2019s isolation mechanisms. The kernel must implement the process abstraction with care because a buggy or malicious application may trick the kernel or hardware into doing something bad (e.g., circumventing isolation). </li> <li>To help enforce isolation, the process abstraction provides the illusion to a program that it has its own private machine.</li> <li>Xv6 uses page tables (which are implemented by hardware) to give each process its own ad- dress space. The RISC-V page table translates (or \u201cmaps\u201d) a virtual address (the address that an RISC-V instruction manipulates) to a physical address (an address that the CPU chip sends to main memory).</li> <li>Xv6 maintains a separate page table for each process that defines that process\u2019s address space. As illustrated in Figure 2.3, an address space includes the process\u2019s user memory starting at virtual address zero. Instructions come first, followed by global variables, then the stack, and finally a \u201cheap\u201d area (for malloc) that the process can expand as needed.</li> </ul> <ul> <li>the trampoline page contains the code to transition in and out of the kernel and mapping the trapframe is necessary to save/restore the state of the user process</li> <li>The xv6 kernel maintains many pieces of state for each </li> <li>A process\u2019s most important pieces of kernel state are its page table, its kernel stack, and its run state.</li> <li>Each process has a thread of execution (or thread for short) that executes the process\u2019s instruc- tions. A thread can be suspended and later resumed. To switch transparently between processes, the kernel suspends the currently running thread and resumes another process\u2019s thread.</li> <li>Each process has two stacks: a user stack and a kernel stack (p-&gt;kstack).</li> <li>while a process is in the kernel, its user stack still contains saved data, but isn\u2019t ac- tively used. A process\u2019s thread alternates between actively using its user stack and its kernel stack. The kernel stack is separate (and protected from user code) so that the kernel can execute even if a process has wrecked its user stack.</li> <li>A process can make a system call by executing the RISC-V ecall instruction. This instruction raises the hardware privilege level and changes the program counter to a kernel-defined entry point.</li> <li>A process\u2019s thread can \u201cblock\u201d in the kernel to wait for I/O, and resume where it left off when the I/O has finished.</li> <li>A process\u2019s page table also serves as the record of the addresses of the physical pages allocated to store the process\u2019s memory.</li> <li>In summary, a process bundles two design ideas: an address space to give a process the illusion of its own memory, and, a thread, to give the process the illusion of its own CPU. In xv6, a process consists of one address space and one thread. In real operating systems a process may have more than one thread to take advantage of multiple CPUs. process</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#16-code-starting-xv6-the-first-process-and-system-call","title":"1.6 Code: starting xv6, the first process and system call","text":"<ul> <li>The RISC-V starts with paging hardware disabled: virtual addresses map directly to physical addresses.</li> <li>The reason it places the kernel at 0x80000000 rather than 0x0 is because the address range 0x0:0x80000000 contains I/O devices.</li> <li>The code at _entry loads the stack pointer register sp with the address stack0+4096, the top of the stack, because the stack on RISC-V grows down. </li> <li>The function start performs some configuration that is only allowed in machine mode, and then switches to supervisor mode. </li> <li>Before jumping into supervisor mode, start performs one more task: it programs the clock chip to generate timer interrupts.</li> <li>Once the kernel has completed exec, it returns to user space in the /init process. </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#17-security-model","title":"1.7 Security Model","text":"<ul> <li>Here\u2019s a high-level view of typical security assumptions and goals in operating system design.</li> <li>The operating system must assume that a process\u2019s user-level code will do its best to wreck the kernel or other processes.</li> <li>The kernel\u2019s goal to restrict each user processes so that all it can do is read/write/execute its own user memory</li> <li>The kernel must prevent any other actions. This is typically an absolute requirement in kernel design.</li> <li>The expectations for the kernel\u2019s own code are quite different. Kernel code is assumed to be written by well-meaning and careful programmers. Kernel code is expected to be bug-free, and certainly to contain nothing malicious. This assumption affects how we analyze kernel code.</li> <li>It\u2019s difficult to prevent clever user code from making a system unusable (or causing it to panic) by consuming kernel-protected resources \u2013 disk space, CPU time, process table slots, etc. </li> <li>It\u2019s worthwhile to design safeguards into the kernel against the possibility that it has bugs: assertions, type checking, stack guard pages, etc. </li> <li>Finally, the dis- tinction between user and kernel code is sometimes blurred</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#18-real-world","title":"1.8 Real World","text":"<ul> <li>Most operating systems have adopted the process concept, and most processes look similar to xv6\u2019s.</li> <li>Modern operating systems, however, support several threads within a process, to allow a single process to exploit multiple CPUs.</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#2-lecture-3","title":"2. Lecture 3","text":"<p>1. Lecture Topic:</p> <ul> <li>OS design <ul> <li>system calls </li> <li>micro/monolithic kernel </li> </ul> </li> <li>First system call in xv6</li> </ul> <p></p> <p>2. Goal of OS </p> <ul> <li>run multiple applications </li> <li>isolate them </li> <li>multiplex them </li> <li>share</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#21-isolation","title":"2.1 Isolation","text":"<p>1. Strawman design: No OS </p> <ul> <li>Application directly interacts with hardware <ul> <li>CPU cores &amp; registers </li> <li>DRAM chips </li> <li>Disk blocks </li> <li>...</li> </ul> </li> <li>OS library perhaps abstracts some of it </li> </ul> <p>2. Strawman design: not conducive to multiplexing </p> <ul> <li>each app periodically must give up hardware </li> <li>BUT, weak isolation <ul> <li>app forgets to give up, no other app runs </li> <li>apps has end-less loop, no other app runs </li> <li>you cannot even kill the badly app from another app</li> </ul> </li> <li>but used by real-time OSes<ul> <li>\"cooperative scheduling\" </li> </ul> </li> </ul> <p>3. Strawman design: not conducive to memory isolation </p> <ul> <li>all apps share physical memory </li> <li>one app can overwrites another apps memory </li> <li>one app can overwrite OS library</li> </ul> <p>4. Unix interface conducive to OS goals </p> <ul> <li>abstracts the hardware in way that achieves goals </li> <li>processes (instead of cores): fork<ul> <li>OS transparently allocates cores to processes <ul> <li>Saves and restore registers </li> </ul> </li> <li>Enforces that processes give them up <ul> <li>Periodically re-allocates cores     </li> </ul> </li> </ul> </li> <li>memory (instead of physical memory): exec <ul> <li>Each process has its \"own\" memory </li> <li>OS can decide where to place app in memory </li> <li>OS can enforce isolation between memory of different apps </li> <li>OS allows storing image in file system</li> </ul> </li> <li>files (instead of disk blocks)<ul> <li>OS can provide convenient names </li> <li>OS can allow sharing of files between processes/users </li> <li>pipes (instead of shared physical mem)</li> <li>OS can stop sender/receiver</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#22-defensive","title":"2.2 Defensive","text":"<p>OS must be defensive </p> <ul> <li>an application shouldn't be able to crash OS </li> <li>an application shouldn't be able to break out of its isolation <ul> <li>=&gt; need strong isolation between apps and OS</li> </ul> </li> <li>approach: hardware support<ul> <li>user/kernel mode</li> <li>virtual memory</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#23-hardware-support","title":"2.3 Hardware support","text":"<p>1. Processors provide user/kernel mode</p> <ul> <li>kernel mode: can execute \"privileged\" instructions <ul> <li>e.g., setting kernel/user bit </li> <li>e.g., reprogramming timer chip</li> </ul> </li> <li>user mode: cannot execute privileged instructions <ul> <li>Run OS in kernel mode, applications in user mode</li> <li>RISC-V has also an M mode, which we mostly ignore</li> </ul> </li> </ul> <p>2. Processors provide virtual memory</p> <ul> <li>Hardware provides page tables that translate virtual address to physical </li> <li>Define what physical memory an application can access </li> <li>OS sets up page tables so that each application can access only its memory</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#24-userkernel-mode-change","title":"2.4 User/Kernel mode change","text":"<p>1. Apps must be able to communicate with kernel </p> <ul> <li>Write to storage device, which is shared =&gt; must be protected =&gt; in kernel </li> <li>Exit app </li> <li>...</li> </ul> <p>2. Solution: add instruction to change mode in controlled way</p> <ul> <li>ecall</li> <li>enters kernel mode at a pre-agreed entry point</li> </ul> <p></p> <ul> <li>user / kernel (redline)</li> <li>app -&gt; printf() -&gt; write() -&gt; SYSTEM CALL -&gt; sys_write() -&gt; ... <ul> <li>user-level libraries are app's private business </li> </ul> </li> <li>kernel internal functions are not callable by user</li> <li>other way of drawing picture:<ul> <li>syscall 1  -&gt; system call stub -&gt; kernel entry -&gt; syscall -&gt; fs </li> <li>syscall 2                                                 -&gt; proc</li> </ul> </li> <li>system call stub executes special instruction to enter kernel <ul> <li>hardware switches to kernel mode </li> <li>but only at an entry point specified by the kernel</li> </ul> </li> <li>syscall need some way to get at arguments of syscall</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#25-monolithic-kernel-vs-micro-kernel","title":"2.5 Monolithic Kernel vs Micro Kernel","text":"<p>1. Kernel is the Trusted Computing Base (TCB)</p> <ul> <li>Kernel must be \"correct\"<ul> <li>Bugs in kernel could allow user apps to circumvent kernel/user</li> </ul> </li> <li>Kernel must treat user apps as suspect <ul> <li>User app may trick kernel to do the wrong thing </li> <li>Kernel must check arguments carefully </li> <li>Setup user/kernel correctly</li> </ul> </li> <li>Kernel in charge of separating applications too <ul> <li>One app may try to read/write another app's memory </li> <li>=&gt; Requires a security mindset </li> <li>Any bug in kernel may be a security exploit</li> </ul> </li> </ul> <p>Aside: can one have process isolation WITHOUT h/w-supported </p> <ul> <li>kernel/user mode and virtual memory? </li> <li>yes! use a strongly-typed programming language <ul> <li>For example, see Singularity O/S </li> </ul> </li> <li>the compiler is then the trust computing base (TCB)</li> <li>but h/w user/kernel mode is the most popular plan</li> </ul> <p></p> <p>2. Monolothic kernel</p> <ul> <li>OS runs in kernel space </li> <li>Xv6 does this.  Linux etc. too. </li> <li>kernel interface == system call interface </li> <li>one big program with file system, drivers, &amp;c</li> <li>good: easy for subsystems to cooperate <ul> <li>one cache shared by file system and virtual memory</li> </ul> </li> <li>bad: interactions are complex <ul> <li>leads to bugs</li> <li>no isolation within</li> </ul> </li> </ul> <p></p> <p>3. Microkernel design</p> <ul> <li>many OS services run as ordinary user programs <ul> <li>file system in a file server </li> </ul> </li> <li>kernel implements minimal mechanism to run services in user space <ul> <li>processes with memory </li> <li>inter-process communication (IPC)</li> <li>kernel interface != system call interface</li> </ul> </li> <li>good: more isolation</li> <li>bad: may be hard to get good performance </li> <li>both monolithic and microkernel designs widely used</li> </ul> <p>4. Xv6 case study</p> <ul> <li>Monolithic kernel <ul> <li>Unix system calls == kernel interface</li> </ul> </li> <li>Source code reflects OS organization (by convention)<ul> <li>user/    apps in user mode</li> <li>kernel/  code in kernel mode</li> </ul> </li> <li>Kernel has several parts <ul> <li>kernel/defs.h(proc, fs, ...)</li> </ul> </li> <li>Goal: read source code and understand it (without consulting book)</li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#26-building-kernel","title":"2.6 Building kernel","text":"<p>1. Using xv6</p> <ul> <li>Makefile builds <ul> <li>kernel program </li> <li>user programs </li> <li>mkfs</li> </ul> </li> <li>$ make qemu <ul> <li>runs xv6 on qemu</li> <li>emulates a RISC-V computer</li> </ul> </li> </ul> <p>2. Building kernel</p> <p></p> <p>.c -&gt; gcc -&gt; .s -&gt; .o  \\ ....                     ld -&gt; a.out .c -&gt; gcc -&gt; .s -&gt; .o  /</p> <ul> <li>makefile keeps .asm file around for binary <ul> <li>see for example, kernel/kernel.asm</li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#27-risc-v-computer","title":"2.7 RISC-V computer","text":"<p>1. The RISC-V computer</p> <p></p> <ul> <li>RISC-V processor with 4 cores</li> <li>RAM (128 MB)</li> <li>support for interrupts (PLIC, CLINT)</li> <li>support for UART <ul> <li>allows xv6 to talk to console </li> <li>allows xv6 to read from keyboard</li> </ul> </li> <li>support for e1000 network card (through PCIe)</li> </ul> <p>2. Development using Qemu</p> <ul> <li>More convenient than using the real hardware </li> <li>Qemu emulates several RISC-V computers<ul> <li>we use the \"virt\" one(https://github.com/riscv/riscv-qemu/wiki)</li> <li>close to the SiFive board (https://www.sifive.com/boards), but with virtio for disk</li> </ul> </li> </ul> <p>3. What is \"to emulate\"?</p> <p></p> <ul> <li>Qemu is a C program that faithfully implements a RISC-V processor</li> </ul> C<pre><code>for (;;) {\n    read next instructions\n    decode instruction\n    execute instruction (updating processor state)\n}\n</code></pre> <p>software = hardware</p>"},{"location":"os/2401mit6s081/%5B0%5DLecture/lec3/#28-boot-xv6","title":"2.8 Boot xv6","text":"<ul> <li>$ make CPUS=1 qemu-gdb <ul> <li>runs xv6 under gdb (with 1 core)</li> </ul> </li> <li>Qemu starts xv6 in kernel/entry.S (see kernel/kernel.ld)<ul> <li>set breakpoint at _entry <ul> <li>look at instruction </li> <li>info reg</li> </ul> </li> <li>set breakpoint at main <ul> <li>Walk through main </li> </ul> </li> <li>single step into userinit <ul> <li>Walk through userinit </li> <li>show proc.h </li> <li>show allocproc()</li> <li>show initcode.S/initcode.asm </li> </ul> </li> <li>break forkret()<ul> <li>walk to userret </li> </ul> </li> <li>break syscall <ul> <li>print num </li> <li>syscalls[num]</li> <li>exec \"/init\"</li> </ul> </li> </ul> </li> </ul>"},{"location":"os/2401mit6s081/%5B1%5DLabs/lab1/","title":"Lab: Xv6 and Unix utilities","text":"<p>https://pdos.csail.mit.edu/6.1810/2023/labs/util.html</p>"},{"location":"os/2401mit6s081/%5B1%5DLabs/lab1/#0-macos-environments","title":"0. MacOs Environments","text":"<p>For this class we'll need the RISC-V versions of a couple different tools: QEMU 5.1+, GDB 8.3+, GCC, and Binutils.</p> <p>Previously installed corresponding programs can be omitted by yourself.</p> <ul> <li>First, install developer tools:</li> </ul> Bash<pre><code>xcode-select --install\n</code></pre> <ul> <li>Next, install Homebrew, a package manager for macOS:</li> </ul> Bash<pre><code>$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <ul> <li>Next, install the RISC-V compiler toolchain:</li> </ul> Bash<pre><code>$ brew tap riscv/riscv\n$ brew install riscv-tools\n</code></pre> <ul> <li>The brew formula may not link into /usr/local. You will need to update your shell's rc file (e.g. ~/.bashrc) to add the appropriate directory to $PATH.</li> </ul> Bash<pre><code>PATH=$PATH:/usr/local/opt/riscv-gnu-toolchain/bin\n</code></pre> <ul> <li>Finally, install QEMU:</li> </ul> Bash<pre><code>brew install qemu\n</code></pre> <ul> <li>Testing your Installation:</li> </ul> Bash<pre><code>$ qemu-system-riscv64 --version\nQEMU emulator version 5.1.0\n$ riscv64-unknown-elf-gcc --version\nriscv64-unknown-elf-gcc (GCC) 10.1.0\n...\n</code></pre> <p></p> <p></p>"},{"location":"os/2401mit6s081/%5B1%5DLabs/lab1/#1-boot-xv6","title":"1. Boot xv6","text":"<ul> <li>Fetch the git repository for the xv6 source for the lab:</li> </ul> Bash<pre><code>$ git clone git://g.csail.mit.edu/xv6-labs-2023\nCloning into 'xv6-labs-2023'...\n...\n$ cd xv6-labs-2023\n</code></pre> <ul> <li>Build and run xv6:</li> </ul> Bash<pre><code>$ make qemu\nriscv64-unknown-elf-gcc    -c -o kernel/entry.o kernel/entry.S\nriscv64-unknown-elf-gcc -Wall -Werror -O -fno-omit-frame-pointer -ggdb -DSOL_UTIL -MD -mcmodel=medany -ffreestanding -fno-common -nostdlib -mno-relax -I. -fno-stack-protector -fno-pie -no-pie   -c -o kernel/start.o kernel/start.c\n...\nriscv64-unknown-elf-ld -z max-page-size=4096 -N -e main -Ttext 0 -o user/_zombie user/zombie.o user/ulib.o user/usys.o user/printf.o user/umalloc.o\nriscv64-unknown-elf-objdump -S user/_zombie &gt; user/zombie.asm\nriscv64-unknown-elf-objdump -t user/_zombie | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$/d' &gt; user/zombie.sym\nmkfs/mkfs fs.img README  user/xargstest.sh user/_cat user/_echo user/_forktest user/_grep user/_init user/_kill user/_ln user/_ls user/_mkdir user/_rm user/_sh user/_stressfs user/_usertests user/_grind user/_wc user/_zombie\nnmeta 46 (boot, super, log blocks 30 inode blocks 13, bitmap blocks 1) blocks 954 total 1000\nballoc: first 591 blocks have been allocated\nballoc: write bitmap block at sector 45\nqemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp 3 -nographic -drive file=fs.img,if=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0\n\nxv6 kernel is booting\n\nhart 2 starting\nhart 1 starting\ninit: starting sh\n</code></pre> <ul> <li>xv6 has no ps command, but, if you type <code>Ctrl-p</code>, the kernel will print information about each process.<ul> <li>If you try it now, you'll see two lines: one for init, and one for <code>sh</code>. </li> </ul> </li> </ul> <ul> <li>To quit qemu type: <code>Ctrl-a x</code> (press <code>Ctrl</code> and <code>a</code> at the same time, followed by x).</li> </ul>"},{"location":"os/2401mit6s081/%5B1%5DLabs/lab1/#2-sleepeasy","title":"2. sleep(easy)","text":"<p>Implement a user-level sleep program for xv6, along the lines of the UNIX sleep command. Your sleep should pause for a user-specified number of ticks. A tick is a notion of time defined by the xv6 kernel, namely the time between two interrupts from the timer chip. Your solution should be in the file user/sleep.c.</p> <p>\u5373\u5b9e\u73b0\u7cfb\u7edf\u51fd\u6570 sleep \u7684\u529f\u80fd\uff0c\u6839\u636e\u63d0\u793a\u8fdb\u884c\u5b9e\u73b0\uff0c\u5176\u4e2d\u5173\u952e\u70b9\u5c31\u662f\uff1a</p> <ul> <li>\u5f53\u7528\u6237\u53c2\u6570\u7f3a\u5931\u65f6\uff0c\u9700\u8981\u63d0\u793a\u9519\u8bef\u4fe1\u606f</li> <li>\u7cfb\u7edf\u51fd\u6570 sleep \u7684\u5165\u53c2\u662f\u6574\u578b\uff0c\u800c\u5728\u7ec8\u7aef\u83b7\u53d6\u7684\u503c\u662f\u5b57\u7b26\uff0c\u6b64\u65f6\u53ef\u4f7f\u7528 atoi \u51fd\u6570</li> </ul> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n\nint main(int argc, char *argv[]) {\n  if (argc != 2) {\n    fprintf(2, \"usage: sleep [ticks num]\\n\");\n    exit(1);\n  }\n\n  int ticks = atoi(argv[1]);\n  int ret = sleep(ticks);\n  exit(ret);\n}\n</code></pre>"},{"location":"os/2401mit6s081/%5B1%5DLabs/lab1/#3-pingpongeasy","title":"3. pingpong(easy)","text":"<p>\u8be5\u9898\u4e3b\u8981\u8003\u67e5 pipe\u3001fork \u7684\u4f7f\u7528\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bfb\u5199\u5e94\u7528\u3002\u6839\u636e\u63d0\u793a\u548c\u53c2\u8003\u793a\u4f8b8\u8fdb\u884c\u5b9e\u73b0\uff0c\u5176\u4e2d\u8f83\u4e3a\u5173\u952e\u7684\u662f\uff1a</p> <ul> <li>\u7236\u5b50\u8fdb\u7a0b\u662f\u53cc\u5411\u901a\u4fe1\uff0cping \u548c pong \u9700\u8981\u4e24\u4e2a pipe</li> <li>\u4e3a\u4e86\u907f\u514d\u8d44\u6e90\u6cc4\u6f0f\u548c\u963b\u585e\uff0c\u53ef\u901a\u8fc7 close \u5173\u95ed\u4e0d\u518d\u9700\u8981\u7684 pipe \u7aef\u53e3</li> <li>\u5728 read pipe \u65f6\u662f\u8fdb\u7a0b\u963b\u585e\u7684\uff0c\u76f4\u5230\u6709\u6570\u636e write pipe \u540e\u624d\u4f1a\u7ee7\u7eed\u5411\u4e0b\u6267\u884c</li> </ul> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n\nint main(){\n  int pid,fork_pid;\n  int child_pipe[2],parent_pipe[2];\n  char buf[] = {'a'};\n\n  pipe(child_pipe);\n  pipe(parent_pipe);\n\n  fork_pid = fork();\n\n  if (fork_pid == 0) { // child\n    pid = getpid();\n    // step2: read a byte from the parent, and print\n    close(parent_pipe[1]);\n    read(parent_pipe[0],buf,1);\n    printf(\"%d: received ping\\n\",pid);\n    // step3: write a byte to the parent\n    close(child_pipe[0]);\n    write(child_pipe[1],buf,1);\n  } else {  // parent\n    pid = getpid();\n    // step1: send a byte to the child\n    close(parent_pipe[0]);\n    write(parent_pipe[1],buf,1);\n    // step4: read a byte from the child, and print\n    close(child_pipe[1]);\n    read(child_pipe[0],buf,1);\n    printf(\"%d: received pong\\n\",pid);\n  }\n\n  exit(0);\n}\n</code></pre>"},{"location":"os/2401mit6s081/%5B1%5DLabs/lab1/#4-primesmoderatehard","title":"4. primes(moderate/hard)","text":"<p>\u5373\u5b9e\u73b0Sieve\u8d28\u6570\u7b97\u6cd5\uff0c\u5728 https://swtch.com/~rsc/thread/ \u4e2d\u5b9e\u9645\u4e0a\u63d0\u793a\u4e86\u5173\u952e\u601d\u8def\uff1a</p> <p></p> <p>\u6839\u636e\u4e0a\u8ff0\u601d\u8def\uff0c\u901a\u8fc7 pipe \u548c fork \u8fdb\u884c\u5b9e\u73b0\uff0c\u5176\u4e2d\u8fd8\u9700\u8981\u7279\u522b\u6ce8\u610f\uff1a</p> <ul> <li>\u4e3a\u4e86\u4fdd\u8bc1\u8fdb\u7a0b\u751f\u547d\u5468\u671f\u94fe\u7684\u6b63\u786e\u6027\uff0c\u9700\u8981\u7b49\u5f85\u6240\u6709\u5b50\u8fdb\u7a0b\u90fd\u7ed3\u675f\uff0c\u5219\u9700\u8981\u5c06 fork \u51fa\u6765\u7684\u5b50\u8fdb\u7a0b\u8fdb\u884c wait </li> <li>\u4e3a\u4e86\u907f\u514d\u8d85\u8fc7 xv6 \u7cfb\u7edf\u7684 fd \u4e0a\u9650\uff0c\u9700\u8981\u53ca\u65f6\u5173\u95ed\u4e0d\u518d\u4f7f\u7528\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8fd9\u6837\u4e5f\u80fd\u51cf\u5c11\u8fdb\u7a0b\u88ab\u5361\u4f4f\u7684\u6982\u7387</li> </ul> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> C<pre><code>#include \"kernel/types.h\"\n#include \"user/user.h\"\n\n__attribute__((noreturn))\nvoid deliver_process(int read_fd){\n    int cur_num = 0;\n    int is_fork = 0;\n    int pass_num = 0;\n    int pipes[2];\n    while(1){\n       // get a number from the left neighbor\n       int read_len = read(read_fd,&amp;pass_num,4);\n\n       // the left neighbor empty or close\n       if (read_len == 0 ){\n           close(read_fd);\n           if (is_fork){\n               close(pipes[1]);\n               close(pipes[0]);\n               wait(0);\n           }\n           exit(0);\n       }\n\n       if (cur_num==0){\n           cur_num = pass_num;\n           printf(\"prime %d\\n\",cur_num);\n       }\n\n       if (pass_num%cur_num!=0) {\n           if (!is_fork){\n               // create new process and pipe\n               pipe(pipes);\n               is_fork = 1;\n               int pid = fork();\n               if (pid==0){ // child\n                   // next process handle\n                   // deliver to the next process pipes for writing\n                   close(pipes[1]);\n                   close(read_fd);\n                   deliver_process(pipes[0]);\n               } else{ // parent\n                   close(pipes[0]);\n               }\n           }\n\n           // send n to the right neighbor\n           write(pipes[1],&amp;pass_num,4);\n       }\n    }\n}\n\n\nint main(int argc, char *argv[]) {\n    int pipes[2];\n    pipe(pipes);\n    for (int i=2;i&lt;=35;i++) {\n        write(pipes[1],&amp;i,4);\n    }\n    close(pipes[1]);\n    deliver_process(pipes[0]);\n    exit(0);\n}\n</code></pre>"},{"location":"os/2401mit6s081/%5B1%5DLabs/lab1/#5-findmoderate","title":"5. find(moderate)","text":"<p>\u6b64\u7cfb\u7edf\u547d\u4ee4\u7684\u529f\u80fd\u4e3a\uff1a</p> <ul> <li>\u8f93\u5165:\u4e00\u4e2a\u521d\u59cb\u8def\u5f84\u548c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u540d</li> <li>\u8f93\u51fa:\u9012\u5f52\u626b\u63cf\u8be5\u521d\u59cb\u8def\u5f84\u4e0b\u7684\u6240\u6709\u76ee\u5f55\uff0c\u5339\u914d\u4e0e\u6587\u4ef6\u540d\u76f8\u540c\u7684\u6587\u4ef6\u5e76\u8f93\u51fa</li> </ul> <p>\u6839\u636e\u63d0\u793a\u4e2d\u63d0\u5230\u7684 <code>user/ls.c</code>\uff0c\u6765\u4e86\u89e3\u8bfb\u53d6\u76ee\u5f55\u4fe1\u606f\u7684\u5b9e\u73b0\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5173\u952e\u4ee3\u7801\u7684\u6ce8\u91ca\uff1a</p> C<pre><code>void\nls(char *path)\n{\n  char buf[512], *p;\n  int fd;\n  struct dirent de;\n  struct stat st;\n\n  // \u901a\u8fc7 open \u51fd\u6570\u83b7\u53d6\u7279\u5b9a\u8def\u5f84\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\n  if((fd = open(path, O_RDONLY)) &lt; 0){\n    fprintf(2, \"ls: cannot open %s\\n\", path);\n    return;\n  }\n\n  // \u901a\u8fc7 fstat \u51fd\u6570\u83b7\u53d6\u8be5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8be6\u7ec6\u4fe1\u606f\n  if(fstat(fd, &amp;st) &lt; 0){\n    fprintf(2, \"ls: cannot stat %s\\n\", path);\n    close(fd);\n    return;\n  }\n\n  // \u901a\u8fc7 st.type \u6765\u8bc6\u522b\u5f53\u524d\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u7c7b\u578b\u4fe1\u606f\uff08\u8bbe\u5907\u3001\u6587\u4ef6\u3001\u76ee\u5f55\uff09\n  // \u8fd9\u91cc\u4e3b\u8981\u5173\u6ce8\u76ee\u5f55\u7684\u5904\u7406\n  switch(st.type){\n  case T_DEVICE:\n  case T_FILE:\n    printf(\"%s %d %d %l\\n\", fmtname(path), st.type, st.ino, st.size);\n    break;\n\n  case T_DIR:\n    // \u76ee\u5f55\u7684\u957f\u5ea6\u907f\u514d\u8d85\u8fc7 xv6 \u8bbe\u7f6e\u7684\u7f13\u51b2\u533a\u4e0a\u9650\n    // DIRSIZ \u88ab\u7528\u4e8e\u8ba1\u7b97\u8def\u5f84\u540d\u7684\u957f\u5ea6\uff0c\u4ee5\u786e\u4fdd\u4e0d\u4f1a\u8d85\u51fa\u7f13\u51b2\u533a\u7684\u5927\u5c0f\n    if(strlen(path) + 1 + DIRSIZ + 1 &gt; sizeof buf){\n      printf(\"ls: path too long\\n\");\n      break;\n    }\n    // \u5c06 path \u5b57\u7b26\u4e32\u590d\u5236\u5230 buf \u4e2d\n    strcpy(buf, path);\n\n    // \u904d\u5386\u5f53\u524d\u76ee\u5f55\u4fe1\u606f\u7684\u5173\u952e\u4ee3\u7801\n\n    // \u53d8\u91cf p \u5373\u8868\u793a\u8def\u5f84\u7684\u5b57\u7b26\u4e32\u6307\u9488  \n    p = buf+strlen(buf);\n    *p++ = '/';\n    while(read(fd, &amp;de, sizeof(de)) == sizeof(de)){\n      if(de.inum == 0)\n        continue;\n      // memmove \u51fd\u6570\u5373\u8868\u793a\u4ece\u6e90\u5185\u5b58\u533a\u57df\u590d\u5236 n \u4e2a\u5b57\u8282\u5230\u76ee\u6807\u5185\u5b58\u533a\u57df\n      // \u6bcf\u6b21\u904d\u5386\u9700\u8981\u8d4b\u503c\u5176\u6587\u4ef6\u540d\u79f0\u7684\u5b8c\u6574\u8def\u5f84\uff08\u5373 path+file\uff09\n      memmove(p, de.name, DIRSIZ);\n      p[DIRSIZ] = 0;\n      if(stat(buf, &amp;st) &lt; 0){\n        printf(\"ls: cannot stat %s\\n\", buf);\n        continue;\n      }\n      printf(\"%s %d %d %d\\n\", fmtname(buf), st.type, st.ino, st.size);\n    }\n    break;\n  }\n  // \u6700\u540e\u4f7f\u7528\u5b8c\u540e\u9700\u8981\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\n  close(fd);\n}\n</code></pre> <p>\u5728\u4e0a\u9762\u5904\u7406\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u9012\u5f52\u5b50\u76ee\u5f55\uff0c\u76f4\u81f3\u5339\u914d\u5230\u6587\u4ef6\u540d\u76f8\u540c\u7684\u6587\u4ef6\u540e\u8fdb\u884c\u8f93\u51fa\uff0c\u5176\u4e2d\u8fd8\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>\u4e0d\u8981\u9012\u5f52 <code>.</code> \u548c <code>..</code></li> <li>\u5728\u5339\u914d\u6587\u4ef6\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u9700\u8981\u4f7f\u7528 strcmp \u51fd\u6570</li> </ul> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> C<pre><code>#include \"kernel/types.h\"\n#include \"kernel/stat.h\"\n#include \"user/user.h\"\n#include \"kernel/fs.h\"\n#include \"kernel/fcntl.h\"\n\n// get the filename from the whole path\nchar* get_filename(char *path){\n    char *p;\n\n    // Find first character after last slash.\n    for(p=path+strlen(path);p&gt;=path&amp;&amp;*p!='/';p--)\n        ;\n    p++;\n    return p;\n}\n\nvoid find(char *path,char *target){\n\n    char buf[512],*p;\n    int fd;\n    struct dirent de;\n    struct stat st;\n\n    if((fd = open(path, O_RDONLY)) &lt; 0){\n        fprintf(2, \"find: cannot open %s\\n\", path);\n        return;\n    }\n\n    if(fstat(fd,&amp;st)&lt;0){\n        fprintf(2, \"find: cannot stat %s\\n\", path);\n        close(fd);\n        return;\n    }\n\n    switch(st.type){\n        case T_DEVICE:\n        case T_FILE:\n            // \u68c0\u67e5\u662f\u5426\u5339\u914d\u76ee\u6807\u6587\u4ef6\u540d\u79f0\n            char *f_name= get_filename(path);\n            // printf(\"filename:%s,target:%s\\n\",f_name,target);\n            if (strlen(f_name) != 0 &amp;&amp; strcmp(f_name,target) == 0){\n                printf(\"%s\\n\",path);\n            }\n            close(fd);\n            break;\n        case T_DIR:\n            if(strlen(path) + 1 + DIRSIZ + 1 &gt; sizeof buf){\n                printf(\"find: path too long\\n\");\n                break;\n            }\n            strcpy(buf, path);\n            p = buf+strlen(buf);\n            *p++ = '/';\n            while(read(fd,&amp;de,sizeof(de)) == sizeof(de)){\n                 if(de.inum==0||strcmp(de.name,\".\")==0||strcmp(de.name,\"..\")==0){\n                     continue;\n                 }\n                memmove(p, de.name, DIRSIZ);\n                p[DIRSIZ] = 0;\n                if(stat(buf, &amp;st) &lt; 0){\n                    printf(\"find: cannot stat %s\\n\", buf);\n                    continue;\n                }\n                // printf(\"p:%s,buf:%s\\n\",p,buf);\n                find(buf, target);\n            }\n            close(fd);\n            break;\n    }\n}\n\n\n\nint main(int argc, char *argv[]){\n    if(argc != 3){\n        fprintf(2,\"find usage: find [dir] [filename]\\n\");\n        exit(1);\n    }\n    find(argv[1],argv[2]);\n    exit(0);\n}\n</code></pre>"},{"location":"os/2401mit6s081/%5B1%5DLabs/lab1/#6-xargsmoderate","title":"6. xargs(moderate)","text":"<p>\u8fd9\u91cc\u9700\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u4e3a\uff1a</p> <ul> <li>\u53c2\u6570\u63cf\u8ff0\u8981\u8fd0\u884c\u7684\u547d\u4ee4\uff0c\u5b83\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u884c\uff0c\u5e76\u4e3a\u6bcf\u4e00\u884c\u8fd0\u884c\u547d\u4ee4\uff0c\u5e76\u5c06\u8be5\u884c\u9644\u52a0\u5230\u547d\u4ee4\u7684\u53c2\u6570\u4e2d</li> </ul> <p>\u7ed3\u5408\u63d0\u793a\u4fe1\u606f\uff0c\u8be5\u547d\u4ee4\u5b9e\u73b0\u7684\u6838\u5fc3\u5904\u7406\u6709\u4ee5\u4e0b\u51e0\u70b9\uff1a</p> <ul> <li>\u901a\u8fc7\u8bfb\u53d6\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u503c\u4e3a 0 \u6765\u5224\u65ad\u8f93\u5165\u7ed3\u675f</li> <li>\u4f7f\u7528<code>fork</code>\u548c<code>exec</code>\u5728\u6bcf\u884c\u8f93\u5165\u4e0a\u8c03\u7528\u547d\u4ee4\uff0c\u4e14\u6ce8\u610f\u5728\u7236\u7ea7\u4e2d\u4f7f\u7528<code>wait</code>\u7b49\u5f85\u5b50\u7ea7\u5b8c\u6210\u547d\u4ee4</li> <li>\u82e5\u60f3\u8981\u8bfb\u53d6\u5355\u884c\u8f93\u5165\uff0c\u5219\u53ef\u904d\u5386\u8bfb\u53d6\u5355\u4e2a\u5b57\u7b26\uff0c\u76f4\u81f3\u51fa\u73b0\u6362\u884c\u7b26\u5373 <code>\\n</code>\uff0c\u5728\u5b9e\u9645\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u8fd8\u9700\u8981\u901a\u8fc7 buf \u6765\u622a\u53d6\u5904\u7406</li> </ul> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> C<pre><code>#include \"kernel/param.h\"\n#include \"kernel/types.h\"\n#include \"user/user.h\"\n\n\n#define buf_size 512\n\n\nint main(int argc, char *argv[]) {\n    char buf[buf_size+1] = {0};\n    char *xargv[MAXARG] = {0};\n    int used_size = 0;\n    int stdin_end = 0;\n\n    for (int i = 1; i &lt; argc; i++) {\n        xargv[i - 1] = argv[i];\n    }\n\n    while (!stdin_end || used_size != 0) {\n        if (!stdin_end) {\n            int read_bytes = read(0, buf + used_size, buf_size - used_size);\n            if (read_bytes &lt; 0) {\n                fprintf(2, \"xargs: read returns -1 error\\n\");\n                exit(1);\n            }\n\n            if (read_bytes == 0) {\n                close(0);\n                stdin_end = 1;\n            }\n            used_size += read_bytes;\n        }\n\n        char *line_end = strchr(buf, '\\n');\n\n        while (line_end) {\n            char xbuf[buf_size + 1] = {0};\n            memcpy(xbuf, buf, line_end - buf);\n            xargv[argc - 1] = xbuf;\n\n            int pid = fork();\n            if (pid == 0) { // child\n                if (!stdin_end) {\n                    close(0);\n                }\n                if (exec(argv[1], xargv) &lt; 0) {\n                    fprintf(2, \"xargs: exec fails with -1\\n\");\n                    exit(1);\n                }\n            } else { // parent\n                int remain_line = line_end - buf;\n                memmove(buf, line_end + 1, used_size - remain_line - 1);\n                used_size -= remain_line + 1;\n                memset(buf + used_size, 0, buf_size - used_size);\n                wait(0);\n            }\n\n            line_end = strchr(buf, '\\n');\n        }\n    }\n    exit(0);\n}\n</code></pre>"},{"location":"os/2401mit6s081/%5B1%5DLabs/lab2/","title":"Lab: system calls","text":""},{"location":"os/2401mit6s081/%5B1%5DLabs/lab2/#2-system-call-tracing-moderate","title":"2. System call tracing (moderate)","text":""},{"location":"os/2401mit6s081/%5B1%5DLabs/lab2/#3-sysinfo-moderate","title":"3. Sysinfo (moderate)","text":""},{"location":"os/common/","title":"Common","text":""},{"location":"project/","title":"Project Engineering","text":"<p>The subject of the record will be considered later.</p> <ul> <li>\u7814\u53d1\u6d41\u7a0b\u89c4\u8303<ul> <li>......</li> <li>\u5f00\u53d1\u89c4\u8303<ul> <li>\u9879\u76ee\u6846\u67b6\u89c4\u8303</li> <li>API/RPC \u8bbe\u8ba1&amp;\u534f\u8bae\u89c4\u8303</li> <li>\u7f16\u7a0b\u8bed\u8a00\u5b9e\u8df5\u89c4\u8303</li> <li>\u6570\u636e\u5e93\u5b9e\u8df5\u89c4\u8303</li> <li>......</li> </ul> </li> <li>......</li> </ul> </li> <li>\u7814\u53d1\u5e73\u53f0\u5de5\u5177<ul> <li>\u5f00\u53d1\u73af\u5883</li> <li>......</li> </ul> </li> <li>\u8d28\u91cf\u5efa\u8bbe<ul> <li>\u76d1\u63a7\u62a5\u8b66</li> <li>.......</li> </ul> </li> <li>\u7a33\u5b9a\u6027\u5efa\u8bbe</li> <li>.......</li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/monthly-review/","title":"monthly review","text":""},{"location":"blog/category/os/","title":"os","text":""},{"location":"blog/tags/","title":"\ud83d\udd17Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"blog/tags/#docker","title":"docker","text":"<ul> <li>Mac\u642d\u5efaDocker+Ubuntu\u73af\u5883\u652f\u6301GDB</li> </ul>"},{"location":"blog/tags/#os","title":"os","text":"<ul> <li>Mac\u642d\u5efaDocker+Ubuntu\u73af\u5883\u652f\u6301GDB</li> </ul>"}]}