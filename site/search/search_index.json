{"config":{"lang":["en","zh"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"algorithms/","title":"README","text":"<p>\u7a0b\u5e8f\u5458\u7684\u57fa\u672c\u529f</p>"},{"location":"algorithms/books/","title":"Books","text":"<p>Books About Algorithm</p> <p>Recently Reading:</p> <ul> <li> <p> \u300a\u4ee3\u7801\u968f\u60f3\u5f55\u300b\uff08202402\uff5e\uff09</p> </li> <li> <p> \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u4e4b\u7f8e\u300b</p> </li> </ul>"},{"location":"algorithms/books/code_caprice/","title":"\u300a\u4ee3\u7801\u968f\u60f3\u5f55\u300b","text":"<p>href: https://programmercarl.com/</p> <ul> <li> \u7b97\u6cd5\u6027\u80fd\u5206\u6790</li> <li> \u6570\u7ec4</li> <li> \u94fe\u8868</li> <li> \u54c8\u5e0c\u8868</li> <li> \u5b57\u7b26\u4e32</li> <li> \u53cc\u6307\u9488\u6cd5</li> <li> \u6808\u4e0e\u961f\u5217</li> <li> \u4e8c\u53c9\u6811</li> <li> \u56de\u6eaf\u7b97\u6cd5</li> <li> \u8d2a\u5fc3\u7b97\u6cd5</li> <li> \u52a8\u6001\u89c4\u5212</li> <li> \u5355\u8c03\u6808</li> <li> \u56fe\u8bba</li> </ul>"},{"location":"algorithms/books/code_caprice/array/01basic/","title":"\u6570\u7ec4\u7406\u8bba\u57fa\u7840","text":"<p>1. \u6570\u7ec4\u7684\u5b9a\u4e49&amp;\u7279\u70b9</p> <ul> <li>\u6570\u7ec4\u662f\u5b58\u653e\u5728\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u4e0a\u7684\u76f8\u540c\u7c7b\u578b\u6570\u636e\u7684\u96c6\u5408</li> <li>\u6570\u7ec4\u53ef\u4ee5\u65b9\u4fbf\u7684\u901a\u8fc7\u4e0b\u6807\u7d22\u5f15\u7684\u65b9\u5f0f\u83b7\u53d6\u5230\u4e0b\u6807\u4e0b\u5bf9\u5e94\u7684\u6570\u636e</li> </ul> <p>2. \u6570\u7ec4\u7684\u7279\u70b9</p> <p></p> <ul> <li>\u6570\u7ec4\u4e0b\u6807\u90fd\u662f\u4ece0\u5f00\u59cb\u7684</li> <li>\u6570\u7ec4\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u662f\u8fde\u7eed\u7684 <ul> <li>\u6240\u4ee5\u5728\u5bf9\u6570\u7ec4\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u80af\u5b9a\u4f1a\u8003\u8651\u5230\u79fb\u52a8\u5176\u4ed6\u5143\u7d20\u7684\u5730\u5740</li> <li>\u4e8c\u7ef4\u6570\u7ec4\u7684\u5185\u5b58\u7a7a\u95f4\u662f\u5426\u8fde\u7eed\uff0c\u53d6\u51b3\u4e8e\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u5b9e\u73b0</li> </ul> </li> <li>\u6570\u7ec4\u7684\u5143\u7d20\u4e0d\u80fd\u5220\u7684\u800c\u53ea\u80fd\u8986\u76d6</li> </ul>"},{"location":"algorithms/books/code_caprice/array/02array_algorithms/","title":"\u6570\u7ec4\u7b97\u6cd5","text":""},{"location":"algorithms/books/code_caprice/array/02array_algorithms/#1-\u4e8c\u5206\u67e5\u627e","title":"1. \u4e8c\u5206\u67e5\u627e","text":"<p>\u6838\u5fc3\u70b9</p> <ul> <li>\u6709\u5e8f\u6570\u7ec4</li> <li>\u5c06\u76ee\u6807\u503c\u4e0e\u6570\u7ec4\u4e2d\u95f4\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u6392\u9664\u6389\u4e00\u534a\u7684\u5143\u7d20\uff0c\u5982\u6b64\u5faa\u73af\uff0c\u76f4\u5230\u627e\u5230\u76ee\u6807\u503c\u6216\u786e\u5b9a\u76ee\u6807\u503c\u4e0d\u5b58\u5728</li> <li>\u901a\u5e38\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(logn)\\)</li> </ul> <p>\u5176\u4e2d\u9700\u8981\u6ce8\u610f:</p> <ul> <li>\u533a\u95f4\u8303\u56f4\u51b3\u5b9a\u4e86\u8fb9\u754c\uff08\u5305\u542b\u8d77\u59cb\u4f4d\u7f6e\uff09\u7684\u503c\uff0c\u53ef\u901a\u8fc7\u6784\u9020\u7b80\u5355\u7684\u6709\u5e8f\u6570\u7ec4\u6765\u6f14\u7b97\u8fdb\u884c\u7406\u89e3</li> </ul>"},{"location":"algorithms/books/code_caprice/array/02array_algorithms/#11-\u4ee3\u7801\u6a21\u7248","title":"1.1 \u4ee3\u7801\u6a21\u7248","text":"<ol> <li>\u5de6\u95ed\u53f3\u95ed [left, right]</li> </ol> Go<pre><code>func search(nums []int, target int) int {\n    high := len(nums)-1\n    low := 0\n    for low &lt;= high {\n        mid := low + (high-low)/2\n        if nums[mid] == target {\n            return mid\n        } else if nums[mid] &gt; target {\n            high = mid-1\n        } else {\n            low = mid+1\n        }\n    }\n    return -1\n}\n</code></pre> <ol> <li>\u5de6\u95ed\u53f3\u5f00 [left, right)</li> </ol> Go<pre><code>func search(nums []int, target int) int {\n    left, right := 0, len(nums)\n    for left &lt; right {\n        mid := left + (right-left)/2\n        if nums[mid] &gt; target {\n            right = mid\n        } else if nums[mid] &lt; target {\n            left = mid + 1\n        } else {\n            return mid\n        }\n    }\n\n    return -1\n}\n</code></pre>"},{"location":"algorithms/books/code_caprice/array/02array_algorithms/#12-\u76f8\u5173\u9898\u76ee","title":"1.2 \u76f8\u5173\u9898\u76ee","text":"<ul> <li> 704\u4e8c\u5206\u67e5\u627e</li> <li> 35.\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e </li> <li> 34.\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e </li> <li> 69.x \u7684\u5e73\u65b9\u6839 </li> <li> 367.\u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570</li> </ul>"},{"location":"algorithms/books/code_caprice/array/02array_algorithms/#2-\u79fb\u9664\u5143\u7d20","title":"2. \u79fb\u9664\u5143\u7d20","text":"<p>\u5bf9\u5e94 LeetCode \u9898\u76ee\uff1a </p> <p>Note</p> <p>\u6570\u7ec4\u7684\u5143\u7d20\u5728\u5185\u5b58\u5730\u5740\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u4e0d\u80fd\u5355\u72ec\u5220\u9664\u6570\u7ec4\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff0c\u53ea\u80fd\u8986\u76d6\u3002</p> <p>\u82e5\u91c7\u53d6\u66b4\u529b\u89e3\u6cd5\uff0c\u5219\u7c7b\u4f3c\u4e8e\u5192\u6ce1\u6392\u5e8f\u8fdb\u884c\u4e24\u5c42\u904d\u5386\uff0c\u4e0b\u9762\u91cd\u70b9\u8bf4\u660e\u53cc\u6307\u9488\u6cd5\u3002</p>"},{"location":"algorithms/books/code_caprice/array/02array_algorithms/#21-\u7b97\u6cd5\u53cc\u6307\u9488\u6cd5","title":"2.1 \u7b97\u6cd5\u2014\u53cc\u6307\u9488\u6cd5","text":"<p>\u53cc\u6307\u9488\u6cd5\uff08\u5feb\u6162\u6307\u9488\u6cd5\uff09\uff1a </p> <ul> <li>\u901a\u8fc7\u4e00\u4e2a\u5feb\u6307\u9488\u548c\u6162\u6307\u9488\u5728\u4e00\u4e2afor\u5faa\u73af\u4e0b\u5b8c\u6210\u4e24\u4e2afor\u5faa\u73af\u7684\u5de5\u4f5c</li> </ul> <p>\u5b9a\u4e49\u5feb\u6162\u6307\u9488\uff1a</p> <ul> <li>\u5feb\u6307\u9488\uff1a\u5bfb\u627e\u65b0\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u65b0\u6570\u7ec4\u5c31\u662f\u4e0d\u542b\u6709\u76ee\u6807\u5143\u7d20\u7684\u6570\u7ec4 </li> <li>\u6162\u6307\u9488\uff1a\u6307\u5411\u66f4\u65b0\u65b0\u6570\u7ec4\u4e0b\u6807\u7684\u4f4d\u7f6e</li> </ul> <p>\u6b64\u601d\u8def\u4e0d\u4ec5\u5e94\u7528\u5728\u6570\u7ec4\u4e2d\uff0c\u5728\u5176\u4ed6\u5982\u94fe\u8868\u3001\u5b57\u7b26\u4e32\u7b49\u90fd\u6709\u76f8\u5e94\u5e94\u7528\u3002</p> <p>\u4e0b\u9762\u4e24\u4e2a\u89e3\u6cd5\u5747\u53ef\u6ee1\u8db3\u9898\u610f\uff0c\u540e\u8005\u7684\u4f18\u70b9\u5728\u4e8e\u786e\u4fdd\u79fb\u52a8\u7684\u6700\u5c0f\u6b21\u6570</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\)</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(1)\\)</li> </ul> Go<pre><code>func removeElement(nums []int, val int) int {\n    slow := 0\n    for fast := 0; fast &lt; len(nums); fast++ {\n        if val != nums[fast] {\n            nums[slow] = nums[fast]\n            slow++\n        }\n    }\n    return slow\n}\n</code></pre> Go<pre><code>func removeElement(nums []int, val int) int {\n    leftIdx, rightIdx := 0, len(nums)-1\n    for leftIdx &lt;= rightIdx {\n\n        for leftIdx &lt;= rightIdx &amp;&amp; nums[leftIdx] != val {\n            leftIdx++\n        }\n\n        for leftIdx &lt;= rightIdx &amp;&amp; nums[rightIdx] == val {\n            rightIdx--\n        }\n\n        if leftIdx &lt; rightIdx {\n            nums[leftIdx] = nums[rightIdx]\n            leftIdx++\n            rightIdx--\n        }\n    }\n\n    return leftIdx\n}\n</code></pre>"},{"location":"algorithms/books/code_caprice/array/02array_algorithms/#22-\u76f8\u5173\u9898\u76ee","title":"2.2 \u76f8\u5173\u9898\u76ee","text":"<ul> <li> 27.\u79fb\u9664\u5143\u7d20</li> <li> 26.\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879</li> <li> 283.\u79fb\u52a8\u96f6</li> <li> 844.\u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32</li> <li> 977.\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9</li> </ul>"},{"location":"algorithms/books/code_caprice/array/02array_algorithms/#3\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","title":"3.\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>\u5bf9\u5e94 LeetCode \u9898\u76ee\uff1a</p> <p></p> <p>Note</p> <p>\u6d89\u53ca\u5230\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u5904\u7406\uff0c\u53ef\u8003\u8651\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u7b97\u6cd5\u601d\u60f3\u6765\u89e3\u51b3</p> <p>\u82e5\u91c7\u53d6\u66b4\u529b\u89e3\u6cd5\uff0c\u5219\u662f\u901a\u8fc7\u4e24\u5c42\u5faa\u73af\u4e0d\u65ad\u5bfb\u627e\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\uff0c\u4e0b\u9762\u91cd\u70b9\u8bf4\u660e\u6ed1\u52a8\u7a97\u53e3\u89e3\u6cd5\u3002</p>"},{"location":"algorithms/books/code_caprice/array/02array_algorithms/#31-\u7b97\u6cd5\u6ed1\u52a8\u7a97\u53e3","title":"3.1 \u7b97\u6cd5\u2014\u2014\u6ed1\u52a8\u7a97\u53e3","text":"<p>\u6ed1\u52a8\u7a97\u53e3\u7684\u4e3b\u8981\u601d\u60f3\uff1a - \u4e0d\u65ad\u7684\u8c03\u8282\u5b50\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u4ece\u800c\u5f97\u51fa\u9884\u671f\u7ed3\u679c</p> <p>\u6ed1\u52a8\u7a97\u53e3\u7684\u5b9e\u73b0\u901a\u5e38\u9700\u8981\u786e\u8ba4\u5982\u4e0b\u4e09\u70b9\uff1a - \u7a97\u53e3\u5185\u662f\u4ec0\u4e48\uff1f      - \u6ee1\u8db3\u5176\u548c\u2265s\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4    - \u5982\u4f55\u79fb\u52a8\u7a97\u53e3\u7684\u8d77\u59cb\u4f4d\u7f6e\uff1f      - \u82e5\u5f53\u524d\u7a97\u53e3\u7684\u503c\u5927\u4e8es\u5219\u7a97\u53e3\u9700\u8981\u5411\u524d\u79fb\u52a8\u4e86 - \u5982\u4f55\u79fb\u52a8\u7a97\u53e3\u7684\u7ed3\u675f\u4f4d\u7f6e\uff1f     - \u7a97\u53e3\u7684\u7ed3\u675f\u4f4d\u7f6e\u5c31\u662f\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488</p> <p>\u5177\u4f53\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(1)\\)</p> Go<pre><code>func minSubArrayLen(target int, nums []int) int {\n    start, end := 0, 0\n    result := len(nums) + 1\n    cur := 0\n    for ; end &lt; len(nums); end++ {\n        cur += nums[end]\n        for ; cur &gt;= target; start++ {\n            result = min(result, end-start+1)\n            cur -= nums[start]\n        }\n    }\n\n    if result == len(nums)+1 {\n        return 0\n    }\n    return result\n}\n</code></pre>"},{"location":"algorithms/books/code_caprice/array/02array_algorithms/#32-\u76f8\u5173\u9898\u76ee","title":"3.2 \u76f8\u5173\u9898\u76ee","text":"<ul> <li> 209.\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4</li> <li> 904.\u6c34\u679c\u6210\u7bee</li> <li> 76.\u6700\u5c0f\u8986\u76d6\u5b50\u4e32</li> </ul>"},{"location":"architecture/","title":"Architecture Design","text":""},{"location":"blog/","title":"Life","text":"<p>Hope to realize what I really want</p> <p>updated in 20231101</p> <ul> <li>\ud83d\udc68\u200d\ud83d\udcbb As a server engineer in Bytedance (202207-~)</li> <li>\ud83e\udee3 The most important thing at present is to maintain a stable mentality and return to the original intention</li> <li>\ud83e\udd15 Recently, the thing I have been learning is Rust And LangChain</li> <li>\u26a1 Always the self-reflection</li> </ul>"},{"location":"blog/#list-of-recently-read-books","title":"List of recently read books","text":"<p>See the doc</p>"},{"location":"blog/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"common/","title":"Common","text":""},{"location":"ds/","title":"Data System","text":""},{"location":"language/","title":"Programming Language","text":"<p>Last update time: 20240203</p> <ul> <li> <p>Work mainly uses Golang</p> </li> <li> <p>Lately I\u2019ve been learning by using Rust</p> </li> <li> <p>Programming languages that have actually been exposed to (and used) include the following</p> <ul> <li>Java</li> <li>Python</li> <li>C/C++</li> <li>Html/Css/Javascript</li> <li>Kotlin .......</li> </ul> </li> </ul>"},{"location":"language/golang/","title":"Golang","text":""},{"location":"language/rust/","title":"Rust","text":""},{"location":"middleware/","title":"Middleware","text":""},{"location":"network/","title":"Computer Network","text":""},{"location":"os/","title":"Operating System","text":""},{"location":"os/mit6s081/","title":"MIT-6.S081","text":"<p>https://pdos.csail.mit.edu/6.1810/2023/schedule.html</p> <p>https://zhuanlan.zhihu.com/p/632281381</p> <p>https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/</p>"},{"location":"os/mit6s081/#lecture--preparation","title":"Lecture &amp; Preparation","text":"<ul> <li> Lecture 01 </li> <li> Lecture 02</li> <li> Lecture 03</li> <li> Lecture 04</li> <li> Lecture 05</li> <li> Lecture 06</li> <li> Lecture 07</li> <li> Lecture 08</li> <li> Lecture 09</li> <li> Lecture 10</li> <li> Lecture 11</li> <li> Lecture 12</li> <li> Lecture 13</li> <li> Lecture 14</li> <li> Lecture 15</li> <li> Lecture 16</li> <li> Lecture 17</li> <li> Lecture 18</li> <li> Lecture 19</li> <li> Lecture 20</li> <li> Lecture 21</li> <li> Lecture 22</li> <li> Lecture 23</li> </ul>"},{"location":"os/mit6s081/#lab","title":"Lab","text":"<ul> <li> Lab00</li> <li> Lab01</li> <li> Lab02</li> <li> Lab03</li> <li> Lab04</li> <li> Lab05</li> <li> Lab06</li> <li> Lab07</li> <li> Lab08</li> <li> Lab09</li> <li> Lab10</li> <li> Lab11</li> </ul>"},{"location":"os/mit6s081/labs/lab1/","title":"About Labs","text":""},{"location":"os/mit6s081/notes/lec1/","title":"Lec1","text":""},{"location":"os/mit6s081/notes/lec1/#1-preparationoperator-system-interfaces","title":"1. Preparation:Operator system interfaces","text":"<p>book-riscv-rev3 Chapter1</p> <p></p>"},{"location":"os/mit6s081/notes/lec1/#11-processes-and-memory","title":"1.1 Processes and memory","text":"<ul> <li>An xv6 process consists of user-space memory (instructions, data, and stack) and per-process state private to the kernel.</li> <li>A process may create a new process using the <code>fork</code> system call.</li> </ul> <ul> <li>If <code>exec</code> succeeds then the child will execute instructions from <code>echo</code> instead of <code>runcmd</code>. At some point <code>echo</code> will call <code>exit</code>, which will cause the parent to return from <code>wait</code> in <code>main</code> (user/sh.c:146).</li> <li>why <code>fork</code> and <code>exec</code> are not combined in a single call; we will see later that the shell exploits the separation in its implementation of I/O redirection. To avoid the wastefulness of creating a duplicate process and then immediately replacing it (with <code>exec</code>), operating kernels optimize the implementation of <code>fork</code> for this use case by using virtual memory techniques such as copy-on-write (see Section 4.6).</li> <li>Xv6 allocates most user-space memory implicitly.</li> </ul>"},{"location":"os/mit6s081/notes/lec1/#12-io-and-file-descriptors","title":"1.2 I/O and File descriptors","text":"<ul> <li>A file descriptor is a small integer representing a kernel-managed object that a process may read from or write to.</li> <li>the file descriptor interface abstracts away the differences between files, pipes, and devices, making them all look like streams of bytes. We\u2019ll refer to input and output as I/O.</li> <li>By convention, a process reads from file descriptor 0 (standard input), writes output to file descriptor 1 (standard output), and writes error messages to file descriptor 2 (standard error).<ul> <li>the shell exploits the convention to implement I/O redirection and pipelines. The shell ensures that it always has three file descriptors open (user/sh.c:152), which are by default file descriptors for the console.</li> </ul> </li> <li>The <code>read</code> and <code>write</code> system calls read bytes from and write bytes to open files named by file descriptors.</li> <li>The use of file descriptors and the convention that file descriptor 0 is input and file descriptor 1 is output allows a simple implementation of <code>cat</code>.</li> <li>A newly allocated file descriptor is always the lowest-numbered unused descriptor of the current process.</li> <li>The system call <code>exec</code> replaces the calling process\u2019s memory but preserves its file table. This behavior allows the shell to implement I/O redirection by forking, re-opening chosen file descriptors in the child, and then calling <code>exec</code> to run the new program.</li> <li>The parent process\u2019s file descriptors are not changed by this sequence, since it modifies only the child\u2019s descriptors.</li> <li>The second argument to <code>open</code> consists of a set of flags, expressed as bits, that control what <code>open</code> does.<ul> <li>like:open(\"input.txt\", O_RDONLY)</li> </ul> </li> <li>Now it should be clear why it is helpful that <code>fork</code> and <code>exec</code> are separate calls: between the two, the shell has a chance to redirect the child\u2019s I/O without disturbing the I/O setup of the main shell.</li> <li>Although <code>fork</code> copies the file descriptor table, each underlying file offset is shared between parent and child.</li> <li>The <code>dup</code> system call duplicates an existing file descriptor, returning a new one that refers to the same underlying I/O object. Both file descriptors share an offset, just as the file descriptors duplicated by <code>fork</code> do.</li> <li>a process writing to file descriptor 1 may be writing to a file, to a device like the console, or to a pipe.</li> </ul>"},{"location":"os/mit6s081/notes/lec1/#13-pipe","title":"1.3 Pipe","text":"<ul> <li>A pipe is a small kernel buffer exposed to processes as a pair of file descriptors, one for reading and one for writing. Writing data to one end of the pipe makes that data available for reading from the other end of the pipe. Pipes provide a way for processes to communicate.</li> </ul> <ul> <li>If no data is available, a <code>read</code> on a pipe waits for either data to be written or for all file descriptors referring to the write end to be closed.</li> <li>The fact that <code>read</code> blocks until it is impossible for new data to arrive is one reason that it\u2019s important for the child to close the write end of the pipe before executing wc above</li> <li>(e.g., <code>a | b | c</code>) the shell may create a tree of processes.</li> <li>Pipes may seem no more powerful than temporary files: the pipeline<ul> <li><code>echo hello world | wc</code> could be implemented without pipes as <code>echo hello world &gt;/tmp/xyz; wc &lt;/tmp/xyz</code></li> </ul> </li> <li>Pipes have at least three advantages over temporary files in this situation.<ul> <li>First, pipes automatically clean themselves up; with the file redirection, a shell would have to be careful to remove <code>/tmp/xyz</code> when done.</li> <li>Second, pipes can pass arbitrarily long streams of data, while file redirection requires enough free space on disk to store all the data.</li> <li>Third, pipes allow for parallel execution of pipeline stages, while the file approach requires the first program to finish before the second starts.</li> </ul> </li> </ul>"},{"location":"os/mit6s081/notes/lec1/#14-file-system","title":"1.4 File System","text":"<ul> <li>The xv6 file system provides data files, which contain uninterpreted byte arrays, and directories, which contain named references to data files and other directories.<ul> <li>The directories form a tree, starting at a special directory called the root. </li> <li>Paths that don\u2019t begin with / are evaluated relative to the calling process\u2019s current directory, which can be changed with the chdir system call.</li> </ul> </li> </ul> <ul> <li>There are system calls to create new files and directories: <ul> <li><code>mkdir</code> creates a new directory</li> <li><code>open</code> with the O_CREATE flag creates a new data file</li> <li><code>mknod</code> creates a new device file</li> </ul> </li> </ul> <ul> <li><code>mknod</code> creates a special file that refers to a device. Associated with a device file are the major and minor device numbers (the two arguments to <code>mknod</code>), which uniquely identify a kernel device.<ul> <li>When a process later opens a device file, the kernel diverts <code>read</code> and <code>write</code> system calls to the kernel device implementation instead of passing them to the file system.</li> </ul> </li> <li>Each link consists of an entry in a directory; the entry contains a file name and a reference to an inode.<ul> <li>An inode holds metadata about a file, including its type (file or directory or device), its length, the location of the file\u2019s content on disk, and the number of links to a file.</li> </ul> </li> <li>The <code>fstat</code> system call retrieves information from the inode that a file descriptor refers to.</li> </ul> <ul> <li>The <code>link</code> system call creates another file system name referring to the same inode as an existing file.<ul> <li>Each inode is identified by a unique inode number.</li> <li>After the code sequence above, it is possible to determine that a and b refer to the same underlying contents by inspecting the result of fstat: both will return the same inode number (<code>ino</code>), and the <code>nlink</code> count will be set to 2. </li> </ul> </li> </ul> C<pre><code>open(\"a\", O_CREATE|O_WRONLY);\nlink(\"a\", \"b\");\n</code></pre> <ul> <li>an idiomatic way to create a temporary inode with no name that will be cleaned up when the process closes <code>fd</code> or exits.</li> </ul> C<pre><code>fd = open(\"/tmp/xyz\", O_CREATE|O_RDWR);\nunlink(\"/tmp/xyz\");\n</code></pre> <ul> <li>Unix provides file utilities callable from the shell as user-level programs.</li> <li><code>cd</code> must change the current working directory of the shell itself.</li> </ul>"},{"location":"os/mit6s081/notes/lec1/#15-real-world","title":"1.5 Real World","text":"<ul> <li>Unix\u2019s combination of \u201cstandard\u201d file descriptors, pipes, and convenient shell syntax for operations on them was a major advance in writing general-purpose reusable programs.<ul> <li>The idea sparked a culture of \u201csoftware tools\u201d that was responsible for much of Unix\u2019s power and popularity, and the shell was the first so-called \u201cscripting language.\u201d</li> </ul> </li> <li>The Unix system call interface has been standardized through the Portable Operating System Interface (POSIX) standard.<ul> <li>Our main goals for xv6 are simplicity and clarity while providing a simple UNIX-like system-call interface.</li> </ul> </li> <li>Unix unified access to multiple types of resources (files, directories, and devices) with a single set of file-name and file-descriptor interfaces.<ul> <li>This idea can be extended to more kinds of resources.</li> </ul> </li> <li>The file system and file descriptors have been powerful abstractions. Even so, there are other models for operating system interfaces.<ul> <li>Multics, a predecessor of Unix, abstracted file storage in a way that made it look like memory, producing a very different flavor of interface. The complexity of the Multics design had a direct influence on the designers of Unix, who aimed to build something simpler.</li> </ul> </li> <li>Any operating system must multiplex processes onto the underlying hardware, isolate processes from each other, and provide mechanisms for controlled inter-process communication.</li> </ul>"},{"location":"os/mit6s081/notes/lec1/#lecture-1","title":"Lecture 1","text":""},{"location":"os/mit6s081/notes/lec2/","title":"Lec2","text":""},{"location":"os/mit6s081/notes/lec2/#1-preparationoperating-system-organization","title":"1. Preparation:Operating system organization","text":"<p>book-riscv-rev3 Chapter2</p>"},{"location":"os/mit6s081/notes/lec2/#2-lecture-2","title":"2. Lecture 2","text":""},{"location":"project/","title":"Project Engineering","text":""},{"location":"blog/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"}]}